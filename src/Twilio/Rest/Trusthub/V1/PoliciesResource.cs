/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PoliciesResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Trusthub.V1
{

  public class PoliciesResource : Resource
  {
    public sealed class EndUserTypeEnum : StringEnum
    {
      private EndUserTypeEnum(string value) : base(value) { }
      public EndUserTypeEnum() { }
      public static implicit operator EndUserTypeEnum(string value)
      {
        return new EndUserTypeEnum(value);
      }

      public static readonly EndUserTypeEnum Individual = new EndUserTypeEnum("individual");
      public static readonly EndUserTypeEnum Business = new EndUserTypeEnum("business");
    }

    private static Request BuildReadRequest(ReadPoliciesOptions options, ITwilioRestClient client)
    {
      return new Request(
          HttpMethod.Get,
          Rest.Domain.Trusthub,
          "/v1/Policies",
          queryParams: options.GetParams(),
          headerParams: null
      );
    }

    /// <summary>
    /// Retrieve a list of all Policys.
    /// </summary>
    /// <param name="options"> Read Policies parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of Policies </returns>
    public static ResourceSet<PoliciesResource> Read(ReadPoliciesOptions options, ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = client.Request(BuildReadRequest(options, client));

      var page = Page<PoliciesResource>.FromJson("results", response.Content);
      return new ResourceSet<PoliciesResource>(page, options, client);
    }

#if !NET35
    /// <summary>
    /// Retrieve a list of all Policys.
    /// </summary>
    /// <param name="options"> Read Policies parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of Policies </returns>
    public static async System.Threading.Tasks.Task<ResourceSet<PoliciesResource>> ReadAsync(ReadPoliciesOptions options,
                                                                                             ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = await client.RequestAsync(BuildReadRequest(options, client));

      var page = Page<PoliciesResource>.FromJson("results", response.Content);
      return new ResourceSet<PoliciesResource>(page, options, client);
    }
#endif

    /// <summary>
    /// Retrieve a list of all Policys.
    /// </summary>
    /// <param name="pageSize"> Page size </param>
    /// <param name="limit"> Record limit </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of Policies </returns>
    public static ResourceSet<PoliciesResource> Read(int? pageSize = null,
                                                     long? limit = null,
                                                     ITwilioRestClient client = null)
    {
      var options = new ReadPoliciesOptions() { PageSize = pageSize, Limit = limit };
      return Read(options, client);
    }

#if !NET35
    /// <summary>
    /// Retrieve a list of all Policys.
    /// </summary>
    /// <param name="pageSize"> Page size </param>
    /// <param name="limit"> Record limit </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of Policies </returns>
    public static async System.Threading.Tasks.Task<ResourceSet<PoliciesResource>> ReadAsync(int? pageSize = null,
                                                                                             long? limit = null,
                                                                                             ITwilioRestClient client = null)
    {
      var options = new ReadPoliciesOptions() { PageSize = pageSize, Limit = limit };
      return await ReadAsync(options, client);
    }
#endif

    /// <summary>
    /// Fetch the target page of records
    /// </summary>
    /// <param name="targetUrl"> API-generated URL for the requested results page </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> The target page of records </returns>
    public static Page<PoliciesResource> GetPage(string targetUrl, ITwilioRestClient client)
    {
      client = client ?? TwilioClient.GetRestClient();

      var request = new Request(
          HttpMethod.Get,
          targetUrl
      );

      var response = client.Request(request);
      return Page<PoliciesResource>.FromJson("results", response.Content);
    }

    /// <summary>
    /// Fetch the next page of records
    /// </summary>
    /// <param name="page"> current page of records </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> The next page of records </returns>
    public static Page<PoliciesResource> NextPage(Page<PoliciesResource> page, ITwilioRestClient client)
    {
      var request = new Request(
          HttpMethod.Get,
          page.GetNextPageUrl(Rest.Domain.Trusthub)
      );

      var response = client.Request(request);
      return Page<PoliciesResource>.FromJson("results", response.Content);
    }

    /// <summary>
    /// Fetch the previous page of records
    /// </summary>
    /// <param name="page"> current page of records </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> The previous page of records </returns>
    public static Page<PoliciesResource> PreviousPage(Page<PoliciesResource> page, ITwilioRestClient client)
    {
      var request = new Request(
          HttpMethod.Get,
          page.GetPreviousPageUrl(Rest.Domain.Trusthub)
      );

      var response = client.Request(request);
      return Page<PoliciesResource>.FromJson("results", response.Content);
    }

    private static Request BuildFetchRequest(FetchPoliciesOptions options, ITwilioRestClient client)
    {
      return new Request(
          HttpMethod.Get,
          Rest.Domain.Trusthub,
          "/v1/Policies/" + options.PathSid + "",
          queryParams: options.GetParams(),
          headerParams: null
      );
    }

    /// <summary>
    /// Fetch specific Policy Instance.
    /// </summary>
    /// <param name="options"> Fetch Policies parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of Policies </returns>
    public static PoliciesResource Fetch(FetchPoliciesOptions options, ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = client.Request(BuildFetchRequest(options, client));
      return FromJson(response.Content);
    }

#if !NET35
    /// <summary>
    /// Fetch specific Policy Instance.
    /// </summary>
    /// <param name="options"> Fetch Policies parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of Policies </returns>
    public static async System.Threading.Tasks.Task<PoliciesResource> FetchAsync(FetchPoliciesOptions options,
                                                                                 ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = await client.RequestAsync(BuildFetchRequest(options, client));
      return FromJson(response.Content);
    }
#endif

    /// <summary>
    /// Fetch specific Policy Instance.
    /// </summary>
    /// <param name="pathSid"> The unique string that identifies the Policy resource </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of Policies </returns>
    public static PoliciesResource Fetch(string pathSid, ITwilioRestClient client = null)
    {
      var options = new FetchPoliciesOptions(pathSid);
      return Fetch(options, client);
    }

#if !NET35
    /// <summary>
    /// Fetch specific Policy Instance.
    /// </summary>
    /// <param name="pathSid"> The unique string that identifies the Policy resource </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of Policies </returns>
    public static async System.Threading.Tasks.Task<PoliciesResource> FetchAsync(string pathSid,
                                                                                 ITwilioRestClient client = null)
    {
      var options = new FetchPoliciesOptions(pathSid);
      return await FetchAsync(options, client);
    }
#endif

    /// <summary>
    /// Converts a JSON string into a PoliciesResource object
    /// </summary>
    /// <param name="json"> Raw JSON string </param>
    /// <returns> PoliciesResource object represented by the provided JSON </returns>
    public static PoliciesResource FromJson(string json)
    {
      // Convert all checked exceptions to Runtime
      try
      {
        return JsonConvert.DeserializeObject<PoliciesResource>(json);
      }
      catch (JsonException e)
      {
        throw new ApiException(e.Message, e);
      }
    }

    /// <summary>
    /// The unique string that identifies the Policy resource
    /// </summary>
    [JsonProperty("sid")]
    public string Sid { get; private set; }
    /// <summary>
    /// A human-readable description of the Policy resource
    /// </summary>
    [JsonProperty("friendly_name")]
    public string FriendlyName { get; private set; }
    /// <summary>
    /// The sid of a Policy object that dictates requirements
    /// </summary>
    [JsonProperty("requirements")]
    public object Requirements { get; private set; }
    /// <summary>
    /// The absolute URL of the Policy resource
    /// </summary>
    [JsonProperty("url")]
    public Uri Url { get; private set; }

    private PoliciesResource()
    {

    }
  }

}