/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Trusthub.V1
{

  /// <summary>
  /// Create a new Customer-Profile.
  /// </summary>
  public class CreateCustomerProfilesOptions : IOptions<CustomerProfilesResource>
  {
    /// <summary>
    /// The string that you assigned to describe the resource
    /// </summary>
    public string FriendlyName { get; }
    /// <summary>
    /// The email address
    /// </summary>
    public string Email { get; }
    /// <summary>
    /// The unique string of a policy.
    /// </summary>
    public string PolicySid { get; }
    /// <summary>
    /// The URL we call to inform your application of status changes.
    /// </summary>
    public Uri StatusCallback { get; set; }

    /// <summary>
    /// Construct a new CreateCustomerProfilesOptions
    /// </summary>
    /// <param name="friendlyName"> The string that you assigned to describe the resource </param>
    /// <param name="email"> The email address </param>
    /// <param name="policySid"> The unique string of a policy. </param>
    public CreateCustomerProfilesOptions(string friendlyName, string email, string policySid)
    {
      FriendlyName = friendlyName;
      Email = email;
      PolicySid = policySid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      if (Email != null)
      {
        p.Add(new KeyValuePair<string, string>("Email", Email));
      }

      if (PolicySid != null)
      {
        p.Add(new KeyValuePair<string, string>("PolicySid", PolicySid.ToString()));
      }

      if (StatusCallback != null)
      {
        p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
      }

      return p;
    }
  }

  /// <summary>
  /// Retrieve a list of all Customer-Profiles for an account.
  /// </summary>
  public class ReadCustomerProfilesOptions : ReadOptions<CustomerProfilesResource>
  {
    /// <summary>
    /// The verification status of the Customer-Profile resource
    /// </summary>
    public CustomerProfilesResource.StatusEnum Status { get; set; }
    /// <summary>
    /// The string that you assigned to describe the resource
    /// </summary>
    public string FriendlyName { get; set; }
    /// <summary>
    /// The unique string of a policy.
    /// </summary>
    public string PolicySid { get; set; }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public override List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (Status != null)
      {
        p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
      }

      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      if (PolicySid != null)
      {
        p.Add(new KeyValuePair<string, string>("PolicySid", PolicySid.ToString()));
      }

      if (PageSize != null)
      {
        p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// Fetch a specific Customer-Profile instance.
  /// </summary>
  public class FetchCustomerProfilesOptions : IOptions<CustomerProfilesResource>
  {
    /// <summary>
    /// The unique string that identifies the resource.
    /// </summary>
    public string PathSid { get; }

    /// <summary>
    /// Construct a new FetchCustomerProfilesOptions
    /// </summary>
    /// <param name="pathSid"> The unique string that identifies the resource. </param>
    public FetchCustomerProfilesOptions(string pathSid)
    {
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

  /// <summary>
  /// Updates a Customer-Profile in an account.
  /// </summary>
  public class UpdateCustomerProfilesOptions : IOptions<CustomerProfilesResource>
  {
    /// <summary>
    /// The unique string that identifies the resource.
    /// </summary>
    public string PathSid { get; }
    /// <summary>
    /// The verification status of the Customer-Profile resource
    /// </summary>
    public CustomerProfilesResource.StatusEnum Status { get; set; }
    /// <summary>
    /// The URL we call to inform your application of status changes.
    /// </summary>
    public Uri StatusCallback { get; set; }
    /// <summary>
    /// The string that you assigned to describe the resource
    /// </summary>
    public string FriendlyName { get; set; }
    /// <summary>
    /// The email address
    /// </summary>
    public string Email { get; set; }

    /// <summary>
    /// Construct a new UpdateCustomerProfilesOptions
    /// </summary>
    /// <param name="pathSid"> The unique string that identifies the resource. </param>
    public UpdateCustomerProfilesOptions(string pathSid)
    {
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (Status != null)
      {
        p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
      }

      if (StatusCallback != null)
      {
        p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
      }

      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      if (Email != null)
      {
        p.Add(new KeyValuePair<string, string>("Email", Email));
      }

      return p;
    }
  }

  /// <summary>
  /// Delete a specific Customer-Profile.
  /// </summary>
  public class DeleteCustomerProfilesOptions : IOptions<CustomerProfilesResource>
  {
    /// <summary>
    /// The unique string that identifies the resource.
    /// </summary>
    public string PathSid { get; }

    /// <summary>
    /// Construct a new DeleteCustomerProfilesOptions
    /// </summary>
    /// <param name="pathSid"> The unique string that identifies the resource. </param>
    public DeleteCustomerProfilesOptions(string pathSid)
    {
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

}