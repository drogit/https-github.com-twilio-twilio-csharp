/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Trusthub.V1.CustomerProfiles
{

  /// <summary>
  /// Create a new Assigned Item.
  /// </summary>
  public class CreateCustomerProfilesChannelEndpointAssignmentOptions : IOptions<CustomerProfilesChannelEndpointAssignmentResource>
  {
    /// <summary>
    /// The unique string that identifies the resource.
    /// </summary>
    public string PathCustomerProfileSid { get; }
    /// <summary>
    /// The type of channel endpoint
    /// </summary>
    public string ChannelEndpointType { get; }
    /// <summary>
    /// The sid of an channel endpoint
    /// </summary>
    public string ChannelEndpointSid { get; }

    /// <summary>
    /// Construct a new CreateCustomerProfilesChannelEndpointAssignmentOptions
    /// </summary>
    /// <param name="pathCustomerProfileSid"> The unique string that identifies the resource. </param>
    /// <param name="channelEndpointType"> The type of channel endpoint </param>
    /// <param name="channelEndpointSid"> The sid of an channel endpoint </param>
    public CreateCustomerProfilesChannelEndpointAssignmentOptions(string pathCustomerProfileSid,
                                                                  string channelEndpointType,
                                                                  string channelEndpointSid)
    {
      PathCustomerProfileSid = pathCustomerProfileSid;
      ChannelEndpointType = channelEndpointType;
      ChannelEndpointSid = channelEndpointSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (ChannelEndpointType != null)
      {
        p.Add(new KeyValuePair<string, string>("ChannelEndpointType", ChannelEndpointType));
      }

      if (ChannelEndpointSid != null)
      {
        p.Add(new KeyValuePair<string, string>("ChannelEndpointSid", ChannelEndpointSid.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// Retrieve a list of all Assigned Items for an account.
  /// </summary>
  public class ReadCustomerProfilesChannelEndpointAssignmentOptions : ReadOptions<CustomerProfilesChannelEndpointAssignmentResource>
  {
    /// <summary>
    /// The unique string that identifies the resource.
    /// </summary>
    public string PathCustomerProfileSid { get; }
    /// <summary>
    /// The sid of an channel endpoint
    /// </summary>
    public string ChannelEndpointSid { get; set; }
    /// <summary>
    /// comma separated list of channel endpoint sids
    /// </summary>
    public string ChannelEndpointSids { get; set; }

    /// <summary>
    /// Construct a new ReadCustomerProfilesChannelEndpointAssignmentOptions
    /// </summary>
    /// <param name="pathCustomerProfileSid"> The unique string that identifies the resource. </param>
    public ReadCustomerProfilesChannelEndpointAssignmentOptions(string pathCustomerProfileSid)
    {
      PathCustomerProfileSid = pathCustomerProfileSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public override List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (ChannelEndpointSid != null)
      {
        p.Add(new KeyValuePair<string, string>("ChannelEndpointSid", ChannelEndpointSid.ToString()));
      }

      if (ChannelEndpointSids != null)
      {
        p.Add(new KeyValuePair<string, string>("ChannelEndpointSids", ChannelEndpointSids));
      }

      if (PageSize != null)
      {
        p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// Fetch specific Assigned Item Instance.
  /// </summary>
  public class FetchCustomerProfilesChannelEndpointAssignmentOptions : IOptions<CustomerProfilesChannelEndpointAssignmentResource>
  {
    /// <summary>
    /// The unique string that identifies the resource.
    /// </summary>
    public string PathCustomerProfileSid { get; }
    /// <summary>
    /// The unique string that identifies the resource
    /// </summary>
    public string PathSid { get; }

    /// <summary>
    /// Construct a new FetchCustomerProfilesChannelEndpointAssignmentOptions
    /// </summary>
    /// <param name="pathCustomerProfileSid"> The unique string that identifies the resource. </param>
    /// <param name="pathSid"> The unique string that identifies the resource </param>
    public FetchCustomerProfilesChannelEndpointAssignmentOptions(string pathCustomerProfileSid, string pathSid)
    {
      PathCustomerProfileSid = pathCustomerProfileSid;
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

  /// <summary>
  /// Remove an Assignment Item Instance.
  /// </summary>
  public class DeleteCustomerProfilesChannelEndpointAssignmentOptions : IOptions<CustomerProfilesChannelEndpointAssignmentResource>
  {
    /// <summary>
    /// The unique string that identifies the resource.
    /// </summary>
    public string PathCustomerProfileSid { get; }
    /// <summary>
    /// The unique string that identifies the resource
    /// </summary>
    public string PathSid { get; }

    /// <summary>
    /// Construct a new DeleteCustomerProfilesChannelEndpointAssignmentOptions
    /// </summary>
    /// <param name="pathCustomerProfileSid"> The unique string that identifies the resource. </param>
    /// <param name="pathSid"> The unique string that identifies the resource </param>
    public DeleteCustomerProfilesChannelEndpointAssignmentOptions(string pathCustomerProfileSid, string pathSid)
    {
      PathCustomerProfileSid = pathCustomerProfileSid;
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

}