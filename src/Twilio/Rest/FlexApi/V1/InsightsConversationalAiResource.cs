/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Constant;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;


namespace Twilio.Rest.FlexApi.V1
{
    public class InsightsConversationalAiResource : Resource
    {
    

    
        [JsonConverter(typeof(StringEnumConverter))]
        public sealed class GranularityEnum : StringEnum
        {
            private GranularityEnum(string value) : base(value) {}
            public GranularityEnum() {}
            public static implicit operator GranularityEnum(string value)
            {
                return new GranularityEnum(value);
            }
            public static readonly GranularityEnum Days = new GranularityEnum("days");
            public static readonly GranularityEnum Weeks = new GranularityEnum("weeks");
            public static readonly GranularityEnum Months = new GranularityEnum("months");
            public static readonly GranularityEnum Quarters = new GranularityEnum("quarters");
            public static readonly GranularityEnum Years = new GranularityEnum("years");

        }

        
        private static Request BuildFetchRequest(FetchInsightsConversationalAiOptions options, ITwilioRestClient client)
        {
            
            string path = "/v1/Insights/Instances/{InstanceSid}/AI/Reports";

            string PathInstanceSid = options.PathInstanceSid;
            path = path.Replace("{"+"InstanceSid"+"}", PathInstanceSid);

            return new Request(
                HttpMethod.Get,
                Rest.Domain.FlexApi,
                path,
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary> Fetch Account Based Conversational AI Reports </summary>
        /// <param name="options"> Fetch InsightsConversationalAi parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InsightsConversationalAi </returns>
        public static InsightsConversationalAiResource Fetch(FetchInsightsConversationalAiOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary> Fetch Account Based Conversational AI Reports </summary>
        /// <param name="options"> Fetch InsightsConversationalAi parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InsightsConversationalAi </returns>
        public static async System.Threading.Tasks.Task<InsightsConversationalAiResource> FetchAsync(FetchInsightsConversationalAiOptions options,
                                                                                             ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif
        /// <summary> Fetch Account Based Conversational AI Reports </summary>
        /// <param name="pathInstanceSid"> Sid of Flex Service Instance </param>
        /// <param name="maxRows"> Maximum number of rows to return </param>
        /// <param name="reportId"> The type of report required to fetch.Like gauge,channel-metrics,queue-metrics </param>
        /// <param name="granularity"> The time period for which report is needed </param>
        /// <param name="includeDate"> A reference date that should be included in the returned period </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of InsightsConversationalAi </returns>
        public static InsightsConversationalAiResource Fetch(
                                         string pathInstanceSid, 
                                         int? maxRows = null, 
                                         string reportId = null, 
                                         InsightsConversationalAiResource.GranularityEnum granularity = null, 
                                         DateTime? includeDate = null, 
                                         ITwilioRestClient client = null)
        {
            var options = new FetchInsightsConversationalAiOptions(pathInstanceSid){ MaxRows = maxRows,ReportId = reportId,Granularity = granularity,IncludeDate = includeDate };
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary> Fetch Account Based Conversational AI Reports </summary>
        /// <param name="pathInstanceSid"> Sid of Flex Service Instance </param>
        /// <param name="maxRows"> Maximum number of rows to return </param>
        /// <param name="reportId"> The type of report required to fetch.Like gauge,channel-metrics,queue-metrics </param>
        /// <param name="granularity"> The time period for which report is needed </param>
        /// <param name="includeDate"> A reference date that should be included in the returned period </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of InsightsConversationalAi </returns>
        public static async System.Threading.Tasks.Task<InsightsConversationalAiResource> FetchAsync(string pathInstanceSid, int? maxRows = null, string reportId = null, InsightsConversationalAiResource.GranularityEnum granularity = null, DateTime? includeDate = null, ITwilioRestClient client = null)
        {
            var options = new FetchInsightsConversationalAiOptions(pathInstanceSid){ MaxRows = maxRows,ReportId = reportId,Granularity = granularity,IncludeDate = includeDate };
            return await FetchAsync(options, client);
        }
        #endif
    
        /// <summary>
        /// Converts a JSON string into a InsightsConversationalAiResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> InsightsConversationalAiResource object represented by the provided JSON </returns>
        public static InsightsConversationalAiResource FromJson(string json)
        {
            try
            {
                return JsonConvert.DeserializeObject<InsightsConversationalAiResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }
        /// <summary>
    /// Converts an object into a json string
    /// </summary>
    /// <param name="model"> C# model </param>
    /// <returns> JSON string </returns>
    public static string ToJson(object model)
    {
        try
        {
            return JsonConvert.SerializeObject(model);
        }
        catch (JsonException e)
        {
            throw new ApiException(e.Message, e);
        }
    }

    
        ///<summary> Sid of Flex Service Instance </summary> 
        [JsonProperty("instance_sid")]
        public string InstanceSid { get; private set; }

        ///<summary> The type of report required to fetch.Like gauge,channel-metrics,queue-metrics </summary> 
        [JsonProperty("report_id")]
        public string ReportId { get; private set; }

        
        [JsonProperty("granularity")]
        public InsightsConversationalAiResource.GranularityEnum Granularity { get; private set; }

        ///<summary> The start date from which report data is included </summary> 
        [JsonProperty("period_start")]
        public DateTime? PeriodStart { get; private set; }

        ///<summary> The end date till report data is included </summary> 
        [JsonProperty("period_end")]
        public DateTime? PeriodEnd { get; private set; }

        ///<summary> Updated time of the report </summary> 
        [JsonProperty("updated")]
        public DateTime? Updated { get; private set; }

        ///<summary> Represents total number of pages fetched report has </summary> 
        [JsonProperty("total_pages")]
        public int? TotalPages { get; private set; }

        ///<summary> Page offset required for pagination </summary> 
        [JsonProperty("page")]
        public int? Page { get; private set; }

        ///<summary> List of report breakdown  </summary> 
        [JsonProperty("rows")]
        public List<object> Rows { get; private set; }

        ///<summary> The URL of this resource. </summary> 
        [JsonProperty("url")]
        public Uri Url { get; private set; }



        private InsightsConversationalAiResource() {

        }
    }
}

