/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;




namespace Twilio.Rest.FlexApi.V1
{
    /// <summary> Fetch Instance Based Conversational AI Report Insights </summary>
    public class FetchInsightsConversationalAiReportInsightsOptions : IOptions<InsightsConversationalAiReportInsightsResource>
    {
    
        ///<summary> The Instance SID of the instance for which report insights will be fetched </summary> 
        public string PathInstanceSid { get; }

        ///<summary> Maximum number of rows to return </summary> 
        public int? MaxRows { get; set; }

        ///<summary> The type of report insights required to fetch.Like gauge,channel-metrics,queue-metrics </summary> 
        public string ReportId { get; set; }

        ///<summary> The time period for which report insights is needed </summary> 
        public string Granularity { get; set; }

        ///<summary> A reference date that should be included in the returned period </summary> 
        public DateTime? IncludeDate { get; set; }



        /// <summary> Construct a new FetchInsightsConversationalAiReportInsightsOptions </summary>
        /// <param name="pathInstanceSid"> The Instance SID of the instance for which report insights will be fetched </param>
        public FetchInsightsConversationalAiReportInsightsOptions(string pathInstanceSid)
        {
            PathInstanceSid = pathInstanceSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (MaxRows != null)
            {
                p.Add(new KeyValuePair<string, string>("MaxRows", MaxRows.ToString()));
            }
            if (ReportId != null)
            {
                p.Add(new KeyValuePair<string, string>("ReportId", ReportId));
            }
            if (Granularity != null)
            {
                p.Add(new KeyValuePair<string, string>("Granularity", Granularity));
            }
            if (IncludeDate != null)
            {
                p.Add(new KeyValuePair<string, string>("IncludeDate", Serializers.DateTimeIso8601(IncludeDate)));
            }
            return p;
        }

        

    }


}

