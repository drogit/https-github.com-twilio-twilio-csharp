/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Insights.V1
{

    /// <summary>
    /// UpdateAnnotationOptions
    /// </summary>
    public class UpdateAnnotationOptions : IOptions<AnnotationResource>
    {
        /// <summary>
        /// The call_sid
        /// </summary>
        public string PathCallSid { get; }
        /// <summary>
        /// The answered_by
        /// </summary>
        public AnnotationResource.AnsweredByEnum AnsweredBy { get; set; }
        /// <summary>
        /// The connectivity_issue
        /// </summary>
        public AnnotationResource.ConnectivityIssueEnum ConnectivityIssue { get; set; }
        /// <summary>
        /// The quality_issues
        /// </summary>
        public string QualityIssues { get; set; }
        /// <summary>
        /// The spam
        /// </summary>
        public bool? Spam { get; set; }
        /// <summary>
        /// The call_score
        /// </summary>
        public int? CallScore { get; set; }
        /// <summary>
        /// The comment
        /// </summary>
        public string Comment { get; set; }
        /// <summary>
        /// The incident
        /// </summary>
        public string Incident { get; set; }

        /// <summary>
        /// Construct a new UpdateAnnotationOptions
        /// </summary>
        /// <param name="pathCallSid"> The call_sid </param>
        public UpdateAnnotationOptions(string pathCallSid)
        {
            PathCallSid = pathCallSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (AnsweredBy != null)
            {
                p.Add(new KeyValuePair<string, string>("AnsweredBy", AnsweredBy.ToString()));
            }

            if (ConnectivityIssue != null)
            {
                p.Add(new KeyValuePair<string, string>("ConnectivityIssue", ConnectivityIssue.ToString()));
            }

            if (QualityIssues != null)
            {
                p.Add(new KeyValuePair<string, string>("QualityIssues", QualityIssues));
            }

            if (Spam != null)
            {
                p.Add(new KeyValuePair<string, string>("Spam", Spam.Value.ToString().ToLower()));
            }

            if (CallScore != null)
            {
                p.Add(new KeyValuePair<string, string>("CallScore", CallScore.ToString()));
            }

            if (Comment != null)
            {
                p.Add(new KeyValuePair<string, string>("Comment", Comment));
            }

            if (Incident != null)
            {
                p.Add(new KeyValuePair<string, string>("Incident", Incident));
            }

            return p;
        }
    }

    /// <summary>
    /// FetchAnnotationOptions
    /// </summary>
    public class FetchAnnotationOptions : IOptions<AnnotationResource>
    {
        /// <summary>
        /// The call_sid
        /// </summary>
        public string PathCallSid { get; }

        /// <summary>
        /// Construct a new FetchAnnotationOptions
        /// </summary>
        /// <param name="pathCallSid"> The call_sid </param>
        public FetchAnnotationOptions(string pathCallSid)
        {
            PathCallSid = pathCallSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}