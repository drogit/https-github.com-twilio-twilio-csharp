/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Insights.V1.Conference
{

    /// <summary>
    /// Fetch a specific Conference Participant Summary.
    /// </summary>
    public class FetchConferenceParticipantOptions : IOptions<ConferenceParticipantResource>
    {
        /// <summary>
        /// Conference SID.
        /// </summary>
        public string PathConferenceSid { get; }
        /// <summary>
        /// Participant SID.
        /// </summary>
        public string PathParticipantSid { get; }
        /// <summary>
        /// Conference events generated by application or participant activity.
        /// </summary>
        public string Events { get; set; }
        /// <summary>
        /// Object. Contains call quality metrics.
        /// </summary>
        public string Metrics { get; set; }

        /// <summary>
        /// Construct a new FetchConferenceParticipantOptions
        /// </summary>
        /// <param name="pathConferenceSid"> Conference SID. </param>
        /// <param name="pathParticipantSid"> Participant SID. </param>
        public FetchConferenceParticipantOptions(string pathConferenceSid, string pathParticipantSid)
        {
            PathConferenceSid = pathConferenceSid;
            PathParticipantSid = pathParticipantSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Events != null)
            {
                p.Add(new KeyValuePair<string, string>("Events", Events));
            }

            if (Metrics != null)
            {
                p.Add(new KeyValuePair<string, string>("Metrics", Metrics));
            }

            return p;
        }
    }

    /// <summary>
    /// List Conference Participants.
    /// </summary>
    public class ReadConferenceParticipantOptions : ReadOptions<ConferenceParticipantResource>
    {
        /// <summary>
        /// Conference SID.
        /// </summary>
        public string PathConferenceSid { get; }
        /// <summary>
        /// Participant SID.
        /// </summary>
        public string ParticipantSid { get; set; }
        /// <summary>
        /// User-specified label for a participant.
        /// </summary>
        public string Label { get; set; }
        /// <summary>
        /// Conference events generated by application or participant activity.
        /// </summary>
        public string Events { get; set; }

        /// <summary>
        /// Construct a new ReadConferenceParticipantOptions
        /// </summary>
        /// <param name="pathConferenceSid"> Conference SID. </param>
        public ReadConferenceParticipantOptions(string pathConferenceSid)
        {
            PathConferenceSid = pathConferenceSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (ParticipantSid != null)
            {
                p.Add(new KeyValuePair<string, string>("ParticipantSid", ParticipantSid));
            }

            if (Label != null)
            {
                p.Add(new KeyValuePair<string, string>("Label", Label));
            }

            if (Events != null)
            {
                p.Add(new KeyValuePair<string, string>("Events", Events));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

}