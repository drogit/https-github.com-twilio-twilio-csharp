/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
///
/// AnnotationResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Insights.V1.Call
{

    public class AnnotationResource : Resource
    {
        public sealed class AnsweredByEnum : StringEnum
        {
            private AnsweredByEnum(string value) : base(value) {}
            public AnsweredByEnum() {}
            public static implicit operator AnsweredByEnum(string value)
            {
                return new AnsweredByEnum(value);
            }

            public static readonly AnsweredByEnum UnknownAnsweredBy = new AnsweredByEnum("unknown_answered_by");
            public static readonly AnsweredByEnum Human = new AnsweredByEnum("human");
            public static readonly AnsweredByEnum Machine = new AnsweredByEnum("machine");
        }

        public sealed class ConnectivityIssueEnum : StringEnum
        {
            private ConnectivityIssueEnum(string value) : base(value) {}
            public ConnectivityIssueEnum() {}
            public static implicit operator ConnectivityIssueEnum(string value)
            {
                return new ConnectivityIssueEnum(value);
            }

            public static readonly ConnectivityIssueEnum UnknownConnectivityIssue = new ConnectivityIssueEnum("unknown_connectivity_issue");
            public static readonly ConnectivityIssueEnum NoConnectivityIssue = new ConnectivityIssueEnum("no_connectivity_issue");
            public static readonly ConnectivityIssueEnum InvalidNumber = new ConnectivityIssueEnum("invalid_number");
            public static readonly ConnectivityIssueEnum CallerId = new ConnectivityIssueEnum("caller_id");
            public static readonly ConnectivityIssueEnum DroppedCall = new ConnectivityIssueEnum("dropped_call");
            public static readonly ConnectivityIssueEnum NumberReachability = new ConnectivityIssueEnum("number_reachability");
        }

        public sealed class QualityIssuesEnum : StringEnum
        {
            private QualityIssuesEnum(string value) : base(value) {}
            public QualityIssuesEnum() {}
            public static implicit operator QualityIssuesEnum(string value)
            {
                return new QualityIssuesEnum(value);
            }

            public static readonly QualityIssuesEnum UnknownQualityIssue = new QualityIssuesEnum("unknown_quality_issue");
            public static readonly QualityIssuesEnum NoQualityIssue = new QualityIssuesEnum("no_quality_issue");
            public static readonly QualityIssuesEnum LowVolume = new QualityIssuesEnum("low_volume");
            public static readonly QualityIssuesEnum ChoppyRobotic = new QualityIssuesEnum("choppy_robotic");
            public static readonly QualityIssuesEnum Echo = new QualityIssuesEnum("echo");
            public static readonly QualityIssuesEnum Dtmf = new QualityIssuesEnum("dtmf");
            public static readonly QualityIssuesEnum Latency = new QualityIssuesEnum("latency");
            public static readonly QualityIssuesEnum Owa = new QualityIssuesEnum("owa");
            public static readonly QualityIssuesEnum StaticNoise = new QualityIssuesEnum("static_noise");
        }

        private static Request BuildUpdateRequest(UpdateAnnotationOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Insights,
                "/v1/Voice/" + options.PathCallSid + "/Annotation",
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Create/Update the annotation for the call
        /// </summary>
        /// <param name="options"> Update Annotation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Annotation </returns>
        public static AnnotationResource Update(UpdateAnnotationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Create/Update the annotation for the call
        /// </summary>
        /// <param name="options"> Update Annotation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Annotation </returns>
        public static async System.Threading.Tasks.Task<AnnotationResource> UpdateAsync(UpdateAnnotationOptions options,
                                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Create/Update the annotation for the call
        /// </summary>
        /// <param name="pathCallSid"> The SID of the call. </param>
        /// <param name="answeredBy"> Indicates the answering entity as determined by Answering Machine Detection. </param>
        /// <param name="connectivityIssue"> Indicates if the call had any connectivity issue </param>
        /// <param name="qualityIssues"> Indicates if the call had audio quality issues. </param>
        /// <param name="spam"> Call spam indicator </param>
        /// <param name="callScore"> Call Score </param>
        /// <param name="comment"> User comments </param>
        /// <param name="incident"> Call tag for incidents or support ticket </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Annotation </returns>
        public static AnnotationResource Update(string pathCallSid,
                                                AnnotationResource.AnsweredByEnum answeredBy = null,
                                                AnnotationResource.ConnectivityIssueEnum connectivityIssue = null,
                                                string qualityIssues = null,
                                                bool? spam = null,
                                                int? callScore = null,
                                                string comment = null,
                                                string incident = null,
                                                ITwilioRestClient client = null)
        {
            var options = new UpdateAnnotationOptions(pathCallSid){AnsweredBy = answeredBy, ConnectivityIssue = connectivityIssue, QualityIssues = qualityIssues, Spam = spam, CallScore = callScore, Comment = comment, Incident = incident};
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// Create/Update the annotation for the call
        /// </summary>
        /// <param name="pathCallSid"> The SID of the call. </param>
        /// <param name="answeredBy"> Indicates the answering entity as determined by Answering Machine Detection. </param>
        /// <param name="connectivityIssue"> Indicates if the call had any connectivity issue </param>
        /// <param name="qualityIssues"> Indicates if the call had audio quality issues. </param>
        /// <param name="spam"> Call spam indicator </param>
        /// <param name="callScore"> Call Score </param>
        /// <param name="comment"> User comments </param>
        /// <param name="incident"> Call tag for incidents or support ticket </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Annotation </returns>
        public static async System.Threading.Tasks.Task<AnnotationResource> UpdateAsync(string pathCallSid,
                                                                                        AnnotationResource.AnsweredByEnum answeredBy = null,
                                                                                        AnnotationResource.ConnectivityIssueEnum connectivityIssue = null,
                                                                                        string qualityIssues = null,
                                                                                        bool? spam = null,
                                                                                        int? callScore = null,
                                                                                        string comment = null,
                                                                                        string incident = null,
                                                                                        ITwilioRestClient client = null)
        {
            var options = new UpdateAnnotationOptions(pathCallSid){AnsweredBy = answeredBy, ConnectivityIssue = connectivityIssue, QualityIssues = qualityIssues, Spam = spam, CallScore = callScore, Comment = comment, Incident = incident};
            return await UpdateAsync(options, client);
        }
        #endif

        private static Request BuildFetchRequest(FetchAnnotationOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Insights,
                "/v1/Voice/" + options.PathCallSid + "/Annotation",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Fetch a specific Annotation.
        /// </summary>
        /// <param name="options"> Fetch Annotation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Annotation </returns>
        public static AnnotationResource Fetch(FetchAnnotationOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Fetch a specific Annotation.
        /// </summary>
        /// <param name="options"> Fetch Annotation parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Annotation </returns>
        public static async System.Threading.Tasks.Task<AnnotationResource> FetchAsync(FetchAnnotationOptions options,
                                                                                       ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Fetch a specific Annotation.
        /// </summary>
        /// <param name="pathCallSid"> Call SID. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Annotation </returns>
        public static AnnotationResource Fetch(string pathCallSid, ITwilioRestClient client = null)
        {
            var options = new FetchAnnotationOptions(pathCallSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Fetch a specific Annotation.
        /// </summary>
        /// <param name="pathCallSid"> Call SID. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Annotation </returns>
        public static async System.Threading.Tasks.Task<AnnotationResource> FetchAsync(string pathCallSid,
                                                                                       ITwilioRestClient client = null)
        {
            var options = new FetchAnnotationOptions(pathCallSid);
            return await FetchAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a AnnotationResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> AnnotationResource object represented by the provided JSON </returns>
        public static AnnotationResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<AnnotationResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// Call SID.
        /// </summary>
        [JsonProperty("call_sid")]
        public string CallSid { get; private set; }
        /// <summary>
        /// Account SID.
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// Indicates the answering entity as determined by Answering Machine Detection.
        /// </summary>
        [JsonProperty("answered_by")]
        [JsonConverter(typeof(StringEnumConverter))]
        public AnnotationResource.AnsweredByEnum AnsweredBy { get; private set; }
        /// <summary>
        /// Indicates if the call had any connectivity issue
        /// </summary>
        [JsonProperty("connectivity_issue")]
        [JsonConverter(typeof(StringEnumConverter))]
        public AnnotationResource.ConnectivityIssueEnum ConnectivityIssue { get; private set; }
        /// <summary>
        /// Indicates if the call had audio quality issues.
        /// </summary>
        [JsonProperty("quality_issues")]
        public List<string> QualityIssues { get; private set; }
        /// <summary>
        /// Call spam indicator
        /// </summary>
        [JsonProperty("spam")]
        public bool? Spam { get; private set; }
        /// <summary>
        /// Call Score
        /// </summary>
        [JsonProperty("call_score")]
        public int? CallScore { get; private set; }
        /// <summary>
        /// User comments
        /// </summary>
        [JsonProperty("comment")]
        public string Comment { get; private set; }
        /// <summary>
        /// Call tag for incidents or support ticket
        /// </summary>
        [JsonProperty("incident")]
        public string Incident { get; private set; }
        /// <summary>
        /// The URL of this resource.
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private AnnotationResource()
        {

        }
    }

}