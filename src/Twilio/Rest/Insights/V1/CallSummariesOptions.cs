/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Insights.V1
{

    /// <summary>
    /// ReadCallSummariesOptions
    /// </summary>
    public class ReadCallSummariesOptions : ReadOptions<CallSummariesResource>
    {
        /// <summary>
        /// The from
        /// </summary>
        public List<string> From { get; set; }
        /// <summary>
        /// The to
        /// </summary>
        public List<string> To { get; set; }
        /// <summary>
        /// The from_carrier
        /// </summary>
        public List<string> FromCarrier { get; set; }
        /// <summary>
        /// The to_carrier
        /// </summary>
        public List<string> ToCarrier { get; set; }
        /// <summary>
        /// The from_country_code
        /// </summary>
        public List<string> FromCountryCode { get; set; }
        /// <summary>
        /// The to_country_code
        /// </summary>
        public List<string> ToCountryCode { get; set; }
        /// <summary>
        /// The branded
        /// </summary>
        public bool? Branded { get; set; }
        /// <summary>
        /// The verified_caller
        /// </summary>
        public bool? VerifiedCaller { get; set; }
        /// <summary>
        /// The has_tag
        /// </summary>
        public bool? HasTag { get; set; }
        /// <summary>
        /// The start_time
        /// </summary>
        public string StartTime { get; set; }
        /// <summary>
        /// The end_time
        /// </summary>
        public string EndTime { get; set; }
        /// <summary>
        /// The call_type
        /// </summary>
        public List<string> CallType { get; set; }
        /// <summary>
        /// The call_state
        /// </summary>
        public List<string> CallState { get; set; }
        /// <summary>
        /// The direction
        /// </summary>
        public CallSummariesResource.CallDirectionEnum Direction { get; set; }
        /// <summary>
        /// The processing_state
        /// </summary>
        public CallSummariesResource.ProcessingStateRequestEnum ProcessingState { get; set; }
        /// <summary>
        /// The sort_by
        /// </summary>
        public CallSummariesResource.SortByEnum SortBy { get; set; }
        /// <summary>
        /// The subaccount
        /// </summary>
        public string Subaccount { get; set; }

        /// <summary>
        /// Construct a new ReadCallSummariesOptions
        /// </summary>
        public ReadCallSummariesOptions()
        {
            From = new List<string>();
            To = new List<string>();
            FromCarrier = new List<string>();
            ToCarrier = new List<string>();
            FromCountryCode = new List<string>();
            ToCountryCode = new List<string>();
            CallType = new List<string>();
            CallState = new List<string>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (From != null)
            {
                p.AddRange(From.Select(prop => new KeyValuePair<string, string>("From", prop)));
            }

            if (To != null)
            {
                p.AddRange(To.Select(prop => new KeyValuePair<string, string>("To", prop)));
            }

            if (FromCarrier != null)
            {
                p.AddRange(FromCarrier.Select(prop => new KeyValuePair<string, string>("FromCarrier", prop)));
            }

            if (ToCarrier != null)
            {
                p.AddRange(ToCarrier.Select(prop => new KeyValuePair<string, string>("ToCarrier", prop)));
            }

            if (FromCountryCode != null)
            {
                p.AddRange(FromCountryCode.Select(prop => new KeyValuePair<string, string>("FromCountryCode", prop)));
            }

            if (ToCountryCode != null)
            {
                p.AddRange(ToCountryCode.Select(prop => new KeyValuePair<string, string>("ToCountryCode", prop)));
            }

            if (Branded != null)
            {
                p.Add(new KeyValuePair<string, string>("Branded", Branded.Value.ToString().ToLower()));
            }

            if (VerifiedCaller != null)
            {
                p.Add(new KeyValuePair<string, string>("VerifiedCaller", VerifiedCaller.Value.ToString().ToLower()));
            }

            if (HasTag != null)
            {
                p.Add(new KeyValuePair<string, string>("HasTag", HasTag.Value.ToString().ToLower()));
            }

            if (StartTime != null)
            {
                p.Add(new KeyValuePair<string, string>("StartTime", StartTime));
            }

            if (EndTime != null)
            {
                p.Add(new KeyValuePair<string, string>("EndTime", EndTime));
            }

            if (CallType != null)
            {
                p.AddRange(CallType.Select(prop => new KeyValuePair<string, string>("CallType", prop)));
            }

            if (CallState != null)
            {
                p.AddRange(CallState.Select(prop => new KeyValuePair<string, string>("CallState", prop)));
            }

            if (Direction != null)
            {
                p.Add(new KeyValuePair<string, string>("Direction", Direction.ToString()));
            }

            if (ProcessingState != null)
            {
                p.Add(new KeyValuePair<string, string>("ProcessingState", ProcessingState.ToString()));
            }

            if (SortBy != null)
            {
                p.Add(new KeyValuePair<string, string>("SortBy", SortBy.ToString()));
            }

            if (Subaccount != null)
            {
                p.Add(new KeyValuePair<string, string>("Subaccount", Subaccount.ToString()));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

}