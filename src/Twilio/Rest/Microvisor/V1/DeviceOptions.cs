/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Microvisor.V1
{

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// Retrieve a list of all Devices registered with the Account.
    /// </summary>
    public class ReadDeviceOptions : ReadOptions<DeviceResource>
    {
        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// Fetch a specific Device.
    /// </summary>
    public class FetchDeviceOptions : IOptions<DeviceResource>
    {
        /// <summary>
        /// A string that uniquely identifies this Device.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchDeviceOptions
        /// </summary>
        /// <param name="pathSid"> A string that uniquely identifies this Device. </param>
        public FetchDeviceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// Update a specific Device.
    /// </summary>
    public class UpdateDeviceOptions : IOptions<DeviceResource>
    {
        /// <summary>
        /// A string that uniquely identifies this Device.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// A unique, developer-assigned name for this Device.
        /// </summary>
        public string UniqueName { get; set; }
        /// <summary>
        /// The target App SID or unique name.
        /// </summary>
        public string TargetApp { get; set; }
        /// <summary>
        /// Whether to enable logging.
        /// </summary>
        public bool? LoggingEnabled { get; set; }

        /// <summary>
        /// Construct a new UpdateDeviceOptions
        /// </summary>
        /// <param name="pathSid"> A string that uniquely identifies this Device. </param>
        public UpdateDeviceOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }

            if (TargetApp != null)
            {
                p.Add(new KeyValuePair<string, string>("TargetApp", TargetApp.ToString()));
            }

            if (LoggingEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("LoggingEnabled", LoggingEnabled.Value.ToString().ToLower()));
            }

            return p;
        }
    }

}