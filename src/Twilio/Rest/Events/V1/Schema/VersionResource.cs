/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
/// currently do not have developer preview access, please contact help@twilio.com.
///
/// VersionResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Events.V1.Schema
{

    public class VersionResource : Resource
    {
        private static Request BuildReadRequest(ReadVersionOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Events,
                "/v1/Schemas/" + options.PathId + "/Versions",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Retrieve a paginated list of versions of the schema.
        /// </summary>
        /// <param name="options"> Read Version parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Version </returns>
        public static ResourceSet<VersionResource> Read(ReadVersionOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<VersionResource>.FromJson("schema_versions", response.Content);
            return new ResourceSet<VersionResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a paginated list of versions of the schema.
        /// </summary>
        /// <param name="options"> Read Version parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Version </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<VersionResource>> ReadAsync(ReadVersionOptions options,
                                                                                                ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<VersionResource>.FromJson("schema_versions", response.Content);
            return new ResourceSet<VersionResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// Retrieve a paginated list of versions of the schema.
        /// </summary>
        /// <param name="pathId"> The unique identifier of the schema. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Version </returns>
        public static ResourceSet<VersionResource> Read(string pathId,
                                                        int? pageSize = null,
                                                        long? limit = null,
                                                        ITwilioRestClient client = null)
        {
            var options = new ReadVersionOptions(pathId){PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a paginated list of versions of the schema.
        /// </summary>
        /// <param name="pathId"> The unique identifier of the schema. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Version </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<VersionResource>> ReadAsync(string pathId,
                                                                                                int? pageSize = null,
                                                                                                long? limit = null,
                                                                                                ITwilioRestClient client = null)
        {
            var options = new ReadVersionOptions(pathId){PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<VersionResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<VersionResource>.FromJson("schema_versions", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<VersionResource> NextPage(Page<VersionResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Events)
            );

            var response = client.Request(request);
            return Page<VersionResource>.FromJson("schema_versions", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<VersionResource> PreviousPage(Page<VersionResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Events)
            );

            var response = client.Request(request);
            return Page<VersionResource>.FromJson("schema_versions", response.Content);
        }

        private static Request BuildFetchRequest(FetchVersionOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Events,
                "/v1/Schemas/" + options.PathId + "/Versions/" + options.PathSchemaVersion + "",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Fetch a specific schema and version.
        /// </summary>
        /// <param name="options"> Fetch Version parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Version </returns>
        public static VersionResource Fetch(FetchVersionOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Fetch a specific schema and version.
        /// </summary>
        /// <param name="options"> Fetch Version parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Version </returns>
        public static async System.Threading.Tasks.Task<VersionResource> FetchAsync(FetchVersionOptions options,
                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Fetch a specific schema and version.
        /// </summary>
        /// <param name="pathId"> The unique identifier of the schema. </param>
        /// <param name="pathSchemaVersion"> The version of the schema </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Version </returns>
        public static VersionResource Fetch(string pathId, int? pathSchemaVersion, ITwilioRestClient client = null)
        {
            var options = new FetchVersionOptions(pathId, pathSchemaVersion);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Fetch a specific schema and version.
        /// </summary>
        /// <param name="pathId"> The unique identifier of the schema. </param>
        /// <param name="pathSchemaVersion"> The version of the schema </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Version </returns>
        public static async System.Threading.Tasks.Task<VersionResource> FetchAsync(string pathId,
                                                                                    int? pathSchemaVersion,
                                                                                    ITwilioRestClient client = null)
        {
            var options = new FetchVersionOptions(pathId, pathSchemaVersion);
            return await FetchAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a VersionResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> VersionResource object represented by the provided JSON </returns>
        public static VersionResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<VersionResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The unique identifier of the schema.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; private set; }
        /// <summary>
        /// The version of this schema.
        /// </summary>
        [JsonProperty("schema_version")]
        public int? SchemaVersion { get; private set; }
        /// <summary>
        /// The date the schema version was created.
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The URL of this resource.
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }
        /// <summary>
        /// The raw
        /// </summary>
        [JsonProperty("raw")]
        public Uri Raw { get; private set; }

        private VersionResource()
        {

        }
    }

}