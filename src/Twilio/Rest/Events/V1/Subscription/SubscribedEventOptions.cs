/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Events.V1.Subscription
{

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// ReadSubscribedEventOptions
    /// </summary>
    public class ReadSubscribedEventOptions : ReadOptions<SubscribedEventResource>
    {
        /// <summary>
        /// The subscription_sid
        /// </summary>
        public string PathSubscriptionSid { get; }

        /// <summary>
        /// Construct a new ReadSubscribedEventOptions
        /// </summary>
        /// <param name="pathSubscriptionSid"> The subscription_sid </param>
        public ReadSubscribedEventOptions(string pathSubscriptionSid)
        {
            PathSubscriptionSid = pathSubscriptionSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// CreateSubscribedEventOptions
    /// </summary>
    public class CreateSubscribedEventOptions : IOptions<SubscribedEventResource>
    {
        /// <summary>
        /// The subscription_sid
        /// </summary>
        public string PathSubscriptionSid { get; }
        /// <summary>
        /// The type
        /// </summary>
        public string Type { get; }
        /// <summary>
        /// The version
        /// </summary>
        public int? Version { get; set; }

        /// <summary>
        /// Construct a new CreateSubscribedEventOptions
        /// </summary>
        /// <param name="pathSubscriptionSid"> The subscription_sid </param>
        /// <param name="type"> The type </param>
        public CreateSubscribedEventOptions(string pathSubscriptionSid, string type)
        {
            PathSubscriptionSid = pathSubscriptionSid;
            Type = type;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Type != null)
            {
                p.Add(new KeyValuePair<string, string>("Type", Type));
            }

            if (Version != null)
            {
                p.Add(new KeyValuePair<string, string>("Version", Version.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// UpdateSubscribedEventOptions
    /// </summary>
    public class UpdateSubscribedEventOptions : IOptions<SubscribedEventResource>
    {
        /// <summary>
        /// The subscription_sid
        /// </summary>
        public string PathSubscriptionSid { get; }
        /// <summary>
        /// The type
        /// </summary>
        public string PathType { get; }
        /// <summary>
        /// The version
        /// </summary>
        public int? Version { get; }

        /// <summary>
        /// Construct a new UpdateSubscribedEventOptions
        /// </summary>
        /// <param name="pathSubscriptionSid"> The subscription_sid </param>
        /// <param name="pathType"> The type </param>
        /// <param name="version"> The version </param>
        public UpdateSubscribedEventOptions(string pathSubscriptionSid, string pathType, int? version)
        {
            PathSubscriptionSid = pathSubscriptionSid;
            PathType = pathType;
            Version = version;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Version != null)
            {
                p.Add(new KeyValuePair<string, string>("Version", Version.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// DeleteSubscribedEventOptions
    /// </summary>
    public class DeleteSubscribedEventOptions : IOptions<SubscribedEventResource>
    {
        /// <summary>
        /// The subscription_sid
        /// </summary>
        public string PathSubscriptionSid { get; }
        /// <summary>
        /// The type
        /// </summary>
        public string PathType { get; }

        /// <summary>
        /// Construct a new DeleteSubscribedEventOptions
        /// </summary>
        /// <param name="pathSubscriptionSid"> The subscription_sid </param>
        /// <param name="pathType"> The type </param>
        public DeleteSubscribedEventOptions(string pathSubscriptionSid, string pathType)
        {
            PathSubscriptionSid = pathSubscriptionSid;
            PathType = pathType;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}