/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Bulkexports.V1.Export
{

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// ReadExportCustomJobOptions
    /// </summary>
    public class ReadExportCustomJobOptions : ReadOptions<ExportCustomJobResource>
    {
        /// <summary>
        /// The type of communication – Messages, Calls
        /// </summary>
        public string PathResourceType { get; }

        /// <summary>
        /// Construct a new ReadExportCustomJobOptions
        /// </summary>
        /// <param name="pathResourceType"> The type of communication – Messages, Calls </param>
        public ReadExportCustomJobOptions(string pathResourceType)
        {
            PathResourceType = pathResourceType;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// CreateExportCustomJobOptions
    /// </summary>
    public class CreateExportCustomJobOptions : IOptions<ExportCustomJobResource>
    {
        /// <summary>
        /// The type of communication – Messages or Calls
        /// </summary>
        public string PathResourceType { get; }
        /// <summary>
        /// The start day for the custom export specified as a string in the format of yyyy-mm-dd
        /// </summary>
        public string StartDay { get; }
        /// <summary>
        /// The end day for the custom export specified as a string in the format of yyyy-mm-dd. End day is inclusive and must be 2 days earlier than the current UTC day.
        /// </summary>
        public string EndDay { get; }
        /// <summary>
        /// The friendly name specified when creating the job
        /// </summary>
        public string FriendlyName { get; }
        /// <summary>
        /// The optional webhook url called on completion of the job. If this is supplied, `WebhookMethod` must also be supplied.
        /// </summary>
        public string WebhookUrl { get; set; }
        /// <summary>
        /// This is the method used to call the webhook on completion of the job. If this is supplied, `WebhookUrl` must also be supplied.
        /// </summary>
        public string WebhookMethod { get; set; }
        /// <summary>
        /// The optional email to send the completion notification to
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Construct a new CreateExportCustomJobOptions
        /// </summary>
        /// <param name="pathResourceType"> The type of communication – Messages or Calls </param>
        /// <param name="startDay"> The start day for the custom export specified as a string in the format of yyyy-mm-dd
        ///                </param>
        /// <param name="endDay"> The end day for the custom export specified as a string in the format of yyyy-mm-dd. End day
        ///              is inclusive and must be 2 days earlier than the current UTC day. </param>
        /// <param name="friendlyName"> The friendly name specified when creating the job </param>
        public CreateExportCustomJobOptions(string pathResourceType, string startDay, string endDay, string friendlyName)
        {
            PathResourceType = pathResourceType;
            StartDay = startDay;
            EndDay = endDay;
            FriendlyName = friendlyName;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (StartDay != null)
            {
                p.Add(new KeyValuePair<string, string>("StartDay", StartDay));
            }

            if (EndDay != null)
            {
                p.Add(new KeyValuePair<string, string>("EndDay", EndDay));
            }

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (WebhookUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("WebhookUrl", WebhookUrl));
            }

            if (WebhookMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("WebhookMethod", WebhookMethod));
            }

            if (Email != null)
            {
                p.Add(new KeyValuePair<string, string>("Email", Email));
            }

            return p;
        }
    }

}