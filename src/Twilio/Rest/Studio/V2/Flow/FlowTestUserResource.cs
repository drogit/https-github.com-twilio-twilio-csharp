/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
///
/// FlowTestUserResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Studio.V2.Flow
{

    public class FlowTestUserResource : Resource
    {
        private static Request BuildFetchRequest(FetchFlowTestUserOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Studio,
                "/v2/Flows/" + options.PathSid + "/TestUsers",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch FlowTestUser parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlowTestUser </returns>
        public static FlowTestUserResource Fetch(FetchFlowTestUserOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch FlowTestUser parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlowTestUser </returns>
        public static async System.Threading.Tasks.Task<FlowTestUserResource> FetchAsync(FetchFlowTestUserOptions options,
                                                                                         ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlowTestUser </returns>
        public static FlowTestUserResource Fetch(string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchFlowTestUserOptions(pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlowTestUser </returns>
        public static async System.Threading.Tasks.Task<FlowTestUserResource> FetchAsync(string pathSid,
                                                                                         ITwilioRestClient client = null)
        {
            var options = new FetchFlowTestUserOptions(pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildUpdateRequest(UpdateFlowTestUserOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Studio,
                "/v2/Flows/" + options.PathSid + "/TestUsers",
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update FlowTestUser parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlowTestUser </returns>
        public static FlowTestUserResource Update(UpdateFlowTestUserOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update FlowTestUser parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlowTestUser </returns>
        public static async System.Threading.Tasks.Task<FlowTestUserResource> UpdateAsync(UpdateFlowTestUserOptions options,
                                                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        /// <param name="testUsers"> The test_users </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of FlowTestUser </returns>
        public static FlowTestUserResource Update(string pathSid, List<string> testUsers, ITwilioRestClient client = null)
        {
            var options = new UpdateFlowTestUserOptions(pathSid, testUsers);
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        /// <param name="testUsers"> The test_users </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of FlowTestUser </returns>
        public static async System.Threading.Tasks.Task<FlowTestUserResource> UpdateAsync(string pathSid,
                                                                                          List<string> testUsers,
                                                                                          ITwilioRestClient client = null)
        {
            var options = new UpdateFlowTestUserOptions(pathSid, testUsers);
            return await UpdateAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a FlowTestUserResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> FlowTestUserResource object represented by the provided JSON </returns>
        public static FlowTestUserResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<FlowTestUserResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The sid
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The test_users
        /// </summary>
        [JsonProperty("test_users")]
        public List<string> TestUsers { get; private set; }
        /// <summary>
        /// The url
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private FlowTestUserResource()
        {

        }
    }

}