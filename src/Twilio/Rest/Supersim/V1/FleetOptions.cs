/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Supersim.V1
{

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// Create a Fleet
    /// </summary>
    public class CreateFleetOptions : IOptions<FleetResource>
    {
        /// <summary>
        /// The SID or unique name of the Network Access Profile of the Fleet
        /// </summary>
        public string NetworkAccessProfile { get; }
        /// <summary>
        /// An application-defined string that uniquely identifies the resource
        /// </summary>
        public string UniqueName { get; set; }
        /// <summary>
        /// Defines whether SIMs in the Fleet are capable of using data connectivity
        /// </summary>
        public bool? DataEnabled { get; set; }
        /// <summary>
        /// The total data usage (download and upload combined) in Megabytes that each Super SIM resource assigned to the Fleet can consume
        /// </summary>
        public int? DataLimit { get; set; }
        /// <summary>
        /// The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device
        /// </summary>
        public Uri IpCommandsUrl { get; set; }
        /// <summary>
        /// A string representing the HTTP method to use when making a request to `ip_commands_url`
        /// </summary>
        public Twilio.Http.HttpMethod IpCommandsMethod { get; set; }
        /// <summary>
        /// Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands
        /// </summary>
        public bool? SmsCommandsEnabled { get; set; }
        /// <summary>
        /// The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number
        /// </summary>
        public Uri SmsCommandsUrl { get; set; }
        /// <summary>
        /// A string representing the HTTP method to use when making a request to `sms_commands_url`
        /// </summary>
        public Twilio.Http.HttpMethod SmsCommandsMethod { get; set; }

        /// <summary>
        /// Construct a new CreateFleetOptions
        /// </summary>
        /// <param name="networkAccessProfile"> The SID or unique name of the Network Access Profile of the Fleet </param>
        public CreateFleetOptions(string networkAccessProfile)
        {
            NetworkAccessProfile = networkAccessProfile;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (NetworkAccessProfile != null)
            {
                p.Add(new KeyValuePair<string, string>("NetworkAccessProfile", NetworkAccessProfile.ToString()));
            }

            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }

            if (DataEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("DataEnabled", DataEnabled.Value.ToString().ToLower()));
            }

            if (DataLimit != null)
            {
                p.Add(new KeyValuePair<string, string>("DataLimit", DataLimit.ToString()));
            }

            if (IpCommandsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("IpCommandsUrl", Serializers.Url(IpCommandsUrl)));
            }

            if (IpCommandsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("IpCommandsMethod", IpCommandsMethod.ToString()));
            }

            if (SmsCommandsEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCommandsEnabled", SmsCommandsEnabled.Value.ToString().ToLower()));
            }

            if (SmsCommandsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCommandsUrl", Serializers.Url(SmsCommandsUrl)));
            }

            if (SmsCommandsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCommandsMethod", SmsCommandsMethod.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// Fetch a Fleet instance from your account.
    /// </summary>
    public class FetchFleetOptions : IOptions<FleetResource>
    {
        /// <summary>
        /// The SID that identifies the resource to fetch
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchFleetOptions
        /// </summary>
        /// <param name="pathSid"> The SID that identifies the resource to fetch </param>
        public FetchFleetOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// Retrieve a list of Fleets from your account.
    /// </summary>
    public class ReadFleetOptions : ReadOptions<FleetResource>
    {
        /// <summary>
        /// The SID or unique name of the Network Access Profile of the Fleet
        /// </summary>
        public string NetworkAccessProfile { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (NetworkAccessProfile != null)
            {
                p.Add(new KeyValuePair<string, string>("NetworkAccessProfile", NetworkAccessProfile.ToString()));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// Updates the given properties of a Super SIM Fleet instance from your account.
    /// </summary>
    public class UpdateFleetOptions : IOptions<FleetResource>
    {
        /// <summary>
        /// The SID that identifies the resource to update
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// An application-defined string that uniquely identifies the resource
        /// </summary>
        public string UniqueName { get; set; }
        /// <summary>
        /// The SID or unique name of the Network Access Profile of the Fleet
        /// </summary>
        public string NetworkAccessProfile { get; set; }
        /// <summary>
        /// The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device
        /// </summary>
        public Uri IpCommandsUrl { get; set; }
        /// <summary>
        /// A string representing the HTTP method to use when making a request to `ip_commands_url`
        /// </summary>
        public Twilio.Http.HttpMethod IpCommandsMethod { get; set; }
        /// <summary>
        /// The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number
        /// </summary>
        public Uri SmsCommandsUrl { get; set; }
        /// <summary>
        /// A string representing the HTTP method to use when making a request to `sms_commands_url`
        /// </summary>
        public Twilio.Http.HttpMethod SmsCommandsMethod { get; set; }
        /// <summary>
        /// The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume
        /// </summary>
        public int? DataLimit { get; set; }

        /// <summary>
        /// Construct a new UpdateFleetOptions
        /// </summary>
        /// <param name="pathSid"> The SID that identifies the resource to update </param>
        public UpdateFleetOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }

            if (NetworkAccessProfile != null)
            {
                p.Add(new KeyValuePair<string, string>("NetworkAccessProfile", NetworkAccessProfile.ToString()));
            }

            if (IpCommandsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("IpCommandsUrl", Serializers.Url(IpCommandsUrl)));
            }

            if (IpCommandsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("IpCommandsMethod", IpCommandsMethod.ToString()));
            }

            if (SmsCommandsUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCommandsUrl", Serializers.Url(SmsCommandsUrl)));
            }

            if (SmsCommandsMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("SmsCommandsMethod", SmsCommandsMethod.ToString()));
            }

            if (DataLimit != null)
            {
                p.Add(new KeyValuePair<string, string>("DataLimit", DataLimit.ToString()));
            }

            return p;
        }
    }

}