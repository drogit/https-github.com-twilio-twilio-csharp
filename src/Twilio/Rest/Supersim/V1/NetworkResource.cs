/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
/// currently do not have developer preview access, please contact help@twilio.com.
///
/// NetworkResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Supersim.V1
{

    public class NetworkResource : Resource
    {
        private static Request BuildFetchRequest(FetchNetworkOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Supersim,
                "/v1/Networks/" + options.PathSid + "",
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Fetch a Network resource.
        /// </summary>
        /// <param name="options"> Fetch Network parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Network </returns>
        public static NetworkResource Fetch(FetchNetworkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Fetch a Network resource.
        /// </summary>
        /// <param name="options"> Fetch Network parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Network </returns>
        public static async System.Threading.Tasks.Task<NetworkResource> FetchAsync(FetchNetworkOptions options,
                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Fetch a Network resource.
        /// </summary>
        /// <param name="pathSid"> The SID of the Network resource to fetch </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Network </returns>
        public static NetworkResource Fetch(string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchNetworkOptions(pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Fetch a Network resource.
        /// </summary>
        /// <param name="pathSid"> The SID of the Network resource to fetch </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Network </returns>
        public static async System.Threading.Tasks.Task<NetworkResource> FetchAsync(string pathSid,
                                                                                    ITwilioRestClient client = null)
        {
            var options = new FetchNetworkOptions(pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildReadRequest(ReadNetworkOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Supersim,
                "/v1/Networks",
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Retrieve a list of Network resources.
        /// </summary>
        /// <param name="options"> Read Network parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Network </returns>
        public static ResourceSet<NetworkResource> Read(ReadNetworkOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<NetworkResource>.FromJson("networks", response.Content);
            return new ResourceSet<NetworkResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a list of Network resources.
        /// </summary>
        /// <param name="options"> Read Network parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Network </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<NetworkResource>> ReadAsync(ReadNetworkOptions options,
                                                                                                ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<NetworkResource>.FromJson("networks", response.Content);
            return new ResourceSet<NetworkResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// Retrieve a list of Network resources.
        /// </summary>
        /// <param name="isoCountry"> The ISO country code of the Network resources to read </param>
        /// <param name="mcc"> The MCC of Network resource identifiers to be read </param>
        /// <param name="mnc"> The MNC of Network resource identifiers to be read </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Network </returns>
        public static ResourceSet<NetworkResource> Read(string isoCountry = null,
                                                        string mcc = null,
                                                        string mnc = null,
                                                        int? pageSize = null,
                                                        long? limit = null,
                                                        ITwilioRestClient client = null)
        {
            var options = new ReadNetworkOptions(){IsoCountry = isoCountry, Mcc = mcc, Mnc = mnc, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a list of Network resources.
        /// </summary>
        /// <param name="isoCountry"> The ISO country code of the Network resources to read </param>
        /// <param name="mcc"> The MCC of Network resource identifiers to be read </param>
        /// <param name="mnc"> The MNC of Network resource identifiers to be read </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Network </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<NetworkResource>> ReadAsync(string isoCountry = null,
                                                                                                string mcc = null,
                                                                                                string mnc = null,
                                                                                                int? pageSize = null,
                                                                                                long? limit = null,
                                                                                                ITwilioRestClient client = null)
        {
            var options = new ReadNetworkOptions(){IsoCountry = isoCountry, Mcc = mcc, Mnc = mnc, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<NetworkResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<NetworkResource>.FromJson("networks", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<NetworkResource> NextPage(Page<NetworkResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Supersim)
            );

            var response = client.Request(request);
            return Page<NetworkResource>.FromJson("networks", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<NetworkResource> PreviousPage(Page<NetworkResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Supersim)
            );

            var response = client.Request(request);
            return Page<NetworkResource>.FromJson("networks", response.Content);
        }

        /// <summary>
        /// Converts a JSON string into a NetworkResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> NetworkResource object represented by the provided JSON </returns>
        public static NetworkResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<NetworkResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The unique string that identifies the resource
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// A human readable identifier of this resource
        /// </summary>
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }
        /// <summary>
        /// The absolute URL of the Network resource
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }
        /// <summary>
        /// The ISO country code of the Network resource
        /// </summary>
        [JsonProperty("iso_country")]
        public string IsoCountry { get; private set; }
        /// <summary>
        /// The MCC/MNCs included in the Network resource
        /// </summary>
        [JsonProperty("identifiers")]
        public List<object> Identifiers { get; private set; }

        private NetworkResource()
        {

        }
    }

}