/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Supersim.V1
{

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// List UsageRecords
    /// </summary>
    public class ReadUsageRecordOptions : ReadOptions<UsageRecordResource>
    {
        /// <summary>
        /// SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM.
        /// </summary>
        public string Sim { get; set; }
        /// <summary>
        /// SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred.
        /// </summary>
        public string Fleet { get; set; }
        /// <summary>
        /// SID of a Network resource. Only show UsageRecords representing usage on this network.
        /// </summary>
        public string Network { get; set; }
        /// <summary>
        /// Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country.
        /// </summary>
        public string IsoCountry { get; set; }
        /// <summary>
        /// Dimension over which to aggregate usage records.
        /// </summary>
        public UsageRecordResource.GroupEnum Group { get; set; }
        /// <summary>
        /// Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or `all`. Default is `all`.
        /// </summary>
        public UsageRecordResource.GranularityEnum Granularity { get; set; }
        /// <summary>
        /// Only include usage that occurred at or after this time.
        /// </summary>
        public DateTime? StartTime { get; set; }
        /// <summary>
        /// Only include usage that occurred before this time.
        /// </summary>
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Sim != null)
            {
                p.Add(new KeyValuePair<string, string>("Sim", Sim.ToString()));
            }

            if (Fleet != null)
            {
                p.Add(new KeyValuePair<string, string>("Fleet", Fleet.ToString()));
            }

            if (Network != null)
            {
                p.Add(new KeyValuePair<string, string>("Network", Network.ToString()));
            }

            if (IsoCountry != null)
            {
                p.Add(new KeyValuePair<string, string>("IsoCountry", IsoCountry.ToString()));
            }

            if (Group != null)
            {
                p.Add(new KeyValuePair<string, string>("Group", Group.ToString()));
            }

            if (Granularity != null)
            {
                p.Add(new KeyValuePair<string, string>("Granularity", Granularity.ToString()));
            }

            if (StartTime != null)
            {
                p.Add(new KeyValuePair<string, string>("StartTime", Serializers.DateTimeIso8601(StartTime)));
            }

            if (EndTime != null)
            {
                p.Add(new KeyValuePair<string, string>("EndTime", Serializers.DateTimeIso8601(EndTime)));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

}