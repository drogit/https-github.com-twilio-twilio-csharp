/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
/// currently do not have developer preview access, please contact help@twilio.com.
///
/// UsageRecordResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Supersim.V1
{

    public class UsageRecordResource : Resource
    {
        public sealed class GranularityEnum : StringEnum
        {
            private GranularityEnum(string value) : base(value) {}
            public GranularityEnum() {}
            public static implicit operator GranularityEnum(string value)
            {
                return new GranularityEnum(value);
            }

            public static readonly GranularityEnum Hour = new GranularityEnum("hour");
            public static readonly GranularityEnum Day = new GranularityEnum("day");
            public static readonly GranularityEnum All = new GranularityEnum("all");
        }

        public sealed class GroupEnum : StringEnum
        {
            private GroupEnum(string value) : base(value) {}
            public GroupEnum() {}
            public static implicit operator GroupEnum(string value)
            {
                return new GroupEnum(value);
            }

            public static readonly GroupEnum Sim = new GroupEnum("sim");
        }

        public sealed class SortByEnum : StringEnum
        {
            private SortByEnum(string value) : base(value) {}
            public SortByEnum() {}
            public static implicit operator SortByEnum(string value)
            {
                return new SortByEnum(value);
            }

            public static readonly SortByEnum Time = new SortByEnum("time");
        }

        public sealed class SortOrderEnum : StringEnum
        {
            private SortOrderEnum(string value) : base(value) {}
            public SortOrderEnum() {}
            public static implicit operator SortOrderEnum(string value)
            {
                return new SortOrderEnum(value);
            }

            public static readonly SortOrderEnum Desc = new SortOrderEnum("desc");
            public static readonly SortOrderEnum Asc = new SortOrderEnum("asc");
        }

        private static Request BuildReadRequest(ReadUsageRecordOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Supersim,
                "/v1/UsageRecords",
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// List UsageRecords
        /// </summary>
        /// <param name="options"> Read UsageRecord parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of UsageRecord </returns>
        public static ResourceSet<UsageRecordResource> Read(ReadUsageRecordOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<UsageRecordResource>.FromJson("usage_records", response.Content);
            return new ResourceSet<UsageRecordResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// List UsageRecords
        /// </summary>
        /// <param name="options"> Read UsageRecord parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of UsageRecord </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<UsageRecordResource>> ReadAsync(ReadUsageRecordOptions options,
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<UsageRecordResource>.FromJson("usage_records", response.Content);
            return new ResourceSet<UsageRecordResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// List UsageRecords
        /// </summary>
        /// <param name="sim"> SID of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM.
        ///           </param>
        /// <param name="granularity"> Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or
        ///                   `all`. Default is `all`. </param>
        /// <param name="startTime"> Only include usage that occurred at or after this time. </param>
        /// <param name="endTime"> Only include usage that occurred before this time. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of UsageRecord </returns>
        public static ResourceSet<UsageRecordResource> Read(string sim = null,
                                                            UsageRecordResource.GranularityEnum granularity = null,
                                                            DateTime? startTime = null,
                                                            DateTime? endTime = null,
                                                            int? pageSize = null,
                                                            long? limit = null,
                                                            ITwilioRestClient client = null)
        {
            var options = new ReadUsageRecordOptions(){Sim = sim, Granularity = granularity, StartTime = startTime, EndTime = endTime, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// List UsageRecords
        /// </summary>
        /// <param name="sim"> SID of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM.
        ///           </param>
        /// <param name="granularity"> Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or
        ///                   `all`. Default is `all`. </param>
        /// <param name="startTime"> Only include usage that occurred at or after this time. </param>
        /// <param name="endTime"> Only include usage that occurred before this time. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of UsageRecord </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<UsageRecordResource>> ReadAsync(string sim = null,
                                                                                                    UsageRecordResource.GranularityEnum granularity = null,
                                                                                                    DateTime? startTime = null,
                                                                                                    DateTime? endTime = null,
                                                                                                    int? pageSize = null,
                                                                                                    long? limit = null,
                                                                                                    ITwilioRestClient client = null)
        {
            var options = new ReadUsageRecordOptions(){Sim = sim, Granularity = granularity, StartTime = startTime, EndTime = endTime, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<UsageRecordResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<UsageRecordResource>.FromJson("usage_records", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<UsageRecordResource> NextPage(Page<UsageRecordResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Supersim)
            );

            var response = client.Request(request);
            return Page<UsageRecordResource>.FromJson("usage_records", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<UsageRecordResource> PreviousPage(Page<UsageRecordResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Supersim)
            );

            var response = client.Request(request);
            return Page<UsageRecordResource>.FromJson("usage_records", response.Content);
        }

        /// <summary>
        /// Converts a JSON string into a UsageRecordResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> UsageRecordResource object represented by the provided JSON </returns>
        public static UsageRecordResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<UsageRecordResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The SID of the Account that incurred the usage.
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// SID of a Sim resource to which the UsageRecord belongs.
        /// </summary>
        [JsonProperty("sim_sid")]
        public string SimSid { get; private set; }
        /// <summary>
        /// The time period for which the usage is reported.
        /// </summary>
        [JsonProperty("period")]
        public object Period { get; private set; }
        /// <summary>
        /// Total data uploaded in bytes, aggregated by the query parameters.
        /// </summary>
        [JsonProperty("data_upload")]
        public long? DataUpload { get; private set; }
        /// <summary>
        /// Total data downloaded in bytes, aggregated by the query parameters.
        /// </summary>
        [JsonProperty("data_download")]
        public long? DataDownload { get; private set; }
        /// <summary>
        /// Total of data_upload and data_download.
        /// </summary>
        [JsonProperty("data_total")]
        public long? DataTotal { get; private set; }

        private UsageRecordResource()
        {

        }
    }

}