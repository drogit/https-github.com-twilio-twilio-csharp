/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
///
/// EsimProfileResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Supersim.V1
{

    public class EsimProfileResource : Resource
    {
        public sealed class StatusEnum : StringEnum
        {
            private StatusEnum(string value) : base(value) {}
            public StatusEnum() {}
            public static implicit operator StatusEnum(string value)
            {
                return new StatusEnum(value);
            }

            public static readonly StatusEnum New = new StatusEnum("new");
            public static readonly StatusEnum Reserving = new StatusEnum("reserving");
            public static readonly StatusEnum Available = new StatusEnum("available");
            public static readonly StatusEnum Downloaded = new StatusEnum("downloaded");
            public static readonly StatusEnum Installed = new StatusEnum("installed");
            public static readonly StatusEnum Failed = new StatusEnum("failed");
        }

        private static Request BuildCreateRequest(CreateEsimProfileOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Supersim,
                "/v1/ESimProfiles",
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Order an eSIM Profile.
        /// </summary>
        /// <param name="options"> Create EsimProfile parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of EsimProfile </returns>
        public static EsimProfileResource Create(CreateEsimProfileOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Order an eSIM Profile.
        /// </summary>
        /// <param name="options"> Create EsimProfile parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of EsimProfile </returns>
        public static async System.Threading.Tasks.Task<EsimProfileResource> CreateAsync(CreateEsimProfileOptions options,
                                                                                         ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Order an eSIM Profile.
        /// </summary>
        /// <param name="eid"> Identifier of the eUICC that will claim the eSIM Profile </param>
        /// <param name="callbackUrl"> The URL we should call after we have sent when the status of the eSIM Profile changes
        ///                   </param>
        /// <param name="callbackMethod"> The HTTP method we should use to call callback_url </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of EsimProfile </returns>
        public static EsimProfileResource Create(string eid,
                                                 string callbackUrl = null,
                                                 Twilio.Http.HttpMethod callbackMethod = null,
                                                 ITwilioRestClient client = null)
        {
            var options = new CreateEsimProfileOptions(eid){CallbackUrl = callbackUrl, CallbackMethod = callbackMethod};
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// Order an eSIM Profile.
        /// </summary>
        /// <param name="eid"> Identifier of the eUICC that will claim the eSIM Profile </param>
        /// <param name="callbackUrl"> The URL we should call after we have sent when the status of the eSIM Profile changes
        ///                   </param>
        /// <param name="callbackMethod"> The HTTP method we should use to call callback_url </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of EsimProfile </returns>
        public static async System.Threading.Tasks.Task<EsimProfileResource> CreateAsync(string eid,
                                                                                         string callbackUrl = null,
                                                                                         Twilio.Http.HttpMethod callbackMethod = null,
                                                                                         ITwilioRestClient client = null)
        {
            var options = new CreateEsimProfileOptions(eid){CallbackUrl = callbackUrl, CallbackMethod = callbackMethod};
            return await CreateAsync(options, client);
        }
        #endif

        private static Request BuildFetchRequest(FetchEsimProfileOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Supersim,
                "/v1/ESimProfiles/" + options.PathSid + "",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Fetch an eSIM Profile.
        /// </summary>
        /// <param name="options"> Fetch EsimProfile parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of EsimProfile </returns>
        public static EsimProfileResource Fetch(FetchEsimProfileOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Fetch an eSIM Profile.
        /// </summary>
        /// <param name="options"> Fetch EsimProfile parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of EsimProfile </returns>
        public static async System.Threading.Tasks.Task<EsimProfileResource> FetchAsync(FetchEsimProfileOptions options,
                                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Fetch an eSIM Profile.
        /// </summary>
        /// <param name="pathSid"> The SID of the eSIM Profile resource to fetch </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of EsimProfile </returns>
        public static EsimProfileResource Fetch(string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchEsimProfileOptions(pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Fetch an eSIM Profile.
        /// </summary>
        /// <param name="pathSid"> The SID of the eSIM Profile resource to fetch </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of EsimProfile </returns>
        public static async System.Threading.Tasks.Task<EsimProfileResource> FetchAsync(string pathSid,
                                                                                        ITwilioRestClient client = null)
        {
            var options = new FetchEsimProfileOptions(pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildReadRequest(ReadEsimProfileOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Supersim,
                "/v1/ESimProfiles",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Retrieve a list of eSIM Profiles.
        /// </summary>
        /// <param name="options"> Read EsimProfile parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of EsimProfile </returns>
        public static ResourceSet<EsimProfileResource> Read(ReadEsimProfileOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<EsimProfileResource>.FromJson("esim_profiles", response.Content);
            return new ResourceSet<EsimProfileResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a list of eSIM Profiles.
        /// </summary>
        /// <param name="options"> Read EsimProfile parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of EsimProfile </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<EsimProfileResource>> ReadAsync(ReadEsimProfileOptions options,
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<EsimProfileResource>.FromJson("esim_profiles", response.Content);
            return new ResourceSet<EsimProfileResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// Retrieve a list of eSIM Profiles.
        /// </summary>
        /// <param name="eid"> List the eSIM Profiles that have been associated with an EId </param>
        /// <param name="simSid"> Find the eSIM Profile resource related to a Sim resource by providing the SIM SID </param>
        /// <param name="status"> List the eSIM Profiles that are in a given status </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of EsimProfile </returns>
        public static ResourceSet<EsimProfileResource> Read(string eid = null,
                                                            string simSid = null,
                                                            EsimProfileResource.StatusEnum status = null,
                                                            int? pageSize = null,
                                                            long? limit = null,
                                                            ITwilioRestClient client = null)
        {
            var options = new ReadEsimProfileOptions(){Eid = eid, SimSid = simSid, Status = status, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a list of eSIM Profiles.
        /// </summary>
        /// <param name="eid"> List the eSIM Profiles that have been associated with an EId </param>
        /// <param name="simSid"> Find the eSIM Profile resource related to a Sim resource by providing the SIM SID </param>
        /// <param name="status"> List the eSIM Profiles that are in a given status </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of EsimProfile </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<EsimProfileResource>> ReadAsync(string eid = null,
                                                                                                    string simSid = null,
                                                                                                    EsimProfileResource.StatusEnum status = null,
                                                                                                    int? pageSize = null,
                                                                                                    long? limit = null,
                                                                                                    ITwilioRestClient client = null)
        {
            var options = new ReadEsimProfileOptions(){Eid = eid, SimSid = simSid, Status = status, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<EsimProfileResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<EsimProfileResource>.FromJson("esim_profiles", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<EsimProfileResource> NextPage(Page<EsimProfileResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Supersim)
            );

            var response = client.Request(request);
            return Page<EsimProfileResource>.FromJson("esim_profiles", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<EsimProfileResource> PreviousPage(Page<EsimProfileResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Supersim)
            );

            var response = client.Request(request);
            return Page<EsimProfileResource>.FromJson("esim_profiles", response.Content);
        }

        /// <summary>
        /// Converts a JSON string into a EsimProfileResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> EsimProfileResource object represented by the provided JSON </returns>
        public static EsimProfileResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<EsimProfileResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The unique string that identifies the resource
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The SID of the Account to which the eSIM Profile resource belongs
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The ICCID associated with the Sim resource
        /// </summary>
        [JsonProperty("iccid")]
        public string Iccid { get; private set; }
        /// <summary>
        /// The SID of the Sim resource that this eSIM Profile controls
        /// </summary>
        [JsonProperty("sim_sid")]
        public string SimSid { get; private set; }
        /// <summary>
        /// The status of the eSIM Profile
        /// </summary>
        [JsonProperty("status")]
        [JsonConverter(typeof(StringEnumConverter))]
        public EsimProfileResource.StatusEnum Status { get; private set; }
        /// <summary>
        /// Identifier of the eUICC that can claim the eSIM Profile
        /// </summary>
        [JsonProperty("eid")]
        public string Eid { get; private set; }
        /// <summary>
        /// Address of the SM-DP+ server from which the Profile will be downloaded
        /// </summary>
        [JsonProperty("smdp_plus_address")]
        public Uri SmdpPlusAddress { get; private set; }
        /// <summary>
        /// Code indicating the failure if the download of the SIM Profile failed and the eSIM Profile is in `failed` state
        /// </summary>
        [JsonProperty("error_code")]
        public string ErrorCode { get; private set; }
        /// <summary>
        /// Error message describing the failure if the download of the SIM Profile failed and the eSIM Profile is in `failed` state
        /// </summary>
        [JsonProperty("error_message")]
        public string ErrorMessage { get; private set; }
        /// <summary>
        /// The ISO 8601 date and time in GMT when the resource was created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The ISO 8601 date and time in GMT when the resource was last updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// The absolute URL of the eSIM Profile resource
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private EsimProfileResource()
        {

        }
    }

}