/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PlaybackGrantResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Media.V1.PlayerStreamer
{

  public class PlaybackGrantResource : Resource
  {
    private static Request BuildCreateRequest(CreatePlaybackGrantOptions options, ITwilioRestClient client)
    {
      return new Request(
          HttpMethod.Post,
          Rest.Domain.Media,
          "/v1/PlayerStreamers/" + options.PathSid + "/PlaybackGrant",
          postParams: options.GetParams(),
          headerParams: null
      );
    }

    /// <summary>
    /// create
    /// </summary>
    /// <param name="options"> Create PlaybackGrant parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of PlaybackGrant </returns>
    public static PlaybackGrantResource Create(CreatePlaybackGrantOptions options, ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = client.Request(BuildCreateRequest(options, client));
      return FromJson(response.Content);
    }

#if !NET35
    /// <summary>
    /// create
    /// </summary>
    /// <param name="options"> Create PlaybackGrant parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of PlaybackGrant </returns>
    public static async System.Threading.Tasks.Task<PlaybackGrantResource> CreateAsync(CreatePlaybackGrantOptions options,
                                                                                       ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = await client.RequestAsync(BuildCreateRequest(options, client));
      return FromJson(response.Content);
    }
#endif

    /// <summary>
    /// create
    /// </summary>
    /// <param name="pathSid"> The unique string that identifies the PlayerStreamer associated with this PlaybackGrant.
    ///               </param>
    /// <param name="ttl"> The time to live of the PlaybackGrant </param>
    /// <param name="accessControlAllowOrigin"> The full URL that is authorized to play back the livestream </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of PlaybackGrant </returns>
    public static PlaybackGrantResource Create(string pathSid,
                                               int? ttl = null,
                                               string accessControlAllowOrigin = null,
                                               ITwilioRestClient client = null)
    {
      var options = new CreatePlaybackGrantOptions(pathSid) { Ttl = ttl, AccessControlAllowOrigin = accessControlAllowOrigin };
      return Create(options, client);
    }

#if !NET35
    /// <summary>
    /// create
    /// </summary>
    /// <param name="pathSid"> The unique string that identifies the PlayerStreamer associated with this PlaybackGrant.
    ///               </param>
    /// <param name="ttl"> The time to live of the PlaybackGrant </param>
    /// <param name="accessControlAllowOrigin"> The full URL that is authorized to play back the livestream </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of PlaybackGrant </returns>
    public static async System.Threading.Tasks.Task<PlaybackGrantResource> CreateAsync(string pathSid,
                                                                                       int? ttl = null,
                                                                                       string accessControlAllowOrigin = null,
                                                                                       ITwilioRestClient client = null)
    {
      var options = new CreatePlaybackGrantOptions(pathSid) { Ttl = ttl, AccessControlAllowOrigin = accessControlAllowOrigin };
      return await CreateAsync(options, client);
    }
#endif

    private static Request BuildFetchRequest(FetchPlaybackGrantOptions options, ITwilioRestClient client)
    {
      return new Request(
          HttpMethod.Get,
          Rest.Domain.Media,
          "/v1/PlayerStreamers/" + options.PathSid + "/PlaybackGrant",
          queryParams: options.GetParams(),
          headerParams: null
      );
    }

    /// <summary>
    /// **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
    /// </summary>
    /// <param name="options"> Fetch PlaybackGrant parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of PlaybackGrant </returns>
    public static PlaybackGrantResource Fetch(FetchPlaybackGrantOptions options, ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = client.Request(BuildFetchRequest(options, client));
      return FromJson(response.Content);
    }

#if !NET35
    /// <summary>
    /// **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
    /// </summary>
    /// <param name="options"> Fetch PlaybackGrant parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of PlaybackGrant </returns>
    public static async System.Threading.Tasks.Task<PlaybackGrantResource> FetchAsync(FetchPlaybackGrantOptions options,
                                                                                      ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = await client.RequestAsync(BuildFetchRequest(options, client));
      return FromJson(response.Content);
    }
#endif

    /// <summary>
    /// **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
    /// </summary>
    /// <param name="pathSid"> The SID that identifies the resource to fetch </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of PlaybackGrant </returns>
    public static PlaybackGrantResource Fetch(string pathSid, ITwilioRestClient client = null)
    {
      var options = new FetchPlaybackGrantOptions(pathSid);
      return Fetch(options, client);
    }

#if !NET35
    /// <summary>
    /// **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
    /// </summary>
    /// <param name="pathSid"> The SID that identifies the resource to fetch </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of PlaybackGrant </returns>
    public static async System.Threading.Tasks.Task<PlaybackGrantResource> FetchAsync(string pathSid,
                                                                                      ITwilioRestClient client = null)
    {
      var options = new FetchPlaybackGrantOptions(pathSid);
      return await FetchAsync(options, client);
    }
#endif

    /// <summary>
    /// Converts a JSON string into a PlaybackGrantResource object
    /// </summary>
    /// <param name="json"> Raw JSON string </param>
    /// <returns> PlaybackGrantResource object represented by the provided JSON </returns>
    public static PlaybackGrantResource FromJson(string json)
    {
      // Convert all checked exceptions to Runtime
      try
      {
        return JsonConvert.DeserializeObject<PlaybackGrantResource>(json);
      }
      catch (JsonException e)
      {
        throw new ApiException(e.Message, e);
      }
    }

    /// <summary>
    /// The unique string that identifies the PlayerStreamer associated with this PlaybackGrant.
    /// </summary>
    [JsonProperty("sid")]
    public string Sid { get; private set; }
    /// <summary>
    /// The absolute URL of the resource
    /// </summary>
    [JsonProperty("url")]
    public Uri Url { get; private set; }
    /// <summary>
    /// The SID of the Account that created the resource
    /// </summary>
    [JsonProperty("account_sid")]
    public string AccountSid { get; private set; }
    /// <summary>
    /// The ISO 8601 date and time in GMT when the resource was created
    /// </summary>
    [JsonProperty("date_created")]
    public DateTime? DateCreated { get; private set; }
    /// <summary>
    /// The grant that authorizes the player sdk to connect to the livestream
    /// </summary>
    [JsonProperty("grant")]
    public object Grant { get; private set; }

    private PlaybackGrantResource()
    {

    }
  }

}