/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// MediaProcessorResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Media.V1
{

  public class MediaProcessorResource : Resource
  {
    public sealed class StatusEnum : StringEnum
    {
      private StatusEnum(string value) : base(value) { }
      public StatusEnum() { }
      public static implicit operator StatusEnum(string value)
      {
        return new StatusEnum(value);
      }

      public static readonly StatusEnum Failed = new StatusEnum("failed");
      public static readonly StatusEnum Started = new StatusEnum("started");
      public static readonly StatusEnum Ended = new StatusEnum("ended");
    }

    public sealed class UpdateStatusEnum : StringEnum
    {
      private UpdateStatusEnum(string value) : base(value) { }
      public UpdateStatusEnum() { }
      public static implicit operator UpdateStatusEnum(string value)
      {
        return new UpdateStatusEnum(value);
      }

      public static readonly UpdateStatusEnum Ended = new UpdateStatusEnum("ended");
    }

    public sealed class OrderEnum : StringEnum
    {
      private OrderEnum(string value) : base(value) { }
      public OrderEnum() { }
      public static implicit operator OrderEnum(string value)
      {
        return new OrderEnum(value);
      }

      public static readonly OrderEnum Asc = new OrderEnum("asc");
      public static readonly OrderEnum Desc = new OrderEnum("desc");
    }

    private static Request BuildCreateRequest(CreateMediaProcessorOptions options, ITwilioRestClient client)
    {
      return new Request(
          HttpMethod.Post,
          Rest.Domain.Media,
          "/v1/MediaProcessors",
          postParams: options.GetParams(),
          headerParams: null
      );
    }

    /// <summary>
    /// create
    /// </summary>
    /// <param name="options"> Create MediaProcessor parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of MediaProcessor </returns>
    public static MediaProcessorResource Create(CreateMediaProcessorOptions options, ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = client.Request(BuildCreateRequest(options, client));
      return FromJson(response.Content);
    }

#if !NET35
    /// <summary>
    /// create
    /// </summary>
    /// <param name="options"> Create MediaProcessor parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of MediaProcessor </returns>
    public static async System.Threading.Tasks.Task<MediaProcessorResource> CreateAsync(CreateMediaProcessorOptions options,
                                                                                        ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = await client.RequestAsync(BuildCreateRequest(options, client));
      return FromJson(response.Content);
    }
#endif

    /// <summary>
    /// create
    /// </summary>
    /// <param name="extension"> The Media Extension name or URL </param>
    /// <param name="extensionContext"> The Media Extension context </param>
    /// <param name="extensionEnvironment"> The Media Extension environment </param>
    /// <param name="statusCallback"> The URL to send MediaProcessor event updates to your application </param>
    /// <param name="statusCallbackMethod"> The HTTP method Twilio should use to call the `status_callback` URL </param>
    /// <param name="maxDuration"> Maximum MediaProcessor duration in minutes </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of MediaProcessor </returns>
    public static MediaProcessorResource Create(string extension,
                                                string extensionContext,
                                                object extensionEnvironment = null,
                                                Uri statusCallback = null,
                                                Twilio.Http.HttpMethod statusCallbackMethod = null,
                                                int? maxDuration = null,
                                                ITwilioRestClient client = null)
    {
      var options = new CreateMediaProcessorOptions(extension, extensionContext) { ExtensionEnvironment = extensionEnvironment, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, MaxDuration = maxDuration };
      return Create(options, client);
    }

#if !NET35
    /// <summary>
    /// create
    /// </summary>
    /// <param name="extension"> The Media Extension name or URL </param>
    /// <param name="extensionContext"> The Media Extension context </param>
    /// <param name="extensionEnvironment"> The Media Extension environment </param>
    /// <param name="statusCallback"> The URL to send MediaProcessor event updates to your application </param>
    /// <param name="statusCallbackMethod"> The HTTP method Twilio should use to call the `status_callback` URL </param>
    /// <param name="maxDuration"> Maximum MediaProcessor duration in minutes </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of MediaProcessor </returns>
    public static async System.Threading.Tasks.Task<MediaProcessorResource> CreateAsync(string extension,
                                                                                        string extensionContext,
                                                                                        object extensionEnvironment = null,
                                                                                        Uri statusCallback = null,
                                                                                        Twilio.Http.HttpMethod statusCallbackMethod = null,
                                                                                        int? maxDuration = null,
                                                                                        ITwilioRestClient client = null)
    {
      var options = new CreateMediaProcessorOptions(extension, extensionContext) { ExtensionEnvironment = extensionEnvironment, StatusCallback = statusCallback, StatusCallbackMethod = statusCallbackMethod, MaxDuration = maxDuration };
      return await CreateAsync(options, client);
    }
#endif

    private static Request BuildFetchRequest(FetchMediaProcessorOptions options, ITwilioRestClient client)
    {
      return new Request(
          HttpMethod.Get,
          Rest.Domain.Media,
          "/v1/MediaProcessors/" + options.PathSid + "",
          queryParams: options.GetParams(),
          headerParams: null
      );
    }

    /// <summary>
    /// Returns a single MediaProcessor resource identified by a SID.
    /// </summary>
    /// <param name="options"> Fetch MediaProcessor parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of MediaProcessor </returns>
    public static MediaProcessorResource Fetch(FetchMediaProcessorOptions options, ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = client.Request(BuildFetchRequest(options, client));
      return FromJson(response.Content);
    }

#if !NET35
    /// <summary>
    /// Returns a single MediaProcessor resource identified by a SID.
    /// </summary>
    /// <param name="options"> Fetch MediaProcessor parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of MediaProcessor </returns>
    public static async System.Threading.Tasks.Task<MediaProcessorResource> FetchAsync(FetchMediaProcessorOptions options,
                                                                                       ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = await client.RequestAsync(BuildFetchRequest(options, client));
      return FromJson(response.Content);
    }
#endif

    /// <summary>
    /// Returns a single MediaProcessor resource identified by a SID.
    /// </summary>
    /// <param name="pathSid"> The SID that identifies the resource to fetch </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of MediaProcessor </returns>
    public static MediaProcessorResource Fetch(string pathSid, ITwilioRestClient client = null)
    {
      var options = new FetchMediaProcessorOptions(pathSid);
      return Fetch(options, client);
    }

#if !NET35
    /// <summary>
    /// Returns a single MediaProcessor resource identified by a SID.
    /// </summary>
    /// <param name="pathSid"> The SID that identifies the resource to fetch </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of MediaProcessor </returns>
    public static async System.Threading.Tasks.Task<MediaProcessorResource> FetchAsync(string pathSid,
                                                                                       ITwilioRestClient client = null)
    {
      var options = new FetchMediaProcessorOptions(pathSid);
      return await FetchAsync(options, client);
    }
#endif

    private static Request BuildUpdateRequest(UpdateMediaProcessorOptions options, ITwilioRestClient client)
    {
      return new Request(
          HttpMethod.Post,
          Rest.Domain.Media,
          "/v1/MediaProcessors/" + options.PathSid + "",
          postParams: options.GetParams(),
          headerParams: null
      );
    }

    /// <summary>
    /// Updates a MediaProcessor resource identified by a SID.
    /// </summary>
    /// <param name="options"> Update MediaProcessor parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of MediaProcessor </returns>
    public static MediaProcessorResource Update(UpdateMediaProcessorOptions options, ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = client.Request(BuildUpdateRequest(options, client));
      return FromJson(response.Content);
    }

#if !NET35
    /// <summary>
    /// Updates a MediaProcessor resource identified by a SID.
    /// </summary>
    /// <param name="options"> Update MediaProcessor parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of MediaProcessor </returns>
    public static async System.Threading.Tasks.Task<MediaProcessorResource> UpdateAsync(UpdateMediaProcessorOptions options,
                                                                                        ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = await client.RequestAsync(BuildUpdateRequest(options, client));
      return FromJson(response.Content);
    }
#endif

    /// <summary>
    /// Updates a MediaProcessor resource identified by a SID.
    /// </summary>
    /// <param name="pathSid"> The SID that identifies the resource to update </param>
    /// <param name="status"> The status of the MediaProcessor </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of MediaProcessor </returns>
    public static MediaProcessorResource Update(string pathSid,
                                                MediaProcessorResource.UpdateStatusEnum status,
                                                ITwilioRestClient client = null)
    {
      var options = new UpdateMediaProcessorOptions(pathSid, status);
      return Update(options, client);
    }

#if !NET35
    /// <summary>
    /// Updates a MediaProcessor resource identified by a SID.
    /// </summary>
    /// <param name="pathSid"> The SID that identifies the resource to update </param>
    /// <param name="status"> The status of the MediaProcessor </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of MediaProcessor </returns>
    public static async System.Threading.Tasks.Task<MediaProcessorResource> UpdateAsync(string pathSid,
                                                                                        MediaProcessorResource.UpdateStatusEnum status,
                                                                                        ITwilioRestClient client = null)
    {
      var options = new UpdateMediaProcessorOptions(pathSid, status);
      return await UpdateAsync(options, client);
    }
#endif

    private static Request BuildReadRequest(ReadMediaProcessorOptions options, ITwilioRestClient client)
    {
      return new Request(
          HttpMethod.Get,
          Rest.Domain.Media,
          "/v1/MediaProcessors",
          queryParams: options.GetParams(),
          headerParams: null
      );
    }

    /// <summary>
    /// Returns a list of MediaProcessors.
    /// </summary>
    /// <param name="options"> Read MediaProcessor parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of MediaProcessor </returns>
    public static ResourceSet<MediaProcessorResource> Read(ReadMediaProcessorOptions options,
                                                           ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = client.Request(BuildReadRequest(options, client));

      var page = Page<MediaProcessorResource>.FromJson("media_processors", response.Content);
      return new ResourceSet<MediaProcessorResource>(page, options, client);
    }

#if !NET35
    /// <summary>
    /// Returns a list of MediaProcessors.
    /// </summary>
    /// <param name="options"> Read MediaProcessor parameters </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of MediaProcessor </returns>
    public static async System.Threading.Tasks.Task<ResourceSet<MediaProcessorResource>> ReadAsync(ReadMediaProcessorOptions options,
                                                                                                   ITwilioRestClient client = null)
    {
      client = client ?? TwilioClient.GetRestClient();
      var response = await client.RequestAsync(BuildReadRequest(options, client));

      var page = Page<MediaProcessorResource>.FromJson("media_processors", response.Content);
      return new ResourceSet<MediaProcessorResource>(page, options, client);
    }
#endif

    /// <summary>
    /// Returns a list of MediaProcessors.
    /// </summary>
    /// <param name="order"> The sort order of the list </param>
    /// <param name="status"> Status to filter by </param>
    /// <param name="pageSize"> Page size </param>
    /// <param name="limit"> Record limit </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> A single instance of MediaProcessor </returns>
    public static ResourceSet<MediaProcessorResource> Read(MediaProcessorResource.OrderEnum order = null,
                                                           MediaProcessorResource.StatusEnum status = null,
                                                           int? pageSize = null,
                                                           long? limit = null,
                                                           ITwilioRestClient client = null)
    {
      var options = new ReadMediaProcessorOptions() { Order = order, Status = status, PageSize = pageSize, Limit = limit };
      return Read(options, client);
    }

#if !NET35
    /// <summary>
    /// Returns a list of MediaProcessors.
    /// </summary>
    /// <param name="order"> The sort order of the list </param>
    /// <param name="status"> Status to filter by </param>
    /// <param name="pageSize"> Page size </param>
    /// <param name="limit"> Record limit </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> Task that resolves to A single instance of MediaProcessor </returns>
    public static async System.Threading.Tasks.Task<ResourceSet<MediaProcessorResource>> ReadAsync(MediaProcessorResource.OrderEnum order = null,
                                                                                                   MediaProcessorResource.StatusEnum status = null,
                                                                                                   int? pageSize = null,
                                                                                                   long? limit = null,
                                                                                                   ITwilioRestClient client = null)
    {
      var options = new ReadMediaProcessorOptions() { Order = order, Status = status, PageSize = pageSize, Limit = limit };
      return await ReadAsync(options, client);
    }
#endif

    /// <summary>
    /// Fetch the target page of records
    /// </summary>
    /// <param name="targetUrl"> API-generated URL for the requested results page </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> The target page of records </returns>
    public static Page<MediaProcessorResource> GetPage(string targetUrl, ITwilioRestClient client)
    {
      client = client ?? TwilioClient.GetRestClient();

      var request = new Request(
          HttpMethod.Get,
          targetUrl
      );

      var response = client.Request(request);
      return Page<MediaProcessorResource>.FromJson("media_processors", response.Content);
    }

    /// <summary>
    /// Fetch the next page of records
    /// </summary>
    /// <param name="page"> current page of records </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> The next page of records </returns>
    public static Page<MediaProcessorResource> NextPage(Page<MediaProcessorResource> page, ITwilioRestClient client)
    {
      var request = new Request(
          HttpMethod.Get,
          page.GetNextPageUrl(Rest.Domain.Media)
      );

      var response = client.Request(request);
      return Page<MediaProcessorResource>.FromJson("media_processors", response.Content);
    }

    /// <summary>
    /// Fetch the previous page of records
    /// </summary>
    /// <param name="page"> current page of records </param>
    /// <param name="client"> Client to make requests to Twilio </param>
    /// <returns> The previous page of records </returns>
    public static Page<MediaProcessorResource> PreviousPage(Page<MediaProcessorResource> page, ITwilioRestClient client)
    {
      var request = new Request(
          HttpMethod.Get,
          page.GetPreviousPageUrl(Rest.Domain.Media)
      );

      var response = client.Request(request);
      return Page<MediaProcessorResource>.FromJson("media_processors", response.Content);
    }

    /// <summary>
    /// Converts a JSON string into a MediaProcessorResource object
    /// </summary>
    /// <param name="json"> Raw JSON string </param>
    /// <returns> MediaProcessorResource object represented by the provided JSON </returns>
    public static MediaProcessorResource FromJson(string json)
    {
      // Convert all checked exceptions to Runtime
      try
      {
        return JsonConvert.DeserializeObject<MediaProcessorResource>(json);
      }
      catch (JsonException e)
      {
        throw new ApiException(e.Message, e);
      }
    }

    /// <summary>
    /// The SID of the Account that created the resource
    /// </summary>
    [JsonProperty("account_sid")]
    public string AccountSid { get; private set; }
    /// <summary>
    /// The unique string that identifies the resource
    /// </summary>
    [JsonProperty("sid")]
    public string Sid { get; private set; }
    /// <summary>
    /// The ISO 8601 date and time in GMT when the resource was created
    /// </summary>
    [JsonProperty("date_created")]
    public DateTime? DateCreated { get; private set; }
    /// <summary>
    /// The ISO 8601 date and time in GMT when the resource was last updated
    /// </summary>
    [JsonProperty("date_updated")]
    public DateTime? DateUpdated { get; private set; }
    /// <summary>
    /// The Media Extension name or URL
    /// </summary>
    [JsonProperty("extension")]
    public string Extension { get; private set; }
    /// <summary>
    /// The Media Extension context
    /// </summary>
    [JsonProperty("extension_context")]
    public string ExtensionContext { get; private set; }
    /// <summary>
    /// The status of the MediaProcessor
    /// </summary>
    [JsonProperty("status")]
    [JsonConverter(typeof(StringEnumConverter))]
    public MediaProcessorResource.StatusEnum Status { get; private set; }
    /// <summary>
    /// The absolute URL of the resource
    /// </summary>
    [JsonProperty("url")]
    public Uri Url { get; private set; }
    /// <summary>
    /// The reason why a MediaProcessor ended
    /// </summary>
    [JsonProperty("ended_reason")]
    public string EndedReason { get; private set; }
    /// <summary>
    /// The URL to which Twilio will send MediaProcessor event updates
    /// </summary>
    [JsonProperty("status_callback")]
    public Uri StatusCallback { get; private set; }
    /// <summary>
    /// The HTTP method Twilio should use to call the `status_callback` URL
    /// </summary>
    [JsonProperty("status_callback_method")]
    [JsonConverter(typeof(HttpMethodConverter))]
    public Twilio.Http.HttpMethod StatusCallbackMethod { get; private set; }
    /// <summary>
    /// Maximum MediaProcessor duration in minutes
    /// </summary>
    [JsonProperty("max_duration")]
    public int? MaxDuration { get; private set; }

    private MediaProcessorResource()
    {

    }
  }

}