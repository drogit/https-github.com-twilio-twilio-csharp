/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// SipDomainResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Routes.V2
{

    public class SipDomainResource : Resource
    {
        private static Request BuildUpdateRequest(UpdateSipDomainOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Routes,
                "/v2/SipDomains/" + options.PathSipDomain + "",
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update SipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SipDomain </returns>
        public static SipDomainResource Update(UpdateSipDomainOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update SipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SipDomain </returns>
        public static async System.Threading.Tasks.Task<SipDomainResource> UpdateAsync(UpdateSipDomainOptions options,
                                                                                       ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathSipDomain"> The sip_domain </param>
        /// <param name="voiceRegion"> The voice_region </param>
        /// <param name="friendlyName"> The friendly_name </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SipDomain </returns>
        public static SipDomainResource Update(string pathSipDomain,
                                               string voiceRegion = null,
                                               string friendlyName = null,
                                               ITwilioRestClient client = null)
        {
            var options = new UpdateSipDomainOptions(pathSipDomain){VoiceRegion = voiceRegion, FriendlyName = friendlyName};
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathSipDomain"> The sip_domain </param>
        /// <param name="voiceRegion"> The voice_region </param>
        /// <param name="friendlyName"> The friendly_name </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SipDomain </returns>
        public static async System.Threading.Tasks.Task<SipDomainResource> UpdateAsync(string pathSipDomain,
                                                                                       string voiceRegion = null,
                                                                                       string friendlyName = null,
                                                                                       ITwilioRestClient client = null)
        {
            var options = new UpdateSipDomainOptions(pathSipDomain){VoiceRegion = voiceRegion, FriendlyName = friendlyName};
            return await UpdateAsync(options, client);
        }
        #endif

        private static Request BuildFetchRequest(FetchSipDomainOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Routes,
                "/v2/SipDomains/" + options.PathSipDomain + "",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch SipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SipDomain </returns>
        public static SipDomainResource Fetch(FetchSipDomainOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch SipDomain parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SipDomain </returns>
        public static async System.Threading.Tasks.Task<SipDomainResource> FetchAsync(FetchSipDomainOptions options,
                                                                                      ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathSipDomain"> The sip_domain </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of SipDomain </returns>
        public static SipDomainResource Fetch(string pathSipDomain, ITwilioRestClient client = null)
        {
            var options = new FetchSipDomainOptions(pathSipDomain);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathSipDomain"> The sip_domain </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of SipDomain </returns>
        public static async System.Threading.Tasks.Task<SipDomainResource> FetchAsync(string pathSipDomain,
                                                                                      ITwilioRestClient client = null)
        {
            var options = new FetchSipDomainOptions(pathSipDomain);
            return await FetchAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a SipDomainResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> SipDomainResource object represented by the provided JSON </returns>
        public static SipDomainResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<SipDomainResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The sip_domain
        /// </summary>
        [JsonProperty("sip_domain")]
        public string SipDomain { get; private set; }
        /// <summary>
        /// The url
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }
        /// <summary>
        /// The sid
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The account_sid
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The friendly_name
        /// </summary>
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }
        /// <summary>
        /// The voice_region
        /// </summary>
        [JsonProperty("voice_region")]
        public string VoiceRegion { get; private set; }
        /// <summary>
        /// The date_created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The date_updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        private SipDomainResource()
        {

        }
    }

}