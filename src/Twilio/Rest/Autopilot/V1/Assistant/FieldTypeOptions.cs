/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Autopilot.V1.Assistant
{

  /// <summary>
  /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
  /// currently do not have developer preview access, please contact help@twilio.com.
  ///
  /// FetchFieldTypeOptions
  /// </summary>
  public class FetchFieldTypeOptions : IOptions<FieldTypeResource>
  {
    /// <summary>
    /// The SID of the Assistant that is the parent of the resource to fetch
    /// </summary>
    public string PathAssistantSid { get; }
    /// <summary>
    /// The unique string that identifies the resource
    /// </summary>
    public string PathSid { get; }

    /// <summary>
    /// Construct a new FetchFieldTypeOptions
    /// </summary>
    /// <param name="pathAssistantSid"> The SID of the Assistant that is the parent of the resource to fetch </param>
    /// <param name="pathSid"> The unique string that identifies the resource </param>
    public FetchFieldTypeOptions(string pathAssistantSid, string pathSid)
    {
      PathAssistantSid = pathAssistantSid;
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

  /// <summary>
  /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
  /// currently do not have developer preview access, please contact help@twilio.com.
  ///
  /// ReadFieldTypeOptions
  /// </summary>
  public class ReadFieldTypeOptions : ReadOptions<FieldTypeResource>
  {
    /// <summary>
    /// The SID of the Assistant with the FieldType resources to read
    /// </summary>
    public string PathAssistantSid { get; }

    /// <summary>
    /// Construct a new ReadFieldTypeOptions
    /// </summary>
    /// <param name="pathAssistantSid"> The SID of the Assistant with the FieldType resources to read </param>
    public ReadFieldTypeOptions(string pathAssistantSid)
    {
      PathAssistantSid = pathAssistantSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public override List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (PageSize != null)
      {
        p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
  /// currently do not have developer preview access, please contact help@twilio.com.
  ///
  /// CreateFieldTypeOptions
  /// </summary>
  public class CreateFieldTypeOptions : IOptions<FieldTypeResource>
  {
    /// <summary>
    /// The SID of the Assistant that is the parent of the new resource
    /// </summary>
    public string PathAssistantSid { get; }
    /// <summary>
    /// An application-defined string that uniquely identifies the new resource
    /// </summary>
    public string UniqueName { get; }
    /// <summary>
    /// A string to describe the new resource
    /// </summary>
    public string FriendlyName { get; set; }

    /// <summary>
    /// Construct a new CreateFieldTypeOptions
    /// </summary>
    /// <param name="pathAssistantSid"> The SID of the Assistant that is the parent of the new resource </param>
    /// <param name="uniqueName"> An application-defined string that uniquely identifies the new resource </param>
    public CreateFieldTypeOptions(string pathAssistantSid, string uniqueName)
    {
      PathAssistantSid = pathAssistantSid;
      UniqueName = uniqueName;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (UniqueName != null)
      {
        p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
      }

      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      return p;
    }
  }

  /// <summary>
  /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
  /// currently do not have developer preview access, please contact help@twilio.com.
  ///
  /// UpdateFieldTypeOptions
  /// </summary>
  public class UpdateFieldTypeOptions : IOptions<FieldTypeResource>
  {
    /// <summary>
    /// The SID of the Assistant with the FieldType resource to update
    /// </summary>
    public string PathAssistantSid { get; }
    /// <summary>
    /// The unique string that identifies the resource
    /// </summary>
    public string PathSid { get; }
    /// <summary>
    /// A string to describe the resource
    /// </summary>
    public string FriendlyName { get; set; }
    /// <summary>
    /// An application-defined string that uniquely identifies the resource
    /// </summary>
    public string UniqueName { get; set; }

    /// <summary>
    /// Construct a new UpdateFieldTypeOptions
    /// </summary>
    /// <param name="pathAssistantSid"> The SID of the Assistant with the FieldType resource to update </param>
    /// <param name="pathSid"> The unique string that identifies the resource </param>
    public UpdateFieldTypeOptions(string pathAssistantSid, string pathSid)
    {
      PathAssistantSid = pathAssistantSid;
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      if (UniqueName != null)
      {
        p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
      }

      return p;
    }
  }

  /// <summary>
  /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
  /// currently do not have developer preview access, please contact help@twilio.com.
  ///
  /// DeleteFieldTypeOptions
  /// </summary>
  public class DeleteFieldTypeOptions : IOptions<FieldTypeResource>
  {
    /// <summary>
    /// The SID of the Assistant with the FieldType resources to delete
    /// </summary>
    public string PathAssistantSid { get; }
    /// <summary>
    /// The unique string that identifies the resource
    /// </summary>
    public string PathSid { get; }

    /// <summary>
    /// Construct a new DeleteFieldTypeOptions
    /// </summary>
    /// <param name="pathAssistantSid"> The SID of the Assistant with the FieldType resources to delete </param>
    /// <param name="pathSid"> The unique string that identifies the resource </param>
    public DeleteFieldTypeOptions(string pathAssistantSid, string pathSid)
    {
      PathAssistantSid = pathAssistantSid;
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

}