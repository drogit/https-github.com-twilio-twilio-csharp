/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Numbers.V2.RegulatoryCompliance
{

    /// <summary>
    /// Create a new Bundle.
    /// </summary>
    public class CreateBundleOptions : IOptions<BundleResource>
    {
        /// <summary>
        /// The string that you assigned to describe the resource
        /// </summary>
        public string FriendlyName { get; }
        /// <summary>
        /// The email address
        /// </summary>
        public string Email { get; }
        /// <summary>
        /// The URL we call to inform your application of status changes.
        /// </summary>
        public Uri StatusCallback { get; set; }
        /// <summary>
        /// The unique string of a regulation.
        /// </summary>
        public string RegulationSid { get; set; }
        /// <summary>
        /// The ISO country code of the country
        /// </summary>
        public string IsoCountry { get; set; }
        /// <summary>
        /// The type of End User of the Bundle resource
        /// </summary>
        public BundleResource.EndUserTypeEnum EndUserType { get; set; }
        /// <summary>
        /// The type of phone number
        /// </summary>
        public string NumberType { get; set; }

        /// <summary>
        /// Construct a new CreateBundleOptions
        /// </summary>
        /// <param name="friendlyName"> The string that you assigned to describe the resource </param>
        /// <param name="email"> The email address </param>
        public CreateBundleOptions(string friendlyName, string email)
        {
            FriendlyName = friendlyName;
            Email = email;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (Email != null)
            {
                p.Add(new KeyValuePair<string, string>("Email", Email));
            }

            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }

            if (RegulationSid != null)
            {
                p.Add(new KeyValuePair<string, string>("RegulationSid", RegulationSid.ToString()));
            }

            if (IsoCountry != null)
            {
                p.Add(new KeyValuePair<string, string>("IsoCountry", IsoCountry));
            }

            if (EndUserType != null)
            {
                p.Add(new KeyValuePair<string, string>("EndUserType", EndUserType.ToString()));
            }

            if (NumberType != null)
            {
                p.Add(new KeyValuePair<string, string>("NumberType", NumberType));
            }

            return p;
        }
    }

    /// <summary>
    /// Retrieve a list of all Bundles for an account.
    /// </summary>
    public class ReadBundleOptions : ReadOptions<BundleResource>
    {
        /// <summary>
        /// The verification status of the Bundle resource
        /// </summary>
        public BundleResource.StatusEnum Status { get; set; }
        /// <summary>
        /// The string that you assigned to describe the resource
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// The unique string of a regulation.
        /// </summary>
        public string RegulationSid { get; set; }
        /// <summary>
        /// The ISO country code of the country
        /// </summary>
        public string IsoCountry { get; set; }
        /// <summary>
        /// The type of phone number
        /// </summary>
        public string NumberType { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (RegulationSid != null)
            {
                p.Add(new KeyValuePair<string, string>("RegulationSid", RegulationSid.ToString()));
            }

            if (IsoCountry != null)
            {
                p.Add(new KeyValuePair<string, string>("IsoCountry", IsoCountry));
            }

            if (NumberType != null)
            {
                p.Add(new KeyValuePair<string, string>("NumberType", NumberType));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// Fetch a specific Bundle instance.
    /// </summary>
    public class FetchBundleOptions : IOptions<BundleResource>
    {
        /// <summary>
        /// The unique string that identifies the resource.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchBundleOptions
        /// </summary>
        /// <param name="pathSid"> The unique string that identifies the resource. </param>
        public FetchBundleOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// Updates a Bundle in an account.
    /// </summary>
    public class UpdateBundleOptions : IOptions<BundleResource>
    {
        /// <summary>
        /// The unique string that identifies the resource.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// The verification status of the Bundle resource
        /// </summary>
        public BundleResource.StatusEnum Status { get; set; }
        /// <summary>
        /// The URL we call to inform your application of status changes.
        /// </summary>
        public Uri StatusCallback { get; set; }
        /// <summary>
        /// The string that you assigned to describe the resource
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// The email address
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Construct a new UpdateBundleOptions
        /// </summary>
        /// <param name="pathSid"> The unique string that identifies the resource. </param>
        public UpdateBundleOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }

            if (StatusCallback != null)
            {
                p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
            }

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (Email != null)
            {
                p.Add(new KeyValuePair<string, string>("Email", Email));
            }

            return p;
        }
    }

    /// <summary>
    /// Delete a specific Bundle.
    /// </summary>
    public class DeleteBundleOptions : IOptions<BundleResource>
    {
        /// <summary>
        /// The unique string that identifies the resource.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteBundleOptions
        /// </summary>
        /// <param name="pathSid"> The unique string that identifies the resource. </param>
        public DeleteBundleOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}