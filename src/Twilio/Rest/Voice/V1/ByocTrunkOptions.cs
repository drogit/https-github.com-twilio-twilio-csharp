/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Voice.V1
{

  /// <summary>
  /// CreateByocTrunkOptions
  /// </summary>
  public class CreateByocTrunkOptions : IOptions<ByocTrunkResource>
  {
    /// <summary>
    /// A string to describe the resource
    /// </summary>
    public string FriendlyName { get; set; }
    /// <summary>
    /// The URL we should call when receiving a call
    /// </summary>
    public Uri VoiceUrl { get; set; }
    /// <summary>
    /// The HTTP method to use with voice_url
    /// </summary>
    public Twilio.Http.HttpMethod VoiceMethod { get; set; }
    /// <summary>
    /// The URL we should call when an error occurs in executing TwiML
    /// </summary>
    public Uri VoiceFallbackUrl { get; set; }
    /// <summary>
    /// The HTTP method to use with voice_fallback_url
    /// </summary>
    public Twilio.Http.HttpMethod VoiceFallbackMethod { get; set; }
    /// <summary>
    /// The URL that we should call to pass status updates
    /// </summary>
    public Uri StatusCallbackUrl { get; set; }
    /// <summary>
    /// The HTTP method we should use to call `status_callback_url`
    /// </summary>
    public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }
    /// <summary>
    /// Whether Caller ID Name (CNAM) lookup is enabled for the trunk
    /// </summary>
    public bool? CnamLookupEnabled { get; set; }
    /// <summary>
    /// Origination Connection Policy (to your Carrier)
    /// </summary>
    public string ConnectionPolicySid { get; set; }
    /// <summary>
    /// The SID of the SIP Domain that should be used in the `From` header of originating calls
    /// </summary>
    public string FromDomainSid { get; set; }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      if (VoiceUrl != null)
      {
        p.Add(new KeyValuePair<string, string>("VoiceUrl", Serializers.Url(VoiceUrl)));
      }

      if (VoiceMethod != null)
      {
        p.Add(new KeyValuePair<string, string>("VoiceMethod", VoiceMethod.ToString()));
      }

      if (VoiceFallbackUrl != null)
      {
        p.Add(new KeyValuePair<string, string>("VoiceFallbackUrl", Serializers.Url(VoiceFallbackUrl)));
      }

      if (VoiceFallbackMethod != null)
      {
        p.Add(new KeyValuePair<string, string>("VoiceFallbackMethod", VoiceFallbackMethod.ToString()));
      }

      if (StatusCallbackUrl != null)
      {
        p.Add(new KeyValuePair<string, string>("StatusCallbackUrl", Serializers.Url(StatusCallbackUrl)));
      }

      if (StatusCallbackMethod != null)
      {
        p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
      }

      if (CnamLookupEnabled != null)
      {
        p.Add(new KeyValuePair<string, string>("CnamLookupEnabled", CnamLookupEnabled.Value.ToString().ToLower()));
      }

      if (ConnectionPolicySid != null)
      {
        p.Add(new KeyValuePair<string, string>("ConnectionPolicySid", ConnectionPolicySid.ToString()));
      }

      if (FromDomainSid != null)
      {
        p.Add(new KeyValuePair<string, string>("FromDomainSid", FromDomainSid.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// FetchByocTrunkOptions
  /// </summary>
  public class FetchByocTrunkOptions : IOptions<ByocTrunkResource>
  {
    /// <summary>
    /// The unique string that identifies the resource
    /// </summary>
    public string PathSid { get; }

    /// <summary>
    /// Construct a new FetchByocTrunkOptions
    /// </summary>
    /// <param name="pathSid"> The unique string that identifies the resource </param>
    public FetchByocTrunkOptions(string pathSid)
    {
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

  /// <summary>
  /// ReadByocTrunkOptions
  /// </summary>
  public class ReadByocTrunkOptions : ReadOptions<ByocTrunkResource>
  {
    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public override List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (PageSize != null)
      {
        p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// UpdateByocTrunkOptions
  /// </summary>
  public class UpdateByocTrunkOptions : IOptions<ByocTrunkResource>
  {
    /// <summary>
    /// The unique string that identifies the resource
    /// </summary>
    public string PathSid { get; }
    /// <summary>
    /// A string to describe the resource
    /// </summary>
    public string FriendlyName { get; set; }
    /// <summary>
    /// The URL we should call when receiving a call
    /// </summary>
    public Uri VoiceUrl { get; set; }
    /// <summary>
    /// The HTTP method we should use with voice_url
    /// </summary>
    public Twilio.Http.HttpMethod VoiceMethod { get; set; }
    /// <summary>
    /// The URL we should call when an error occurs in executing TwiML
    /// </summary>
    public Uri VoiceFallbackUrl { get; set; }
    /// <summary>
    /// The HTTP method used with voice_fallback_url
    /// </summary>
    public Twilio.Http.HttpMethod VoiceFallbackMethod { get; set; }
    /// <summary>
    /// The URL that we should call to pass status updates
    /// </summary>
    public Uri StatusCallbackUrl { get; set; }
    /// <summary>
    /// The HTTP method we should use to call status_callback_url
    /// </summary>
    public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }
    /// <summary>
    /// Whether Caller ID Name (CNAM) lookup is enabled for the trunk
    /// </summary>
    public bool? CnamLookupEnabled { get; set; }
    /// <summary>
    /// Origination Connection Policy (to your Carrier)
    /// </summary>
    public string ConnectionPolicySid { get; set; }
    /// <summary>
    /// The SID of the SIP Domain that should be used in the `From` header of originating calls
    /// </summary>
    public string FromDomainSid { get; set; }

    /// <summary>
    /// Construct a new UpdateByocTrunkOptions
    /// </summary>
    /// <param name="pathSid"> The unique string that identifies the resource </param>
    public UpdateByocTrunkOptions(string pathSid)
    {
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      if (VoiceUrl != null)
      {
        p.Add(new KeyValuePair<string, string>("VoiceUrl", Serializers.Url(VoiceUrl)));
      }

      if (VoiceMethod != null)
      {
        p.Add(new KeyValuePair<string, string>("VoiceMethod", VoiceMethod.ToString()));
      }

      if (VoiceFallbackUrl != null)
      {
        p.Add(new KeyValuePair<string, string>("VoiceFallbackUrl", Serializers.Url(VoiceFallbackUrl)));
      }

      if (VoiceFallbackMethod != null)
      {
        p.Add(new KeyValuePair<string, string>("VoiceFallbackMethod", VoiceFallbackMethod.ToString()));
      }

      if (StatusCallbackUrl != null)
      {
        p.Add(new KeyValuePair<string, string>("StatusCallbackUrl", Serializers.Url(StatusCallbackUrl)));
      }

      if (StatusCallbackMethod != null)
      {
        p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
      }

      if (CnamLookupEnabled != null)
      {
        p.Add(new KeyValuePair<string, string>("CnamLookupEnabled", CnamLookupEnabled.Value.ToString().ToLower()));
      }

      if (ConnectionPolicySid != null)
      {
        p.Add(new KeyValuePair<string, string>("ConnectionPolicySid", ConnectionPolicySid.ToString()));
      }

      if (FromDomainSid != null)
      {
        p.Add(new KeyValuePair<string, string>("FromDomainSid", FromDomainSid.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// DeleteByocTrunkOptions
  /// </summary>
  public class DeleteByocTrunkOptions : IOptions<ByocTrunkResource>
  {
    /// <summary>
    /// The unique string that identifies the resource
    /// </summary>
    public string PathSid { get; }

    /// <summary>
    /// Construct a new DeleteByocTrunkOptions
    /// </summary>
    /// <param name="pathSid"> The unique string that identifies the resource </param>
    public DeleteByocTrunkOptions(string pathSid)
    {
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

}