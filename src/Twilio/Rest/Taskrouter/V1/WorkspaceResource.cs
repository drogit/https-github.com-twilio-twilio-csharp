/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// WorkspaceResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Taskrouter.V1
{

    public class WorkspaceResource : Resource
    {
        public sealed class QueueOrderEnum : StringEnum
        {
            private QueueOrderEnum(string value) : base(value) {}
            public QueueOrderEnum() {}
            public static implicit operator QueueOrderEnum(string value)
            {
                return new QueueOrderEnum(value);
            }

            public static readonly QueueOrderEnum Fifo = new QueueOrderEnum("FIFO");
            public static readonly QueueOrderEnum Lifo = new QueueOrderEnum("LIFO");
        }

        private static Request BuildFetchRequest(FetchWorkspaceOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathSid + "",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch Workspace parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Workspace </returns>
        public static WorkspaceResource Fetch(FetchWorkspaceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch Workspace parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Workspace </returns>
        public static async System.Threading.Tasks.Task<WorkspaceResource> FetchAsync(FetchWorkspaceOptions options,
                                                                                      ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathSid"> The SID of the resource to fetch </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Workspace </returns>
        public static WorkspaceResource Fetch(string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchWorkspaceOptions(pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathSid"> The SID of the resource to fetch </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Workspace </returns>
        public static async System.Threading.Tasks.Task<WorkspaceResource> FetchAsync(string pathSid,
                                                                                      ITwilioRestClient client = null)
        {
            var options = new FetchWorkspaceOptions(pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildUpdateRequest(UpdateWorkspaceOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathSid + "",
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update Workspace parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Workspace </returns>
        public static WorkspaceResource Update(UpdateWorkspaceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="options"> Update Workspace parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Workspace </returns>
        public static async System.Threading.Tasks.Task<WorkspaceResource> UpdateAsync(UpdateWorkspaceOptions options,
                                                                                       ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathSid"> The SID of the resource to update </param>
        /// <param name="defaultActivitySid"> The SID of the Activity that will be used when new Workers are created in the
        ///                          Workspace </param>
        /// <param name="eventCallbackUrl"> The URL we should call when an event occurs </param>
        /// <param name="eventsFilter"> The list of Workspace events for which to call event_callback_url </param>
        /// <param name="friendlyName"> A string to describe the Workspace resource </param>
        /// <param name="multiTaskEnabled"> Whether multi-tasking is enabled </param>
        /// <param name="timeoutActivitySid"> The SID of the Activity that will be assigned to a Worker when a Task reservation
        ///                          times out without a response </param>
        /// <param name="prioritizeQueueOrder"> The type of TaskQueue to prioritize when Workers are receiving Tasks from both
        ///                            types of TaskQueues </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Workspace </returns>
        public static WorkspaceResource Update(string pathSid,
                                               string defaultActivitySid = null,
                                               Uri eventCallbackUrl = null,
                                               string eventsFilter = null,
                                               string friendlyName = null,
                                               bool? multiTaskEnabled = null,
                                               string timeoutActivitySid = null,
                                               WorkspaceResource.QueueOrderEnum prioritizeQueueOrder = null,
                                               ITwilioRestClient client = null)
        {
            var options = new UpdateWorkspaceOptions(pathSid){DefaultActivitySid = defaultActivitySid, EventCallbackUrl = eventCallbackUrl, EventsFilter = eventsFilter, FriendlyName = friendlyName, MultiTaskEnabled = multiTaskEnabled, TimeoutActivitySid = timeoutActivitySid, PrioritizeQueueOrder = prioritizeQueueOrder};
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// update
        /// </summary>
        /// <param name="pathSid"> The SID of the resource to update </param>
        /// <param name="defaultActivitySid"> The SID of the Activity that will be used when new Workers are created in the
        ///                          Workspace </param>
        /// <param name="eventCallbackUrl"> The URL we should call when an event occurs </param>
        /// <param name="eventsFilter"> The list of Workspace events for which to call event_callback_url </param>
        /// <param name="friendlyName"> A string to describe the Workspace resource </param>
        /// <param name="multiTaskEnabled"> Whether multi-tasking is enabled </param>
        /// <param name="timeoutActivitySid"> The SID of the Activity that will be assigned to a Worker when a Task reservation
        ///                          times out without a response </param>
        /// <param name="prioritizeQueueOrder"> The type of TaskQueue to prioritize when Workers are receiving Tasks from both
        ///                            types of TaskQueues </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Workspace </returns>
        public static async System.Threading.Tasks.Task<WorkspaceResource> UpdateAsync(string pathSid,
                                                                                       string defaultActivitySid = null,
                                                                                       Uri eventCallbackUrl = null,
                                                                                       string eventsFilter = null,
                                                                                       string friendlyName = null,
                                                                                       bool? multiTaskEnabled = null,
                                                                                       string timeoutActivitySid = null,
                                                                                       WorkspaceResource.QueueOrderEnum prioritizeQueueOrder = null,
                                                                                       ITwilioRestClient client = null)
        {
            var options = new UpdateWorkspaceOptions(pathSid){DefaultActivitySid = defaultActivitySid, EventCallbackUrl = eventCallbackUrl, EventsFilter = eventsFilter, FriendlyName = friendlyName, MultiTaskEnabled = multiTaskEnabled, TimeoutActivitySid = timeoutActivitySid, PrioritizeQueueOrder = prioritizeQueueOrder};
            return await UpdateAsync(options, client);
        }
        #endif

        private static Request BuildReadRequest(ReadWorkspaceOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read Workspace parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Workspace </returns>
        public static ResourceSet<WorkspaceResource> Read(ReadWorkspaceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<WorkspaceResource>.FromJson("workspaces", response.Content);
            return new ResourceSet<WorkspaceResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read Workspace parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Workspace </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<WorkspaceResource>> ReadAsync(ReadWorkspaceOptions options,
                                                                                                  ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<WorkspaceResource>.FromJson("workspaces", response.Content);
            return new ResourceSet<WorkspaceResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// read
        /// </summary>
        /// <param name="friendlyName"> The friendly_name of the Workspace resources to read </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Workspace </returns>
        public static ResourceSet<WorkspaceResource> Read(string friendlyName = null,
                                                          int? pageSize = null,
                                                          long? limit = null,
                                                          ITwilioRestClient client = null)
        {
            var options = new ReadWorkspaceOptions(){FriendlyName = friendlyName, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="friendlyName"> The friendly_name of the Workspace resources to read </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Workspace </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<WorkspaceResource>> ReadAsync(string friendlyName = null,
                                                                                                  int? pageSize = null,
                                                                                                  long? limit = null,
                                                                                                  ITwilioRestClient client = null)
        {
            var options = new ReadWorkspaceOptions(){FriendlyName = friendlyName, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<WorkspaceResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<WorkspaceResource>.FromJson("workspaces", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<WorkspaceResource> NextPage(Page<WorkspaceResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Taskrouter)
            );

            var response = client.Request(request);
            return Page<WorkspaceResource>.FromJson("workspaces", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<WorkspaceResource> PreviousPage(Page<WorkspaceResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Taskrouter)
            );

            var response = client.Request(request);
            return Page<WorkspaceResource>.FromJson("workspaces", response.Content);
        }

        private static Request BuildCreateRequest(CreateWorkspaceOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces",
                postParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// create
        /// </summary>
        /// <param name="options"> Create Workspace parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Workspace </returns>
        public static WorkspaceResource Create(CreateWorkspaceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// create
        /// </summary>
        /// <param name="options"> Create Workspace parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Workspace </returns>
        public static async System.Threading.Tasks.Task<WorkspaceResource> CreateAsync(CreateWorkspaceOptions options,
                                                                                       ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// create
        /// </summary>
        /// <param name="friendlyName"> A string to describe the Workspace resource </param>
        /// <param name="eventCallbackUrl"> The URL we should call when an event occurs </param>
        /// <param name="eventsFilter"> The list of Workspace events for which to call event_callback_url </param>
        /// <param name="multiTaskEnabled"> Whether multi-tasking is enabled </param>
        /// <param name="template"> An available template name </param>
        /// <param name="prioritizeQueueOrder"> The type of TaskQueue to prioritize when Workers are receiving Tasks from both
        ///                            types of TaskQueues </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Workspace </returns>
        public static WorkspaceResource Create(string friendlyName,
                                               Uri eventCallbackUrl = null,
                                               string eventsFilter = null,
                                               bool? multiTaskEnabled = null,
                                               string template = null,
                                               WorkspaceResource.QueueOrderEnum prioritizeQueueOrder = null,
                                               ITwilioRestClient client = null)
        {
            var options = new CreateWorkspaceOptions(friendlyName){EventCallbackUrl = eventCallbackUrl, EventsFilter = eventsFilter, MultiTaskEnabled = multiTaskEnabled, Template = template, PrioritizeQueueOrder = prioritizeQueueOrder};
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// create
        /// </summary>
        /// <param name="friendlyName"> A string to describe the Workspace resource </param>
        /// <param name="eventCallbackUrl"> The URL we should call when an event occurs </param>
        /// <param name="eventsFilter"> The list of Workspace events for which to call event_callback_url </param>
        /// <param name="multiTaskEnabled"> Whether multi-tasking is enabled </param>
        /// <param name="template"> An available template name </param>
        /// <param name="prioritizeQueueOrder"> The type of TaskQueue to prioritize when Workers are receiving Tasks from both
        ///                            types of TaskQueues </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Workspace </returns>
        public static async System.Threading.Tasks.Task<WorkspaceResource> CreateAsync(string friendlyName,
                                                                                       Uri eventCallbackUrl = null,
                                                                                       string eventsFilter = null,
                                                                                       bool? multiTaskEnabled = null,
                                                                                       string template = null,
                                                                                       WorkspaceResource.QueueOrderEnum prioritizeQueueOrder = null,
                                                                                       ITwilioRestClient client = null)
        {
            var options = new CreateWorkspaceOptions(friendlyName){EventCallbackUrl = eventCallbackUrl, EventsFilter = eventsFilter, MultiTaskEnabled = multiTaskEnabled, Template = template, PrioritizeQueueOrder = prioritizeQueueOrder};
            return await CreateAsync(options, client);
        }
        #endif

        private static Request BuildDeleteRequest(DeleteWorkspaceOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathSid + "",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// delete
        /// </summary>
        /// <param name="options"> Delete Workspace parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Workspace </returns>
        public static bool Delete(DeleteWorkspaceOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary>
        /// delete
        /// </summary>
        /// <param name="options"> Delete Workspace parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Workspace </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteWorkspaceOptions options,
                                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary>
        /// delete
        /// </summary>
        /// <param name="pathSid"> The SID of the resource to delete </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Workspace </returns>
        public static bool Delete(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteWorkspaceOptions(pathSid);
            return Delete(options, client);
        }

        #if !NET35
        /// <summary>
        /// delete
        /// </summary>
        /// <param name="pathSid"> The SID of the resource to delete </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Workspace </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteWorkspaceOptions(pathSid);
            return await DeleteAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a WorkspaceResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> WorkspaceResource object represented by the provided JSON </returns>
        public static WorkspaceResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<WorkspaceResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The SID of the Account that created the resource
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The ISO 8601 date and time in GMT when the resource was created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The ISO 8601 date and time in GMT when the resource was last updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// The name of the default activity
        /// </summary>
        [JsonProperty("default_activity_name")]
        public string DefaultActivityName { get; private set; }
        /// <summary>
        /// The SID of the Activity that will be used when new Workers are created in the Workspace
        /// </summary>
        [JsonProperty("default_activity_sid")]
        public string DefaultActivitySid { get; private set; }
        /// <summary>
        /// The URL we call when an event occurs
        /// </summary>
        [JsonProperty("event_callback_url")]
        public Uri EventCallbackUrl { get; private set; }
        /// <summary>
        /// The list of Workspace events for which to call event_callback_url
        /// </summary>
        [JsonProperty("events_filter")]
        public string EventsFilter { get; private set; }
        /// <summary>
        /// The string that you assigned to describe the Workspace resource
        /// </summary>
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }
        /// <summary>
        /// Whether multi-tasking is enabled
        /// </summary>
        [JsonProperty("multi_task_enabled")]
        public bool? MultiTaskEnabled { get; private set; }
        /// <summary>
        /// The unique string that identifies the resource
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The name of the timeout activity
        /// </summary>
        [JsonProperty("timeout_activity_name")]
        public string TimeoutActivityName { get; private set; }
        /// <summary>
        /// The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response
        /// </summary>
        [JsonProperty("timeout_activity_sid")]
        public string TimeoutActivitySid { get; private set; }
        /// <summary>
        /// The type of TaskQueue to prioritize when Workers are receiving Tasks from both types of TaskQueues
        /// </summary>
        [JsonProperty("prioritize_queue_order")]
        [JsonConverter(typeof(StringEnumConverter))]
        public WorkspaceResource.QueueOrderEnum PrioritizeQueueOrder { get; private set; }
        /// <summary>
        /// The absolute URL of the Workspace resource
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }
        /// <summary>
        /// The URLs of related resources
        /// </summary>
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }

        private WorkspaceResource()
        {

        }
    }

}