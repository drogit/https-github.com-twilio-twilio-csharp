/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// WorkspaceStatisticsResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Taskrouter.V1.Workspace
{

    public class WorkspaceStatisticsResource : Resource
    {
        private static Request BuildFetchRequest(FetchWorkspaceStatisticsOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Taskrouter,
                "/v1/Workspaces/" + options.PathWorkspaceSid + "/Statistics",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch WorkspaceStatistics parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of WorkspaceStatistics </returns>
        public static WorkspaceStatisticsResource Fetch(FetchWorkspaceStatisticsOptions options,
                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch WorkspaceStatistics parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of WorkspaceStatistics </returns>
        public static async System.Threading.Tasks.Task<WorkspaceStatisticsResource> FetchAsync(FetchWorkspaceStatisticsOptions options,
                                                                                                ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace to fetch </param>
        /// <param name="minutes"> Only calculate statistics since this many minutes in the past </param>
        /// <param name="startDate"> Only calculate statistics from on or after this date </param>
        /// <param name="endDate"> Only calculate statistics from this date and time and earlier </param>
        /// <param name="taskChannel"> Only calculate statistics on this TaskChannel.  </param>
        /// <param name="splitByWaitTime"> A comma separated list of values that describes the thresholds to calculate
        ///                       statistics on </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of WorkspaceStatistics </returns>
        public static WorkspaceStatisticsResource Fetch(string pathWorkspaceSid,
                                                        int? minutes = null,
                                                        DateTime? startDate = null,
                                                        DateTime? endDate = null,
                                                        string taskChannel = null,
                                                        string splitByWaitTime = null,
                                                        ITwilioRestClient client = null)
        {
            var options = new FetchWorkspaceStatisticsOptions(pathWorkspaceSid){Minutes = minutes, StartDate = startDate, EndDate = endDate, TaskChannel = taskChannel, SplitByWaitTime = splitByWaitTime};
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathWorkspaceSid"> The SID of the Workspace to fetch </param>
        /// <param name="minutes"> Only calculate statistics since this many minutes in the past </param>
        /// <param name="startDate"> Only calculate statistics from on or after this date </param>
        /// <param name="endDate"> Only calculate statistics from this date and time and earlier </param>
        /// <param name="taskChannel"> Only calculate statistics on this TaskChannel.  </param>
        /// <param name="splitByWaitTime"> A comma separated list of values that describes the thresholds to calculate
        ///                       statistics on </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of WorkspaceStatistics </returns>
        public static async System.Threading.Tasks.Task<WorkspaceStatisticsResource> FetchAsync(string pathWorkspaceSid,
                                                                                                int? minutes = null,
                                                                                                DateTime? startDate = null,
                                                                                                DateTime? endDate = null,
                                                                                                string taskChannel = null,
                                                                                                string splitByWaitTime = null,
                                                                                                ITwilioRestClient client = null)
        {
            var options = new FetchWorkspaceStatisticsOptions(pathWorkspaceSid){Minutes = minutes, StartDate = startDate, EndDate = endDate, TaskChannel = taskChannel, SplitByWaitTime = splitByWaitTime};
            return await FetchAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a WorkspaceStatisticsResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> WorkspaceStatisticsResource object represented by the provided JSON </returns>
        public static WorkspaceStatisticsResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<WorkspaceStatisticsResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// n object that contains the real-time statistics for the Workspace
        /// </summary>
        [JsonProperty("realtime")]
        public object Realtime { get; private set; }
        /// <summary>
        /// An object that contains the cumulative statistics for the Workspace
        /// </summary>
        [JsonProperty("cumulative")]
        public object Cumulative { get; private set; }
        /// <summary>
        /// The SID of the Account that created the resource
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The SID of the Workspace
        /// </summary>
        [JsonProperty("workspace_sid")]
        public string WorkspaceSid { get; private set; }
        /// <summary>
        /// The absolute URL of the Workspace statistics resource
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private WorkspaceStatisticsResource()
        {

        }
    }

}