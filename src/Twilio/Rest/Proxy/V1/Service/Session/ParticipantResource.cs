/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
///
/// ParticipantResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Proxy.V1.Service.Session
{

    public class ParticipantResource : Resource
    {
        private static Request BuildFetchRequest(FetchParticipantOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Proxy,
                "/v1/Services/" + options.PathServiceSid + "/Sessions/" + options.PathSessionSid + "/Participants/" + options.PathSid + "",
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Fetch a specific Participant.
        /// </summary>
        /// <param name="options"> Fetch Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ParticipantResource Fetch(FetchParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Fetch a specific Participant.
        /// </summary>
        /// <param name="options"> Fetch Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ParticipantResource> FetchAsync(FetchParticipantOptions options,
                                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Fetch a specific Participant.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the parent Service of the resource to fetch </param>
        /// <param name="pathSessionSid"> The SID of the parent Session of the resource to fetch </param>
        /// <param name="pathSid"> The unique string that identifies the resource </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ParticipantResource Fetch(string pathServiceSid,
                                                string pathSessionSid,
                                                string pathSid,
                                                ITwilioRestClient client = null)
        {
            var options = new FetchParticipantOptions(pathServiceSid, pathSessionSid, pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Fetch a specific Participant.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the parent Service of the resource to fetch </param>
        /// <param name="pathSessionSid"> The SID of the parent Session of the resource to fetch </param>
        /// <param name="pathSid"> The unique string that identifies the resource </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ParticipantResource> FetchAsync(string pathServiceSid,
                                                                                        string pathSessionSid,
                                                                                        string pathSid,
                                                                                        ITwilioRestClient client = null)
        {
            var options = new FetchParticipantOptions(pathServiceSid, pathSessionSid, pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildReadRequest(ReadParticipantOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Proxy,
                "/v1/Services/" + options.PathServiceSid + "/Sessions/" + options.PathSessionSid + "/Participants",
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Retrieve a list of all Participants in a Session.
        /// </summary>
        /// <param name="options"> Read Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ResourceSet<ParticipantResource> Read(ReadParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<ParticipantResource>.FromJson("participants", response.Content);
            return new ResourceSet<ParticipantResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a list of all Participants in a Session.
        /// </summary>
        /// <param name="options"> Read Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ParticipantResource>> ReadAsync(ReadParticipantOptions options,
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<ParticipantResource>.FromJson("participants", response.Content);
            return new ResourceSet<ParticipantResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// Retrieve a list of all Participants in a Session.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the parent Service of the resource to read </param>
        /// <param name="pathSessionSid"> The SID of the parent Session of the resource to read </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ResourceSet<ParticipantResource> Read(string pathServiceSid,
                                                            string pathSessionSid,
                                                            int? pageSize = null,
                                                            long? limit = null,
                                                            ITwilioRestClient client = null)
        {
            var options = new ReadParticipantOptions(pathServiceSid, pathSessionSid){PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a list of all Participants in a Session.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the parent Service of the resource to read </param>
        /// <param name="pathSessionSid"> The SID of the parent Session of the resource to read </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<ParticipantResource>> ReadAsync(string pathServiceSid,
                                                                                                    string pathSessionSid,
                                                                                                    int? pageSize = null,
                                                                                                    long? limit = null,
                                                                                                    ITwilioRestClient client = null)
        {
            var options = new ReadParticipantOptions(pathServiceSid, pathSessionSid){PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<ParticipantResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<ParticipantResource>.FromJson("participants", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<ParticipantResource> NextPage(Page<ParticipantResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Proxy)
            );

            var response = client.Request(request);
            return Page<ParticipantResource>.FromJson("participants", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<ParticipantResource> PreviousPage(Page<ParticipantResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Proxy)
            );

            var response = client.Request(request);
            return Page<ParticipantResource>.FromJson("participants", response.Content);
        }

        private static Request BuildCreateRequest(CreateParticipantOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Proxy,
                "/v1/Services/" + options.PathServiceSid + "/Sessions/" + options.PathSessionSid + "/Participants",
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// Add a new Participant to the Session
        /// </summary>
        /// <param name="options"> Create Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ParticipantResource Create(CreateParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Add a new Participant to the Session
        /// </summary>
        /// <param name="options"> Create Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ParticipantResource> CreateAsync(CreateParticipantOptions options,
                                                                                         ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Add a new Participant to the Session
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the parent Service resource </param>
        /// <param name="pathSessionSid"> The SID of the parent Session resource </param>
        /// <param name="identifier"> The phone number of the Participant </param>
        /// <param name="friendlyName"> The string that you assigned to describe the participant </param>
        /// <param name="proxyIdentifier"> The proxy phone number to use for the Participant </param>
        /// <param name="proxyIdentifierSid"> The Proxy Identifier Sid </param>
        /// <param name="failOnParticipantConflict"> An experimental flag that instructs Proxy to reject a Participant create
        ///                                 request when it detects a conflict. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static ParticipantResource Create(string pathServiceSid,
                                                 string pathSessionSid,
                                                 string identifier,
                                                 string friendlyName = null,
                                                 string proxyIdentifier = null,
                                                 string proxyIdentifierSid = null,
                                                 bool? failOnParticipantConflict = null,
                                                 ITwilioRestClient client = null)
        {
            var options = new CreateParticipantOptions(pathServiceSid, pathSessionSid, identifier){FriendlyName = friendlyName, ProxyIdentifier = proxyIdentifier, ProxyIdentifierSid = proxyIdentifierSid, FailOnParticipantConflict = failOnParticipantConflict};
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// Add a new Participant to the Session
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the parent Service resource </param>
        /// <param name="pathSessionSid"> The SID of the parent Session resource </param>
        /// <param name="identifier"> The phone number of the Participant </param>
        /// <param name="friendlyName"> The string that you assigned to describe the participant </param>
        /// <param name="proxyIdentifier"> The proxy phone number to use for the Participant </param>
        /// <param name="proxyIdentifierSid"> The Proxy Identifier Sid </param>
        /// <param name="failOnParticipantConflict"> An experimental flag that instructs Proxy to reject a Participant create
        ///                                 request when it detects a conflict. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<ParticipantResource> CreateAsync(string pathServiceSid,
                                                                                         string pathSessionSid,
                                                                                         string identifier,
                                                                                         string friendlyName = null,
                                                                                         string proxyIdentifier = null,
                                                                                         string proxyIdentifierSid = null,
                                                                                         bool? failOnParticipantConflict = null,
                                                                                         ITwilioRestClient client = null)
        {
            var options = new CreateParticipantOptions(pathServiceSid, pathSessionSid, identifier){FriendlyName = friendlyName, ProxyIdentifier = proxyIdentifier, ProxyIdentifierSid = proxyIdentifierSid, FailOnParticipantConflict = failOnParticipantConflict};
            return await CreateAsync(options, client);
        }
        #endif

        private static Request BuildDeleteRequest(DeleteParticipantOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Proxy,
                "/v1/Services/" + options.PathServiceSid + "/Sessions/" + options.PathSessionSid + "/Participants/" + options.PathSid + "",
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Delete a specific Participant. This is a soft-delete. The participant remains associated with the session and cannot
        /// be re-added. Participants are only permanently deleted when the
        /// [Session](https://www.twilio.com/docs/proxy/api/session) is deleted.
        /// </summary>
        /// <param name="options"> Delete Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static bool Delete(DeleteParticipantOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary>
        /// Delete a specific Participant. This is a soft-delete. The participant remains associated with the session and cannot
        /// be re-added. Participants are only permanently deleted when the
        /// [Session](https://www.twilio.com/docs/proxy/api/session) is deleted.
        /// </summary>
        /// <param name="options"> Delete Participant parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteParticipantOptions options,
                                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary>
        /// Delete a specific Participant. This is a soft-delete. The participant remains associated with the session and cannot
        /// be re-added. Participants are only permanently deleted when the
        /// [Session](https://www.twilio.com/docs/proxy/api/session) is deleted.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the parent Service of the resource to delete </param>
        /// <param name="pathSessionSid"> The SID of the parent Session of the resource to delete </param>
        /// <param name="pathSid"> The unique string that identifies the resource </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Participant </returns>
        public static bool Delete(string pathServiceSid,
                                  string pathSessionSid,
                                  string pathSid,
                                  ITwilioRestClient client = null)
        {
            var options = new DeleteParticipantOptions(pathServiceSid, pathSessionSid, pathSid);
            return Delete(options, client);
        }

        #if !NET35
        /// <summary>
        /// Delete a specific Participant. This is a soft-delete. The participant remains associated with the session and cannot
        /// be re-added. Participants are only permanently deleted when the
        /// [Session](https://www.twilio.com/docs/proxy/api/session) is deleted.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the parent Service of the resource to delete </param>
        /// <param name="pathSessionSid"> The SID of the parent Session of the resource to delete </param>
        /// <param name="pathSid"> The unique string that identifies the resource </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Participant </returns>
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathServiceSid,
                                                                          string pathSessionSid,
                                                                          string pathSid,
                                                                          ITwilioRestClient client = null)
        {
            var options = new DeleteParticipantOptions(pathServiceSid, pathSessionSid, pathSid);
            return await DeleteAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a ParticipantResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> ParticipantResource object represented by the provided JSON </returns>
        public static ParticipantResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<ParticipantResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The unique string that identifies the resource
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The SID of the resource's parent Session
        /// </summary>
        [JsonProperty("session_sid")]
        public string SessionSid { get; private set; }
        /// <summary>
        /// The SID of the resource's parent Service
        /// </summary>
        [JsonProperty("service_sid")]
        public string ServiceSid { get; private set; }
        /// <summary>
        /// The SID of the Account that created the resource
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The string that you assigned to describe the participant
        /// </summary>
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }
        /// <summary>
        /// The phone number of the Participant
        /// </summary>
        [JsonProperty("identifier")]
        public string Identifier { get; private set; }
        /// <summary>
        /// The phone number or short code of the participant's partner
        /// </summary>
        [JsonProperty("proxy_identifier")]
        public string ProxyIdentifier { get; private set; }
        /// <summary>
        /// The SID of the Proxy Identifier assigned to the Participant
        /// </summary>
        [JsonProperty("proxy_identifier_sid")]
        public string ProxyIdentifierSid { get; private set; }
        /// <summary>
        /// The ISO 8601 date the Participant was removed
        /// </summary>
        [JsonProperty("date_deleted")]
        public DateTime? DateDeleted { get; private set; }
        /// <summary>
        /// The ISO 8601 date and time in GMT when the resource was created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The ISO 8601 date and time in GMT when the resource was last updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// The absolute URL of the Participant resource
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }
        /// <summary>
        /// The URLs to resources related the participant
        /// </summary>
        [JsonProperty("links")]
        public Dictionary<string, string> Links { get; private set; }

        private ParticipantResource()
        {

        }
    }

}