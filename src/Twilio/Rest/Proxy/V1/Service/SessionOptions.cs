/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Proxy.V1.Service
{

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// Fetch a specific Session.
    /// </summary>
    public class FetchSessionOptions : IOptions<SessionResource>
    {
        /// <summary>
        /// The SID of the Service to fetch the resource from
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The unique string that identifies the resource
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchSessionOptions
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the Service to fetch the resource from </param>
        /// <param name="pathSid"> The unique string that identifies the resource </param>
        public FetchSessionOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// Retrieve a list of all Sessions for the Service. A maximum of 100 records will be returned per page.
    /// </summary>
    public class ReadSessionOptions : ReadOptions<SessionResource>
    {
        /// <summary>
        /// The SID of the Service to fetch the resource from
        /// </summary>
        public string PathServiceSid { get; }

        /// <summary>
        /// Construct a new ReadSessionOptions
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the Service to fetch the resource from </param>
        public ReadSessionOptions(string pathServiceSid)
        {
            PathServiceSid = pathServiceSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// Create a new Session
    /// </summary>
    public class CreateSessionOptions : IOptions<SessionResource>
    {
        /// <summary>
        /// The SID of the parent Service resource
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// An application-defined string that uniquely identifies the resource
        /// </summary>
        public string UniqueName { get; set; }
        /// <summary>
        /// The ISO 8601 date when the Session should expire
        /// </summary>
        public DateTime? DateExpiry { get; set; }
        /// <summary>
        /// When the session will expire
        /// </summary>
        public int? Ttl { get; set; }
        /// <summary>
        /// The Mode of the Session
        /// </summary>
        public SessionResource.ModeEnum Mode { get; set; }
        /// <summary>
        /// Session status
        /// </summary>
        public SessionResource.StatusEnum Status { get; set; }
        /// <summary>
        /// The Participant objects to include in the new session
        /// </summary>
        public List<object> Participants { get; set; }
        /// <summary>
        /// An experimental flag that instructs Proxy to reject a Session create request when it detects a Participant conflict.
        /// </summary>
        public bool? FailOnParticipantConflict { get; set; }

        /// <summary>
        /// Construct a new CreateSessionOptions
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the parent Service resource </param>
        public CreateSessionOptions(string pathServiceSid)
        {
            PathServiceSid = pathServiceSid;
            Participants = new List<object>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (UniqueName != null)
            {
                p.Add(new KeyValuePair<string, string>("UniqueName", UniqueName));
            }

            if (DateExpiry != null)
            {
                p.Add(new KeyValuePair<string, string>("DateExpiry", Serializers.DateTimeIso8601(DateExpiry)));
            }

            if (Ttl != null)
            {
                p.Add(new KeyValuePair<string, string>("Ttl", Ttl.ToString()));
            }

            if (Mode != null)
            {
                p.Add(new KeyValuePair<string, string>("Mode", Mode.ToString()));
            }

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }

            if (Participants != null)
            {
                p.AddRange(Participants.Select(prop => new KeyValuePair<string, string>("Participants", Serializers.JsonObject(prop))));
            }

            if (FailOnParticipantConflict != null)
            {
                p.Add(new KeyValuePair<string, string>("FailOnParticipantConflict", FailOnParticipantConflict.Value.ToString().ToLower()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// Delete a specific Session.
    /// </summary>
    public class DeleteSessionOptions : IOptions<SessionResource>
    {
        /// <summary>
        /// The SID of the Service to delete the resource from
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The unique string that identifies the resource
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteSessionOptions
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the Service to delete the resource from </param>
        /// <param name="pathSid"> The unique string that identifies the resource </param>
        public DeleteSessionOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// Update a specific Session.
    /// </summary>
    public class UpdateSessionOptions : IOptions<SessionResource>
    {
        /// <summary>
        /// The SID of the Service to update the resource from
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The unique string that identifies the resource
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// The ISO 8601 date when the Session should expire
        /// </summary>
        public DateTime? DateExpiry { get; set; }
        /// <summary>
        /// When the session will expire
        /// </summary>
        public int? Ttl { get; set; }
        /// <summary>
        /// The new status of the resource
        /// </summary>
        public SessionResource.StatusEnum Status { get; set; }
        /// <summary>
        /// An experimental flag that instructs Proxy to return 400 instead of 200 when it detects that conflicts would result from re-open requests.
        /// </summary>
        public bool? FailOnParticipantConflict { get; set; }

        /// <summary>
        /// Construct a new UpdateSessionOptions
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the Service to update the resource from </param>
        /// <param name="pathSid"> The unique string that identifies the resource </param>
        public UpdateSessionOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (DateExpiry != null)
            {
                p.Add(new KeyValuePair<string, string>("DateExpiry", Serializers.DateTimeIso8601(DateExpiry)));
            }

            if (Ttl != null)
            {
                p.Add(new KeyValuePair<string, string>("Ttl", Ttl.ToString()));
            }

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }

            if (FailOnParticipantConflict != null)
            {
                p.Add(new KeyValuePair<string, string>("FailOnParticipantConflict", FailOnParticipantConflict.Value.ToString().ToLower()));
            }

            return p;
        }
    }

}