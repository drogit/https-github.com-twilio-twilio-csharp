/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Preview.TrustedComms
{

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// Brands a Call without actually placing it. Useful for cases when the Customer wants to initiate the call themselves
    /// right after calling this endpoint. This can be used also through a TwiML using `<Brand callerId="+1500123"
    /// callReason="This is the call reason" callSid="CAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">+1500456</Brand>`, and right after
    /// doing `<Dial callerId="+1500123">+1500456</Dial>`
    /// </summary>
    public class CreateBrandedCallOptions : IOptions<BrandedCallResource>
    {
        /// <summary>
        /// Twilio number from which to brand the call
        /// </summary>
        public string From { get; }
        /// <summary>
        /// The terminating Phone Number
        /// </summary>
        public string To { get; }
        /// <summary>
        /// The business reason for this phone call
        /// </summary>
        public string Reason { get; }
        /// <summary>
        /// The Call sid this Branded Call should link to
        /// </summary>
        public string CallSid { get; set; }

        /// <summary>
        /// Construct a new CreateBrandedCallOptions
        /// </summary>
        /// <param name="from"> Twilio number from which to brand the call </param>
        /// <param name="to"> The terminating Phone Number </param>
        /// <param name="reason"> The business reason for this phone call </param>
        public CreateBrandedCallOptions(string from, string to, string reason)
        {
            From = from;
            To = to;
            Reason = reason;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (From != null)
            {
                p.Add(new KeyValuePair<string, string>("From", From));
            }

            if (To != null)
            {
                p.Add(new KeyValuePair<string, string>("To", To));
            }

            if (Reason != null)
            {
                p.Add(new KeyValuePair<string, string>("Reason", Reason));
            }

            if (CallSid != null)
            {
                p.Add(new KeyValuePair<string, string>("CallSid", CallSid.ToString()));
            }

            return p;
        }
    }

}