/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Conversations.V1
{

    /// <summary>
    /// Fetch the global configuration of conversations on your account
    /// </summary>
    public class FetchConfigurationOptions : IOptions<ConfigurationResource>
    {
        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// Update the global configuration of conversations on your account
    /// </summary>
    public class UpdateConfigurationOptions : IOptions<ConfigurationResource>
    {
        /// <summary>
        /// The SID of the default Conversation Service that every new conversation will be associated with.
        /// </summary>
        public string DefaultChatServiceSid { get; set; }
        /// <summary>
        /// The SID of the default Messaging Service that every new conversation will be associated with.
        /// </summary>
        public string DefaultMessagingServiceSid { get; set; }
        /// <summary>
        /// Default ISO8601 duration when conversation will be switched to `inactive` state.
        /// </summary>
        public string DefaultInactiveTimer { get; set; }
        /// <summary>
        /// Default ISO8601 duration when conversation will be switched to `closed` state.
        /// </summary>
        public string DefaultClosedTimer { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (DefaultChatServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultChatServiceSid", DefaultChatServiceSid.ToString()));
            }

            if (DefaultMessagingServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultMessagingServiceSid", DefaultMessagingServiceSid.ToString()));
            }

            if (DefaultInactiveTimer != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultInactiveTimer", DefaultInactiveTimer));
            }

            if (DefaultClosedTimer != null)
            {
                p.Add(new KeyValuePair<string, string>("DefaultClosedTimer", DefaultClosedTimer));
            }

            return p;
        }
    }

}