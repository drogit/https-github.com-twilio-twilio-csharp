/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Conversations.V1.User
{

  /// <summary>
  /// Update a specific User Conversation.
  /// </summary>
  public class UpdateUserConversationOptions : IOptions<UserConversationResource>
  {
    /// <summary>
    /// The unique SID identifier of the User.
    /// </summary>
    public string PathUserSid { get; }
    /// <summary>
    /// The unique SID identifier of the Conversation.
    /// </summary>
    public string PathConversationSid { get; }
    /// <summary>
    /// The Notification Level of this User Conversation.
    /// </summary>
    public UserConversationResource.NotificationLevelEnum NotificationLevel { get; set; }
    /// <summary>
    /// The date of the last message read in conversation by the user.
    /// </summary>
    public DateTime? LastReadTimestamp { get; set; }
    /// <summary>
    /// The index of the last read Message.
    /// </summary>
    public int? LastReadMessageIndex { get; set; }

    /// <summary>
    /// Construct a new UpdateUserConversationOptions
    /// </summary>
    /// <param name="pathUserSid"> The unique SID identifier of the User. </param>
    /// <param name="pathConversationSid"> The unique SID identifier of the Conversation. </param>
    public UpdateUserConversationOptions(string pathUserSid, string pathConversationSid)
    {
      PathUserSid = pathUserSid;
      PathConversationSid = pathConversationSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (NotificationLevel != null)
      {
        p.Add(new KeyValuePair<string, string>("NotificationLevel", NotificationLevel.ToString()));
      }

      if (LastReadTimestamp != null)
      {
        p.Add(new KeyValuePair<string, string>("LastReadTimestamp", Serializers.DateTimeIso8601(LastReadTimestamp)));
      }

      if (LastReadMessageIndex != null)
      {
        p.Add(new KeyValuePair<string, string>("LastReadMessageIndex", LastReadMessageIndex.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// Delete a specific User Conversation.
  /// </summary>
  public class DeleteUserConversationOptions : IOptions<UserConversationResource>
  {
    /// <summary>
    /// The unique SID identifier of the User.
    /// </summary>
    public string PathUserSid { get; }
    /// <summary>
    /// The unique SID identifier of the Conversation.
    /// </summary>
    public string PathConversationSid { get; }

    /// <summary>
    /// Construct a new DeleteUserConversationOptions
    /// </summary>
    /// <param name="pathUserSid"> The unique SID identifier of the User. </param>
    /// <param name="pathConversationSid"> The unique SID identifier of the Conversation. </param>
    public DeleteUserConversationOptions(string pathUserSid, string pathConversationSid)
    {
      PathUserSid = pathUserSid;
      PathConversationSid = pathConversationSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

  /// <summary>
  /// Fetch a specific User Conversation.
  /// </summary>
  public class FetchUserConversationOptions : IOptions<UserConversationResource>
  {
    /// <summary>
    /// The unique SID identifier of the User.
    /// </summary>
    public string PathUserSid { get; }
    /// <summary>
    /// The unique SID identifier of the Conversation.
    /// </summary>
    public string PathConversationSid { get; }

    /// <summary>
    /// Construct a new FetchUserConversationOptions
    /// </summary>
    /// <param name="pathUserSid"> The unique SID identifier of the User. </param>
    /// <param name="pathConversationSid"> The unique SID identifier of the Conversation. </param>
    public FetchUserConversationOptions(string pathUserSid, string pathConversationSid)
    {
      PathUserSid = pathUserSid;
      PathConversationSid = pathConversationSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

  /// <summary>
  /// Retrieve a list of all User Conversations for the User.
  /// </summary>
  public class ReadUserConversationOptions : ReadOptions<UserConversationResource>
  {
    /// <summary>
    /// The unique SID identifier of the User.
    /// </summary>
    public string PathUserSid { get; }

    /// <summary>
    /// Construct a new ReadUserConversationOptions
    /// </summary>
    /// <param name="pathUserSid"> The unique SID identifier of the User. </param>
    public ReadUserConversationOptions(string pathUserSid)
    {
      PathUserSid = pathUserSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public override List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (PageSize != null)
      {
        p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
      }

      return p;
    }
  }

}