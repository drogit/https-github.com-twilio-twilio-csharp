/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Conversations.V1
{

    /// <summary>
    /// Retrieve a list of address configurations for an account
    /// </summary>
    public class ReadAddressConfigurationOptions : ReadOptions<AddressConfigurationResource>
    {
        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// Fetch an address configuration
    /// </summary>
    public class FetchAddressConfigurationOptions : IOptions<AddressConfigurationResource>
    {
        /// <summary>
        /// The SID or Address of the Configuration.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchAddressConfigurationOptions
        /// </summary>
        /// <param name="pathSid"> The SID or Address of the Configuration. </param>
        public FetchAddressConfigurationOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// Create a new address configuration
    /// </summary>
    public class CreateAddressConfigurationOptions : IOptions<AddressConfigurationResource>
    {
        /// <summary>
        /// Type of Address.
        /// </summary>
        public AddressConfigurationResource.TypeEnum Type { get; }
        /// <summary>
        /// The unique address to be configured.
        /// </summary>
        public string Address { get; }
        /// <summary>
        /// The human-readable name of this configuration.
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// Enable/Disable auto-creating conversations for messages to this address
        /// </summary>
        public bool? AutoCreationEnabled { get; set; }
        /// <summary>
        /// Type of Auto Creation.
        /// </summary>
        public AddressConfigurationResource.AutoCreationTypeEnum AutoCreationType { get; set; }
        /// <summary>
        /// Conversation Service for the auto-created conversation.
        /// </summary>
        public string AutoCreationConversationServiceSid { get; set; }
        /// <summary>
        /// For type `webhook`, the url for the webhook request.
        /// </summary>
        public string AutoCreationWebhookUrl { get; set; }
        /// <summary>
        /// For type `webhook`, the HTTP method to be used when sending a webhook request.
        /// </summary>
        public AddressConfigurationResource.MethodEnum AutoCreationWebhookMethod { get; set; }
        /// <summary>
        /// The list of events, firing webhook event for this Conversation.
        /// </summary>
        public List<string> AutoCreationWebhookFilters { get; set; }
        /// <summary>
        /// For type `studio`, the studio flow SID, where the webhook should be sent to.
        /// </summary>
        public string AutoCreationStudioFlowSid { get; set; }
        /// <summary>
        /// For type `studio`, number of times to retry the webhook request
        /// </summary>
        public int? AutoCreationStudioRetryCount { get; set; }

        /// <summary>
        /// Construct a new CreateAddressConfigurationOptions
        /// </summary>
        /// <param name="type"> Type of Address. </param>
        /// <param name="address"> The unique address to be configured. </param>
        public CreateAddressConfigurationOptions(AddressConfigurationResource.TypeEnum type, string address)
        {
            Type = type;
            Address = address;
            AutoCreationWebhookFilters = new List<string>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Type != null)
            {
                p.Add(new KeyValuePair<string, string>("Type", Type.ToString()));
            }

            if (Address != null)
            {
                p.Add(new KeyValuePair<string, string>("Address", Address));
            }

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (AutoCreationEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.Enabled", AutoCreationEnabled.Value.ToString().ToLower()));
            }

            if (AutoCreationType != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.Type", AutoCreationType.ToString()));
            }

            if (AutoCreationConversationServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.ConversationServiceSid", AutoCreationConversationServiceSid.ToString()));
            }

            if (AutoCreationWebhookUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.WebhookUrl", AutoCreationWebhookUrl));
            }

            if (AutoCreationWebhookMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.WebhookMethod", AutoCreationWebhookMethod.ToString()));
            }

            if (AutoCreationWebhookFilters != null)
            {
                p.AddRange(AutoCreationWebhookFilters.Select(prop => new KeyValuePair<string, string>("AutoCreation.WebhookFilters", prop)));
            }

            if (AutoCreationStudioFlowSid != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.StudioFlowSid", AutoCreationStudioFlowSid.ToString()));
            }

            if (AutoCreationStudioRetryCount != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.StudioRetryCount", AutoCreationStudioRetryCount.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// Update an existing address configuration
    /// </summary>
    public class UpdateAddressConfigurationOptions : IOptions<AddressConfigurationResource>
    {
        /// <summary>
        /// The SID or Address of the Configuration.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// The human-readable name of this configuration.
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// Enable/Disable auto-creating conversations for messages to this address
        /// </summary>
        public bool? AutoCreationEnabled { get; set; }
        /// <summary>
        /// Type of Auto Creation.
        /// </summary>
        public AddressConfigurationResource.AutoCreationTypeEnum AutoCreationType { get; set; }
        /// <summary>
        /// Conversation Service for the auto-created conversation.
        /// </summary>
        public string AutoCreationConversationServiceSid { get; set; }
        /// <summary>
        /// For type `webhook`, the url for the webhook request.
        /// </summary>
        public string AutoCreationWebhookUrl { get; set; }
        /// <summary>
        /// For type `webhook`, the HTTP method to be used when sending a webhook request.
        /// </summary>
        public AddressConfigurationResource.MethodEnum AutoCreationWebhookMethod { get; set; }
        /// <summary>
        /// The list of events, firing webhook event for this Conversation.
        /// </summary>
        public List<string> AutoCreationWebhookFilters { get; set; }
        /// <summary>
        /// For type `studio`, the studio flow SID, where the webhook should be sent to.
        /// </summary>
        public string AutoCreationStudioFlowSid { get; set; }
        /// <summary>
        /// For type `studio`, number of times to retry the webhook request
        /// </summary>
        public int? AutoCreationStudioRetryCount { get; set; }

        /// <summary>
        /// Construct a new UpdateAddressConfigurationOptions
        /// </summary>
        /// <param name="pathSid"> The SID or Address of the Configuration. </param>
        public UpdateAddressConfigurationOptions(string pathSid)
        {
            PathSid = pathSid;
            AutoCreationWebhookFilters = new List<string>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (AutoCreationEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.Enabled", AutoCreationEnabled.Value.ToString().ToLower()));
            }

            if (AutoCreationType != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.Type", AutoCreationType.ToString()));
            }

            if (AutoCreationConversationServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.ConversationServiceSid", AutoCreationConversationServiceSid.ToString()));
            }

            if (AutoCreationWebhookUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.WebhookUrl", AutoCreationWebhookUrl));
            }

            if (AutoCreationWebhookMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.WebhookMethod", AutoCreationWebhookMethod.ToString()));
            }

            if (AutoCreationWebhookFilters != null)
            {
                p.AddRange(AutoCreationWebhookFilters.Select(prop => new KeyValuePair<string, string>("AutoCreation.WebhookFilters", prop)));
            }

            if (AutoCreationStudioFlowSid != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.StudioFlowSid", AutoCreationStudioFlowSid.ToString()));
            }

            if (AutoCreationStudioRetryCount != null)
            {
                p.Add(new KeyValuePair<string, string>("AutoCreation.StudioRetryCount", AutoCreationStudioRetryCount.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// Remove an existing address configuration
    /// </summary>
    public class DeleteAddressConfigurationOptions : IOptions<AddressConfigurationResource>
    {
        /// <summary>
        /// The SID or Address of the Configuration.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteAddressConfigurationOptions
        /// </summary>
        /// <param name="pathSid"> The SID or Address of the Configuration. </param>
        public DeleteAddressConfigurationOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}