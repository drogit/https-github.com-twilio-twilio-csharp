/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Video.V1
{

  /// <summary>
  /// Returns a single CompositionHook resource identified by a CompositionHook SID.
  /// </summary>
  public class FetchCompositionHookOptions : IOptions<CompositionHookResource>
  {
    /// <summary>
    /// The SID that identifies the resource to fetch
    /// </summary>
    public string PathSid { get; }

    /// <summary>
    /// Construct a new FetchCompositionHookOptions
    /// </summary>
    /// <param name="pathSid"> The SID that identifies the resource to fetch </param>
    public FetchCompositionHookOptions(string pathSid)
    {
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

  /// <summary>
  /// List of all Recording CompositionHook resources.
  /// </summary>
  public class ReadCompositionHookOptions : ReadOptions<CompositionHookResource>
  {
    /// <summary>
    /// Read only CompositionHook resources with an enabled value that matches this parameter
    /// </summary>
    public bool? Enabled { get; set; }
    /// <summary>
    /// Read only CompositionHook resources created on or after this ISO 8601 datetime with time zone
    /// </summary>
    public DateTime? DateCreatedAfter { get; set; }
    /// <summary>
    /// Read only CompositionHook resources created before this ISO 8601 datetime with time zone
    /// </summary>
    public DateTime? DateCreatedBefore { get; set; }
    /// <summary>
    /// Read only CompositionHook resources with friendly names that match this string
    /// </summary>
    public string FriendlyName { get; set; }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public override List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (Enabled != null)
      {
        p.Add(new KeyValuePair<string, string>("Enabled", Enabled.Value.ToString().ToLower()));
      }

      if (DateCreatedAfter != null)
      {
        p.Add(new KeyValuePair<string, string>("DateCreatedAfter", Serializers.DateTimeIso8601(DateCreatedAfter)));
      }

      if (DateCreatedBefore != null)
      {
        p.Add(new KeyValuePair<string, string>("DateCreatedBefore", Serializers.DateTimeIso8601(DateCreatedBefore)));
      }

      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      if (PageSize != null)
      {
        p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// Delete a Recording CompositionHook resource identified by a `CompositionHook SID`.
  /// </summary>
  public class DeleteCompositionHookOptions : IOptions<CompositionHookResource>
  {
    /// <summary>
    /// The SID that identifies the resource to delete
    /// </summary>
    public string PathSid { get; }

    /// <summary>
    /// Construct a new DeleteCompositionHookOptions
    /// </summary>
    /// <param name="pathSid"> The SID that identifies the resource to delete </param>
    public DeleteCompositionHookOptions(string pathSid)
    {
      PathSid = pathSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

  /// <summary>
  /// CreateCompositionHookOptions
  /// </summary>
  public class CreateCompositionHookOptions : IOptions<CompositionHookResource>
  {
    /// <summary>
    /// A unique string to describe the resource
    /// </summary>
    public string FriendlyName { get; }
    /// <summary>
    /// Whether the composition hook is active
    /// </summary>
    public bool? Enabled { get; set; }
    /// <summary>
    /// An object that describes the video layout of the composition hook
    /// </summary>
    public object VideoLayout { get; set; }
    /// <summary>
    /// An array of track names from the same group room to merge
    /// </summary>
    public List<string> AudioSources { get; set; }
    /// <summary>
    /// An array of track names to exclude
    /// </summary>
    public List<string> AudioSourcesExcluded { get; set; }
    /// <summary>
    /// A string that describes the rows (width) and columns (height) of the generated composed video in pixels
    /// </summary>
    public string Resolution { get; set; }
    /// <summary>
    /// The container format of the media files used by the compositions created by the composition hook
    /// </summary>
    public CompositionHookResource.FormatEnum Format { get; set; }
    /// <summary>
    /// The URL we should call to send status information to your application
    /// </summary>
    public Uri StatusCallback { get; set; }
    /// <summary>
    /// The HTTP method we should use to call status_callback
    /// </summary>
    public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }
    /// <summary>
    /// Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook
    /// </summary>
    public bool? Trim { get; set; }

    /// <summary>
    /// Construct a new CreateCompositionHookOptions
    /// </summary>
    /// <param name="friendlyName"> A unique string to describe the resource </param>
    public CreateCompositionHookOptions(string friendlyName)
    {
      FriendlyName = friendlyName;
      AudioSources = new List<string>();
      AudioSourcesExcluded = new List<string>();
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      if (Enabled != null)
      {
        p.Add(new KeyValuePair<string, string>("Enabled", Enabled.Value.ToString().ToLower()));
      }

      if (VideoLayout != null)
      {
        p.Add(new KeyValuePair<string, string>("VideoLayout", Serializers.JsonObject(VideoLayout)));
      }

      if (AudioSources != null)
      {
        p.AddRange(AudioSources.Select(prop => new KeyValuePair<string, string>("AudioSources", prop)));
      }

      if (AudioSourcesExcluded != null)
      {
        p.AddRange(AudioSourcesExcluded.Select(prop => new KeyValuePair<string, string>("AudioSourcesExcluded", prop)));
      }

      if (Resolution != null)
      {
        p.Add(new KeyValuePair<string, string>("Resolution", Resolution));
      }

      if (Format != null)
      {
        p.Add(new KeyValuePair<string, string>("Format", Format.ToString()));
      }

      if (StatusCallback != null)
      {
        p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
      }

      if (StatusCallbackMethod != null)
      {
        p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
      }

      if (Trim != null)
      {
        p.Add(new KeyValuePair<string, string>("Trim", Trim.Value.ToString().ToLower()));
      }

      return p;
    }
  }

  /// <summary>
  /// UpdateCompositionHookOptions
  /// </summary>
  public class UpdateCompositionHookOptions : IOptions<CompositionHookResource>
  {
    /// <summary>
    /// The SID that identifies the resource to update
    /// </summary>
    public string PathSid { get; }
    /// <summary>
    /// A unique string to describe the resource
    /// </summary>
    public string FriendlyName { get; }
    /// <summary>
    /// Whether the composition hook is active
    /// </summary>
    public bool? Enabled { get; set; }
    /// <summary>
    /// A JSON object that describes the video layout of the composition hook
    /// </summary>
    public object VideoLayout { get; set; }
    /// <summary>
    /// An array of track names from the same group room to merge
    /// </summary>
    public List<string> AudioSources { get; set; }
    /// <summary>
    /// An array of track names to exclude
    /// </summary>
    public List<string> AudioSourcesExcluded { get; set; }
    /// <summary>
    /// Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook
    /// </summary>
    public bool? Trim { get; set; }
    /// <summary>
    /// The container format of the media files used by the compositions created by the composition hook
    /// </summary>
    public CompositionHookResource.FormatEnum Format { get; set; }
    /// <summary>
    /// A string that describes the columns (width) and rows (height) of the generated composed video in pixels
    /// </summary>
    public string Resolution { get; set; }
    /// <summary>
    /// The URL we should call to send status information to your application
    /// </summary>
    public Uri StatusCallback { get; set; }
    /// <summary>
    /// The HTTP method we should use to call status_callback
    /// </summary>
    public Twilio.Http.HttpMethod StatusCallbackMethod { get; set; }

    /// <summary>
    /// Construct a new UpdateCompositionHookOptions
    /// </summary>
    /// <param name="pathSid"> The SID that identifies the resource to update </param>
    /// <param name="friendlyName"> A unique string to describe the resource </param>
    public UpdateCompositionHookOptions(string pathSid, string friendlyName)
    {
      PathSid = pathSid;
      FriendlyName = friendlyName;
      AudioSources = new List<string>();
      AudioSourcesExcluded = new List<string>();
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      if (Enabled != null)
      {
        p.Add(new KeyValuePair<string, string>("Enabled", Enabled.Value.ToString().ToLower()));
      }

      if (VideoLayout != null)
      {
        p.Add(new KeyValuePair<string, string>("VideoLayout", Serializers.JsonObject(VideoLayout)));
      }

      if (AudioSources != null)
      {
        p.AddRange(AudioSources.Select(prop => new KeyValuePair<string, string>("AudioSources", prop)));
      }

      if (AudioSourcesExcluded != null)
      {
        p.AddRange(AudioSourcesExcluded.Select(prop => new KeyValuePair<string, string>("AudioSourcesExcluded", prop)));
      }

      if (Trim != null)
      {
        p.Add(new KeyValuePair<string, string>("Trim", Trim.Value.ToString().ToLower()));
      }

      if (Format != null)
      {
        p.Add(new KeyValuePair<string, string>("Format", Format.ToString()));
      }

      if (Resolution != null)
      {
        p.Add(new KeyValuePair<string, string>("Resolution", Resolution));
      }

      if (StatusCallback != null)
      {
        p.Add(new KeyValuePair<string, string>("StatusCallback", Serializers.Url(StatusCallback)));
      }

      if (StatusCallbackMethod != null)
      {
        p.Add(new KeyValuePair<string, string>("StatusCallbackMethod", StatusCallbackMethod.ToString()));
      }

      return p;
    }
  }

}