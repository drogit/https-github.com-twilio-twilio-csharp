/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Video.V1
{

  /// <summary>
  /// FetchRecordingSettingsOptions
  /// </summary>
  public class FetchRecordingSettingsOptions : IOptions<RecordingSettingsResource>
  {
    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

  /// <summary>
  /// CreateRecordingSettingsOptions
  /// </summary>
  public class CreateRecordingSettingsOptions : IOptions<RecordingSettingsResource>
  {
    /// <summary>
    /// A string to describe the resource
    /// </summary>
    public string FriendlyName { get; }
    /// <summary>
    /// The SID of the stored Credential resource
    /// </summary>
    public string AwsCredentialsSid { get; set; }
    /// <summary>
    /// The SID of the Public Key resource to use for encryption
    /// </summary>
    public string EncryptionKeySid { get; set; }
    /// <summary>
    /// The URL of the AWS S3 bucket where the recordings should be stored
    /// </summary>
    public Uri AwsS3Url { get; set; }
    /// <summary>
    /// Whether all recordings should be written to the aws_s3_url
    /// </summary>
    public bool? AwsStorageEnabled { get; set; }
    /// <summary>
    /// Whether all recordings should be stored in an encrypted form
    /// </summary>
    public bool? EncryptionEnabled { get; set; }

    /// <summary>
    /// Construct a new CreateRecordingSettingsOptions
    /// </summary>
    /// <param name="friendlyName"> A string to describe the resource </param>
    public CreateRecordingSettingsOptions(string friendlyName)
    {
      FriendlyName = friendlyName;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (FriendlyName != null)
      {
        p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
      }

      if (AwsCredentialsSid != null)
      {
        p.Add(new KeyValuePair<string, string>("AwsCredentialsSid", AwsCredentialsSid.ToString()));
      }

      if (EncryptionKeySid != null)
      {
        p.Add(new KeyValuePair<string, string>("EncryptionKeySid", EncryptionKeySid.ToString()));
      }

      if (AwsS3Url != null)
      {
        p.Add(new KeyValuePair<string, string>("AwsS3Url", Serializers.Url(AwsS3Url)));
      }

      if (AwsStorageEnabled != null)
      {
        p.Add(new KeyValuePair<string, string>("AwsStorageEnabled", AwsStorageEnabled.Value.ToString().ToLower()));
      }

      if (EncryptionEnabled != null)
      {
        p.Add(new KeyValuePair<string, string>("EncryptionEnabled", EncryptionEnabled.Value.ToString().ToLower()));
      }

      return p;
    }
  }

}