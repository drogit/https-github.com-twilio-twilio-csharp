/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
/// currently do not have developer preview access, please contact help@twilio.com.
///
/// DeploymentResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Serverless.V1.Service.Environment
{

    public class DeploymentResource : Resource
    {
        private static Request BuildReadRequest(ReadDeploymentOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Serverless,
                "/v1/Services/" + options.PathServiceSid + "/Environments/" + options.PathEnvironmentSid + "/Deployments",
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Retrieve a list of all deployments.
        /// </summary>
        /// <param name="options"> Read Deployment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Deployment </returns>
        public static ResourceSet<DeploymentResource> Read(ReadDeploymentOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<DeploymentResource>.FromJson("deployments", response.Content);
            return new ResourceSet<DeploymentResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a list of all deployments.
        /// </summary>
        /// <param name="options"> Read Deployment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Deployment </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<DeploymentResource>> ReadAsync(ReadDeploymentOptions options,
                                                                                                   ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<DeploymentResource>.FromJson("deployments", response.Content);
            return new ResourceSet<DeploymentResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// Retrieve a list of all deployments.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the Service to read the Deployment resources from </param>
        /// <param name="pathEnvironmentSid"> The SID of the environment used by the Deployment resources to read </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Deployment </returns>
        public static ResourceSet<DeploymentResource> Read(string pathServiceSid,
                                                           string pathEnvironmentSid,
                                                           int? pageSize = null,
                                                           long? limit = null,
                                                           ITwilioRestClient client = null)
        {
            var options = new ReadDeploymentOptions(pathServiceSid, pathEnvironmentSid){PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a list of all deployments.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the Service to read the Deployment resources from </param>
        /// <param name="pathEnvironmentSid"> The SID of the environment used by the Deployment resources to read </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Deployment </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<DeploymentResource>> ReadAsync(string pathServiceSid,
                                                                                                   string pathEnvironmentSid,
                                                                                                   int? pageSize = null,
                                                                                                   long? limit = null,
                                                                                                   ITwilioRestClient client = null)
        {
            var options = new ReadDeploymentOptions(pathServiceSid, pathEnvironmentSid){PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<DeploymentResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<DeploymentResource>.FromJson("deployments", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<DeploymentResource> NextPage(Page<DeploymentResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Serverless)
            );

            var response = client.Request(request);
            return Page<DeploymentResource>.FromJson("deployments", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<DeploymentResource> PreviousPage(Page<DeploymentResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Serverless)
            );

            var response = client.Request(request);
            return Page<DeploymentResource>.FromJson("deployments", response.Content);
        }

        private static Request BuildFetchRequest(FetchDeploymentOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Serverless,
                "/v1/Services/" + options.PathServiceSid + "/Environments/" + options.PathEnvironmentSid + "/Deployments/" + options.PathSid + "",
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Retrieve a specific deployment.
        /// </summary>
        /// <param name="options"> Fetch Deployment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Deployment </returns>
        public static DeploymentResource Fetch(FetchDeploymentOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a specific deployment.
        /// </summary>
        /// <param name="options"> Fetch Deployment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Deployment </returns>
        public static async System.Threading.Tasks.Task<DeploymentResource> FetchAsync(FetchDeploymentOptions options,
                                                                                       ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Retrieve a specific deployment.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the Service to fetch the Deployment resource from </param>
        /// <param name="pathEnvironmentSid"> The SID of the environment used by the Deployment to fetch </param>
        /// <param name="pathSid"> The SID that identifies the Deployment resource to fetch </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Deployment </returns>
        public static DeploymentResource Fetch(string pathServiceSid,
                                               string pathEnvironmentSid,
                                               string pathSid,
                                               ITwilioRestClient client = null)
        {
            var options = new FetchDeploymentOptions(pathServiceSid, pathEnvironmentSid, pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a specific deployment.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the Service to fetch the Deployment resource from </param>
        /// <param name="pathEnvironmentSid"> The SID of the environment used by the Deployment to fetch </param>
        /// <param name="pathSid"> The SID that identifies the Deployment resource to fetch </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Deployment </returns>
        public static async System.Threading.Tasks.Task<DeploymentResource> FetchAsync(string pathServiceSid,
                                                                                       string pathEnvironmentSid,
                                                                                       string pathSid,
                                                                                       ITwilioRestClient client = null)
        {
            var options = new FetchDeploymentOptions(pathServiceSid, pathEnvironmentSid, pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildCreateRequest(CreateDeploymentOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Serverless,
                "/v1/Services/" + options.PathServiceSid + "/Environments/" + options.PathEnvironmentSid + "/Deployments",
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// Create a new deployment.
        /// </summary>
        /// <param name="options"> Create Deployment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Deployment </returns>
        public static DeploymentResource Create(CreateDeploymentOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Create a new deployment.
        /// </summary>
        /// <param name="options"> Create Deployment parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Deployment </returns>
        public static async System.Threading.Tasks.Task<DeploymentResource> CreateAsync(CreateDeploymentOptions options,
                                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Create a new deployment.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the Service to create the Deployment resource under </param>
        /// <param name="pathEnvironmentSid"> The SID of the environment for the deployment </param>
        /// <param name="buildSid"> The SID of the build for the deployment </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Deployment </returns>
        public static DeploymentResource Create(string pathServiceSid,
                                                string pathEnvironmentSid,
                                                string buildSid = null,
                                                ITwilioRestClient client = null)
        {
            var options = new CreateDeploymentOptions(pathServiceSid, pathEnvironmentSid){BuildSid = buildSid};
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// Create a new deployment.
        /// </summary>
        /// <param name="pathServiceSid"> The SID of the Service to create the Deployment resource under </param>
        /// <param name="pathEnvironmentSid"> The SID of the environment for the deployment </param>
        /// <param name="buildSid"> The SID of the build for the deployment </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Deployment </returns>
        public static async System.Threading.Tasks.Task<DeploymentResource> CreateAsync(string pathServiceSid,
                                                                                        string pathEnvironmentSid,
                                                                                        string buildSid = null,
                                                                                        ITwilioRestClient client = null)
        {
            var options = new CreateDeploymentOptions(pathServiceSid, pathEnvironmentSid){BuildSid = buildSid};
            return await CreateAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a DeploymentResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> DeploymentResource object represented by the provided JSON </returns>
        public static DeploymentResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<DeploymentResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The unique string that identifies the Deployment resource
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The SID of the Account that created the Deployment resource
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The SID of the Service that the Deployment resource is associated with
        /// </summary>
        [JsonProperty("service_sid")]
        public string ServiceSid { get; private set; }
        /// <summary>
        /// The SID of the environment for the deployment
        /// </summary>
        [JsonProperty("environment_sid")]
        public string EnvironmentSid { get; private set; }
        /// <summary>
        /// The SID of the build for the deployment
        /// </summary>
        [JsonProperty("build_sid")]
        public string BuildSid { get; private set; }
        /// <summary>
        /// The ISO 8601 date and time in GMT when the Deployment resource was created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The ISO 8601 date and time in GMT when the Deployment resource was last updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// The absolute URL of the Deployment resource
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private DeploymentResource()
        {

        }
    }

}