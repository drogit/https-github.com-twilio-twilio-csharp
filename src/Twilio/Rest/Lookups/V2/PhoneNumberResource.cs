/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
///
/// PhoneNumberResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Lookups.V2
{

    public class PhoneNumberResource : Resource
    {
        public sealed class TypeEnum : StringEnum
        {
            private TypeEnum(string value) : base(value) {}
            public TypeEnum() {}
            public static implicit operator TypeEnum(string value)
            {
                return new TypeEnum(value);
            }

            public static readonly TypeEnum Landline = new TypeEnum("landline");
            public static readonly TypeEnum Mobile = new TypeEnum("mobile");
            public static readonly TypeEnum Voip = new TypeEnum("voip");
        }

        public sealed class ValidationErrorEnum : StringEnum
        {
            private ValidationErrorEnum(string value) : base(value) {}
            public ValidationErrorEnum() {}
            public static implicit operator ValidationErrorEnum(string value)
            {
                return new ValidationErrorEnum(value);
            }

            public static readonly ValidationErrorEnum TooShort = new ValidationErrorEnum("TOO_SHORT");
            public static readonly ValidationErrorEnum TooLong = new ValidationErrorEnum("TOO_LONG");
            public static readonly ValidationErrorEnum InvalidButPossible = new ValidationErrorEnum("INVALID_BUT_POSSIBLE");
            public static readonly ValidationErrorEnum InvalidCountryCode = new ValidationErrorEnum("INVALID_COUNTRY_CODE");
            public static readonly ValidationErrorEnum InvalidLength = new ValidationErrorEnum("INVALID_LENGTH");
            public static readonly ValidationErrorEnum NotANumber = new ValidationErrorEnum("NOT_A_NUMBER");
        }

        private static Request BuildFetchRequest(FetchPhoneNumberOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Lookups,
                "/v2/PhoneNumbers/" + options.PathPhoneNumber + "",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch PhoneNumber parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of PhoneNumber </returns>
        public static PhoneNumberResource Fetch(FetchPhoneNumberOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="options"> Fetch PhoneNumber parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of PhoneNumber </returns>
        public static async System.Threading.Tasks.Task<PhoneNumberResource> FetchAsync(FetchPhoneNumberOptions options,
                                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathPhoneNumber"> Phone number to lookup </param>
        /// <param name="fields"> Fields to return </param>
        /// <param name="countryCode"> Country code for national phone number lookups </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of PhoneNumber </returns>
        public static PhoneNumberResource Fetch(string pathPhoneNumber,
                                                string fields = null,
                                                string countryCode = null,
                                                ITwilioRestClient client = null)
        {
            var options = new FetchPhoneNumberOptions(pathPhoneNumber){Fields = fields, CountryCode = countryCode};
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// fetch
        /// </summary>
        /// <param name="pathPhoneNumber"> Phone number to lookup </param>
        /// <param name="fields"> Fields to return </param>
        /// <param name="countryCode"> Country code for national phone number lookups </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of PhoneNumber </returns>
        public static async System.Threading.Tasks.Task<PhoneNumberResource> FetchAsync(string pathPhoneNumber,
                                                                                        string fields = null,
                                                                                        string countryCode = null,
                                                                                        ITwilioRestClient client = null)
        {
            var options = new FetchPhoneNumberOptions(pathPhoneNumber){Fields = fields, CountryCode = countryCode};
            return await FetchAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a PhoneNumberResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> PhoneNumberResource object represented by the provided JSON </returns>
        public static PhoneNumberResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<PhoneNumberResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// International dialing prefix
        /// </summary>
        [JsonProperty("calling_country_code")]
        public string CallingCountryCode { get; private set; }
        /// <summary>
        /// Phone number's ISO country code
        /// </summary>
        [JsonProperty("country_code")]
        public string CountryCode { get; private set; }
        /// <summary>
        /// Phone number in E.164 format
        /// </summary>
        [JsonProperty("phone_number")]
        [JsonConverter(typeof(PhoneNumberConverter))]
        public Types.PhoneNumber PhoneNumber { get; private set; }
        /// <summary>
        /// Phone number in national format
        /// </summary>
        [JsonProperty("national_format")]
        public string NationalFormat { get; private set; }
        /// <summary>
        /// Boolean which indicates if the phone number is valid
        /// </summary>
        [JsonProperty("valid")]
        public bool? Valid { get; private set; }
        /// <summary>
        /// Contains reasons why a phone number is invalid
        /// </summary>
        [JsonProperty("validation_errors")]
        [JsonConverter(typeof(StringEnumConverter))]
        public List<PhoneNumberResource.ValidationErrorEnum> ValidationErrors { get; private set; }
        /// <summary>
        /// An object that contains caller name information
        /// </summary>
        [JsonProperty("caller_name")]
        public object CallerName { get; private set; }
        /// <summary>
        /// An object that contains SIM swap information
        /// </summary>
        [JsonProperty("sim_swap")]
        public object SimSwap { get; private set; }
        /// <summary>
        /// An object that contains call forwarding status information
        /// </summary>
        [JsonProperty("call_forwarding")]
        public object CallForwarding { get; private set; }
        /// <summary>
        /// An object that contains live activity information
        /// </summary>
        [JsonProperty("live_activity")]
        public object LiveActivity { get; private set; }
        /// <summary>
        /// An object that contains line type information
        /// </summary>
        [JsonProperty("line_type_intelligence")]
        public object LineTypeIntelligence { get; private set; }
        /// <summary>
        /// The absolute URL of the resource
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private PhoneNumberResource()
        {

        }
    }

}