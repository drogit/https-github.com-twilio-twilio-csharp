/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Chat.V3
{

    /// <summary>
    /// Update a specific Channel.
    /// </summary>
    public class UpdateChannelOptions : IOptions<ChannelResource>
    {
        /// <summary>
        /// Service Sid.
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// A string that uniquely identifies this Channel.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// The Type for this Channel to migrate to.
        /// </summary>
        public ChannelResource.ChannelTypeEnum Type { get; set; }
        /// <summary>
        /// The unique ID of the Messaging Service this channel belongs to.
        /// </summary>
        public string MessagingServiceSid { get; set; }
        /// <summary>
        /// The X-Twilio-Webhook-Enabled HTTP request header
        /// </summary>
        public ChannelResource.WebhookEnabledTypeEnum XTwilioWebhookEnabled { get; set; }

        /// <summary>
        /// Construct a new UpdateChannelOptions
        /// </summary>
        /// <param name="pathServiceSid"> Service Sid. </param>
        /// <param name="pathSid"> A string that uniquely identifies this Channel. </param>
        public UpdateChannelOptions(string pathServiceSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Type != null)
            {
                p.Add(new KeyValuePair<string, string>("Type", Type.ToString()));
            }

            if (MessagingServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("MessagingServiceSid", MessagingServiceSid.ToString()));
            }

            return p;
        }

        /// <summary>
        /// Generate the necessary header parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetHeaderParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (XTwilioWebhookEnabled != null)
            {
                p.Add(new KeyValuePair<string, string>("X-Twilio-Webhook-Enabled", XTwilioWebhookEnabled.ToString()));
            }

            return p;
        }
    }

}