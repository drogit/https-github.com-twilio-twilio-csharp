/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// DeactivationsResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Messaging.V1
{

    public class DeactivationsResource : Resource
    {
        private static Request BuildFetchRequest(FetchDeactivationsOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Messaging,
                "/v1/Deactivations",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Fetch a list of all United States numbers that have been deactivated on a specific date.
        /// </summary>
        /// <param name="options"> Fetch Deactivations parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Deactivations </returns>
        public static DeactivationsResource Fetch(FetchDeactivationsOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Fetch a list of all United States numbers that have been deactivated on a specific date.
        /// </summary>
        /// <param name="options"> Fetch Deactivations parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Deactivations </returns>
        public static async System.Threading.Tasks.Task<DeactivationsResource> FetchAsync(FetchDeactivationsOptions options,
                                                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Fetch a list of all United States numbers that have been deactivated on a specific date.
        /// </summary>
        /// <param name="date"> The date to retrieve deactivated numbers for. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Deactivations </returns>
        public static DeactivationsResource Fetch(DateTime? date = null, ITwilioRestClient client = null)
        {
            var options = new FetchDeactivationsOptions(){Date = date};
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Fetch a list of all United States numbers that have been deactivated on a specific date.
        /// </summary>
        /// <param name="date"> The date to retrieve deactivated numbers for. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Deactivations </returns>
        public static async System.Threading.Tasks.Task<DeactivationsResource> FetchAsync(DateTime? date = null,
                                                                                          ITwilioRestClient client = null)
        {
            var options = new FetchDeactivationsOptions(){Date = date};
            return await FetchAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a DeactivationsResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> DeactivationsResource object represented by the provided JSON </returns>
        public static DeactivationsResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<DeactivationsResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// Redirect url to the list of deactivated numbers.
        /// </summary>
        [JsonProperty("redirect_to")]
        public Uri RedirectTo { get; private set; }

        private DeactivationsResource()
        {

        }
    }

}