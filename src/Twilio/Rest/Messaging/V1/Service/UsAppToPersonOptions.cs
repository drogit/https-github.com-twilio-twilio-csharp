/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;
using System.Linq;



namespace Twilio.Rest.Messaging.V1.Service
{

    /// <summary> create </summary>
    public class CreateUsAppToPersonOptions : IOptions<UsAppToPersonResource>
    {
        
        ///<summary> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to create the resources from. </summary> 
        public string PathMessagingServiceSid { get; }

        ///<summary> A2P Brand Registration SID </summary> 
        public string BrandRegistrationSid { get; }

        ///<summary> A short description of what this SMS campaign does. </summary> 
        public string Description { get; }

        ///<summary> Message samples, at least 2 and up to 5 sample messages, <=1024 chars each. </summary> 
        public List<string> MessageSamples { get; }

        ///<summary> A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..] </summary> 
        public string UsAppToPersonUsecase { get; }

        ///<summary> Indicates that this SMS campaign will send messages that contain links. </summary> 
        public bool? HasEmbeddedLinks { get; }

        ///<summary> Indicates that this SMS campaign will send messages that contain phone numbers. </summary> 
        public bool? HasEmbeddedPhone { get; }

        ///<summary> Description of how end users opt-in to the SMS campaign, therefore giving consent to receive messages. </summary> 
        public string MessageFlow { get; set; }

        ///<summary> The message that will be sent to the user when they opt in to the SMS campaign. </summary> 
        public string OptInMessage { get; set; }

        ///<summary> The message that will be sent to the user when they opt out of the SMS campaign. </summary> 
        public string OptOutMessage { get; set; }

        ///<summary> The message that will be sent to the user when they request help for the SMS campaign. </summary> 
        public string HelpMessage { get; set; }

        ///<summary> The keywords that will be used to opt in to the SMS campaign. </summary> 
        public List<string> OptInKeywords { get; set; }

        ///<summary> The keywords that will be used to opt out of the SMS campaign. </summary> 
        public List<string> OptOutKeywords { get; set; }

        ///<summary> The keywords that will be used to request help for the SMS campaign. </summary> 
        public List<string> HelpKeywords { get; set; }


        /// <summary> Construct a new CreateUsAppToPersonOptions </summary>
        /// <param name="pathMessagingServiceSid"> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to create the resources from. </param>
        /// <param name="brandRegistrationSid"> A2P Brand Registration SID </param>
        /// <param name="description"> A short description of what this SMS campaign does. </param>
        /// <param name="messageSamples"> Message samples, at least 2 and up to 5 sample messages, <=1024 chars each. </param>
        /// <param name="usAppToPersonUsecase"> A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..] </param>
        /// <param name="hasEmbeddedLinks"> Indicates that this SMS campaign will send messages that contain links. </param>
        /// <param name="hasEmbeddedPhone"> Indicates that this SMS campaign will send messages that contain phone numbers. </param>
        public CreateUsAppToPersonOptions(string pathMessagingServiceSid, string brandRegistrationSid, string description, List<string> messageSamples, string usAppToPersonUsecase, bool? hasEmbeddedLinks, bool? hasEmbeddedPhone)
        {
            PathMessagingServiceSid = pathMessagingServiceSid;
            BrandRegistrationSid = brandRegistrationSid;
            Description = description;
            MessageSamples = messageSamples;
            UsAppToPersonUsecase = usAppToPersonUsecase;
            HasEmbeddedLinks = hasEmbeddedLinks;
            HasEmbeddedPhone = hasEmbeddedPhone;
            OptInKeywords = new List<string>();
            OptOutKeywords = new List<string>();
            HelpKeywords = new List<string>();
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public  List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (BrandRegistrationSid != null)
            {
                p.Add(new KeyValuePair<string, string>("BrandRegistrationSid", BrandRegistrationSid));
            }
            if (Description != null)
            {
                p.Add(new KeyValuePair<string, string>("Description", Description));
            }
            if (MessageSamples != null)
            {
                p.AddRange(MessageSamples.Select(MessageSamples => new KeyValuePair<string, string>("MessageSamples", MessageSamples)));
            }
            if (UsAppToPersonUsecase != null)
            {
                p.Add(new KeyValuePair<string, string>("UsAppToPersonUsecase", UsAppToPersonUsecase));
            }
            if (HasEmbeddedLinks != null)
            {
                p.Add(new KeyValuePair<string, string>("HasEmbeddedLinks", HasEmbeddedLinks.Value.ToString().ToLower()));
            }
            if (HasEmbeddedPhone != null)
            {
                p.Add(new KeyValuePair<string, string>("HasEmbeddedPhone", HasEmbeddedPhone.Value.ToString().ToLower()));
            }
            if (MessageFlow != null)
            {
                p.Add(new KeyValuePair<string, string>("MessageFlow", MessageFlow));
            }
            if (OptInMessage != null)
            {
                p.Add(new KeyValuePair<string, string>("OptInMessage", OptInMessage));
            }
            if (OptOutMessage != null)
            {
                p.Add(new KeyValuePair<string, string>("OptOutMessage", OptOutMessage));
            }
            if (HelpMessage != null)
            {
                p.Add(new KeyValuePair<string, string>("HelpMessage", HelpMessage));
            }
            if (OptInKeywords != null)
            {
                p.AddRange(OptInKeywords.Select(OptInKeywords => new KeyValuePair<string, string>("OptInKeywords", OptInKeywords)));
            }
            if (OptOutKeywords != null)
            {
                p.AddRange(OptOutKeywords.Select(OptOutKeywords => new KeyValuePair<string, string>("OptOutKeywords", OptOutKeywords)));
            }
            if (HelpKeywords != null)
            {
                p.AddRange(HelpKeywords.Select(HelpKeywords => new KeyValuePair<string, string>("HelpKeywords", HelpKeywords)));
            }
            return p;
        }
        

    }
    /// <summary> delete </summary>
    public class DeleteUsAppToPersonOptions : IOptions<UsAppToPersonResource>
    {
        
        ///<summary> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to delete the resource from. </summary> 
        public string PathMessagingServiceSid { get; }

        ///<summary> The SID of the US A2P Compliance resource to delete `QE2c6890da8086d771620e9b13fadeba0b`. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new DeleteUsAppToPersonOptions </summary>
        /// <param name="pathMessagingServiceSid"> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to delete the resource from. </param>
        /// <param name="pathSid"> The SID of the US A2P Compliance resource to delete `QE2c6890da8086d771620e9b13fadeba0b`. </param>
        public DeleteUsAppToPersonOptions(string pathMessagingServiceSid, string pathSid)
        {
            PathMessagingServiceSid = pathMessagingServiceSid;
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public  List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }
        

    }


    /// <summary> fetch </summary>
    public class FetchUsAppToPersonOptions : IOptions<UsAppToPersonResource>
    {
    
        ///<summary> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to fetch the resource from. </summary> 
        public string PathMessagingServiceSid { get; }

        ///<summary> The SID of the US A2P Compliance resource to fetch `QE2c6890da8086d771620e9b13fadeba0b`. </summary> 
        public string PathSid { get; }



        /// <summary> Construct a new FetchUsAppToPersonOptions </summary>
        /// <param name="pathMessagingServiceSid"> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to fetch the resource from. </param>
        /// <param name="pathSid"> The SID of the US A2P Compliance resource to fetch `QE2c6890da8086d771620e9b13fadeba0b`. </param>
        public FetchUsAppToPersonOptions(string pathMessagingServiceSid, string pathSid)
        {
            PathMessagingServiceSid = pathMessagingServiceSid;
            PathSid = pathSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public  List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            return p;
        }
        

    }


    /// <summary> read </summary>
    public class ReadUsAppToPersonOptions : ReadOptions<UsAppToPersonResource>
    {
    
        ///<summary> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to fetch the resource from. </summary> 
        public string PathMessagingServiceSid { get; }



        /// <summary> Construct a new ListUsAppToPersonOptions </summary>
        /// <param name="pathMessagingServiceSid"> The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) to fetch the resource from. </param>
        public ReadUsAppToPersonOptions(string pathMessagingServiceSid)
        {
            PathMessagingServiceSid = pathMessagingServiceSid;
        }

        
        /// <summary> Generate the necessary parameters </summary>
        public  override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }
            return p;
        }
        

    }

}

