/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// VerificationAttemptResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Verify.V2
{

    public class VerificationAttemptResource : Resource
    {
        public sealed class ChannelsEnum : StringEnum
        {
            private ChannelsEnum(string value) : base(value) {}
            public ChannelsEnum() {}
            public static implicit operator ChannelsEnum(string value)
            {
                return new ChannelsEnum(value);
            }

            public static readonly ChannelsEnum Sms = new ChannelsEnum("sms");
            public static readonly ChannelsEnum Call = new ChannelsEnum("call");
            public static readonly ChannelsEnum Email = new ChannelsEnum("email");
            public static readonly ChannelsEnum Whatsapp = new ChannelsEnum("whatsapp");
        }

        public sealed class CallStatusEnum : StringEnum
        {
            private CallStatusEnum(string value) : base(value) {}
            public CallStatusEnum() {}
            public static implicit operator CallStatusEnum(string value)
            {
                return new CallStatusEnum(value);
            }

            public static readonly CallStatusEnum Queued = new CallStatusEnum("queued");
            public static readonly CallStatusEnum InProgress = new CallStatusEnum("in-progress");
            public static readonly CallStatusEnum Completed = new CallStatusEnum("completed");
            public static readonly CallStatusEnum Busy = new CallStatusEnum("busy");
            public static readonly CallStatusEnum Failed = new CallStatusEnum("failed");
            public static readonly CallStatusEnum NoAnswer = new CallStatusEnum("no-answer");
            public static readonly CallStatusEnum Ringing = new CallStatusEnum("ringing");
            public static readonly CallStatusEnum Canceled = new CallStatusEnum("canceled");
        }

        public sealed class MessageStatusEnum : StringEnum
        {
            private MessageStatusEnum(string value) : base(value) {}
            public MessageStatusEnum() {}
            public static implicit operator MessageStatusEnum(string value)
            {
                return new MessageStatusEnum(value);
            }

            public static readonly MessageStatusEnum Queued = new MessageStatusEnum("queued");
            public static readonly MessageStatusEnum Sending = new MessageStatusEnum("sending");
            public static readonly MessageStatusEnum Sent = new MessageStatusEnum("sent");
            public static readonly MessageStatusEnum Failed = new MessageStatusEnum("failed");
            public static readonly MessageStatusEnum Delivered = new MessageStatusEnum("delivered");
            public static readonly MessageStatusEnum Undelivered = new MessageStatusEnum("undelivered");
            public static readonly MessageStatusEnum Receiving = new MessageStatusEnum("receiving");
            public static readonly MessageStatusEnum Received = new MessageStatusEnum("received");
            public static readonly MessageStatusEnum Accepted = new MessageStatusEnum("accepted");
            public static readonly MessageStatusEnum Scheduled = new MessageStatusEnum("scheduled");
            public static readonly MessageStatusEnum Read = new MessageStatusEnum("read");
            public static readonly MessageStatusEnum PartiallyDelivered = new MessageStatusEnum("partially_delivered");
            public static readonly MessageStatusEnum Canceled = new MessageStatusEnum("canceled");
        }

        public sealed class ConversionStatusEnum : StringEnum
        {
            private ConversionStatusEnum(string value) : base(value) {}
            public ConversionStatusEnum() {}
            public static implicit operator ConversionStatusEnum(string value)
            {
                return new ConversionStatusEnum(value);
            }

            public static readonly ConversionStatusEnum Converted = new ConversionStatusEnum("converted");
            public static readonly ConversionStatusEnum Unconverted = new ConversionStatusEnum("unconverted");
        }

        public sealed class AttemptStatusEnum : StringEnum
        {
            private AttemptStatusEnum(string value) : base(value) {}
            public AttemptStatusEnum() {}
            public static implicit operator AttemptStatusEnum(string value)
            {
                return new AttemptStatusEnum(value);
            }

            public static readonly AttemptStatusEnum Confirmed = new AttemptStatusEnum("confirmed");
            public static readonly AttemptStatusEnum Unconfirmed = new AttemptStatusEnum("unconfirmed");
            public static readonly AttemptStatusEnum Expired = new AttemptStatusEnum("expired");
        }

        private static Request BuildReadRequest(ReadVerificationAttemptOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Verify,
                "/v2/Attempts",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// List all the verification attempts for a given Account.
        /// </summary>
        /// <param name="options"> Read VerificationAttempt parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of VerificationAttempt </returns>
        public static ResourceSet<VerificationAttemptResource> Read(ReadVerificationAttemptOptions options,
                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<VerificationAttemptResource>.FromJson("attempts", response.Content);
            return new ResourceSet<VerificationAttemptResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// List all the verification attempts for a given Account.
        /// </summary>
        /// <param name="options"> Read VerificationAttempt parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of VerificationAttempt </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<VerificationAttemptResource>> ReadAsync(ReadVerificationAttemptOptions options,
                                                                                                            ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<VerificationAttemptResource>.FromJson("attempts", response.Content);
            return new ResourceSet<VerificationAttemptResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// List all the verification attempts for a given Account.
        /// </summary>
        /// <param name="dateCreatedAfter"> Filter verification attempts after this date. </param>
        /// <param name="dateCreatedBefore"> Filter verification attempts before this date. </param>
        /// <param name="channelDataTo"> Filters by destination of the verification attempt. </param>
        /// <param name="country"> Filter verification attempts by destination country. </param>
        /// <param name="channel"> Filter verification attempts by communication channel. </param>
        /// <param name="verifyServiceSid"> Filter verification attempts by verify service. </param>
        /// <param name="verificationSid"> Filter attempts by verification. </param>
        /// <param name="status"> Filter verification attempts by conversion status. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of VerificationAttempt </returns>
        public static ResourceSet<VerificationAttemptResource> Read(DateTime? dateCreatedAfter = null,
                                                                    DateTime? dateCreatedBefore = null,
                                                                    string channelDataTo = null,
                                                                    string country = null,
                                                                    VerificationAttemptResource.ChannelsEnum channel = null,
                                                                    string verifyServiceSid = null,
                                                                    string verificationSid = null,
                                                                    VerificationAttemptResource.ConversionStatusEnum status = null,
                                                                    int? pageSize = null,
                                                                    long? limit = null,
                                                                    ITwilioRestClient client = null)
        {
            var options = new ReadVerificationAttemptOptions(){DateCreatedAfter = dateCreatedAfter, DateCreatedBefore = dateCreatedBefore, ChannelDataTo = channelDataTo, Country = country, Channel = channel, VerifyServiceSid = verifyServiceSid, VerificationSid = verificationSid, Status = status, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// List all the verification attempts for a given Account.
        /// </summary>
        /// <param name="dateCreatedAfter"> Filter verification attempts after this date. </param>
        /// <param name="dateCreatedBefore"> Filter verification attempts before this date. </param>
        /// <param name="channelDataTo"> Filters by destination of the verification attempt. </param>
        /// <param name="country"> Filter verification attempts by destination country. </param>
        /// <param name="channel"> Filter verification attempts by communication channel. </param>
        /// <param name="verifyServiceSid"> Filter verification attempts by verify service. </param>
        /// <param name="verificationSid"> Filter attempts by verification. </param>
        /// <param name="status"> Filter verification attempts by conversion status. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of VerificationAttempt </returns>
        public static async System.Threading.Tasks.Task<ResourceSet<VerificationAttemptResource>> ReadAsync(DateTime? dateCreatedAfter = null,
                                                                                                            DateTime? dateCreatedBefore = null,
                                                                                                            string channelDataTo = null,
                                                                                                            string country = null,
                                                                                                            VerificationAttemptResource.ChannelsEnum channel = null,
                                                                                                            string verifyServiceSid = null,
                                                                                                            string verificationSid = null,
                                                                                                            VerificationAttemptResource.ConversionStatusEnum status = null,
                                                                                                            int? pageSize = null,
                                                                                                            long? limit = null,
                                                                                                            ITwilioRestClient client = null)
        {
            var options = new ReadVerificationAttemptOptions(){DateCreatedAfter = dateCreatedAfter, DateCreatedBefore = dateCreatedBefore, ChannelDataTo = channelDataTo, Country = country, Channel = channel, VerifyServiceSid = verifyServiceSid, VerificationSid = verificationSid, Status = status, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns>
        public static Page<VerificationAttemptResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<VerificationAttemptResource>.FromJson("attempts", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns>
        public static Page<VerificationAttemptResource> NextPage(Page<VerificationAttemptResource> page,
                                                                 ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(Rest.Domain.Verify)
            );

            var response = client.Request(request);
            return Page<VerificationAttemptResource>.FromJson("attempts", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns>
        public static Page<VerificationAttemptResource> PreviousPage(Page<VerificationAttemptResource> page,
                                                                     ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(Rest.Domain.Verify)
            );

            var response = client.Request(request);
            return Page<VerificationAttemptResource>.FromJson("attempts", response.Content);
        }

        private static Request BuildFetchRequest(FetchVerificationAttemptOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Verify,
                "/v2/Attempts/" + options.PathSid + "",
                queryParams: options.GetParams(),
                headerParams: null
            );
        }

        /// <summary>
        /// Fetch a specific verification attempt.
        /// </summary>
        /// <param name="options"> Fetch VerificationAttempt parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of VerificationAttempt </returns>
        public static VerificationAttemptResource Fetch(FetchVerificationAttemptOptions options,
                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Fetch a specific verification attempt.
        /// </summary>
        /// <param name="options"> Fetch VerificationAttempt parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of VerificationAttempt </returns>
        public static async System.Threading.Tasks.Task<VerificationAttemptResource> FetchAsync(FetchVerificationAttemptOptions options,
                                                                                                ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Fetch a specific verification attempt.
        /// </summary>
        /// <param name="pathSid"> Verification Attempt Sid. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of VerificationAttempt </returns>
        public static VerificationAttemptResource Fetch(string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchVerificationAttemptOptions(pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Fetch a specific verification attempt.
        /// </summary>
        /// <param name="pathSid"> Verification Attempt Sid. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of VerificationAttempt </returns>
        public static async System.Threading.Tasks.Task<VerificationAttemptResource> FetchAsync(string pathSid,
                                                                                                ITwilioRestClient client = null)
        {
            var options = new FetchVerificationAttemptOptions(pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a VerificationAttemptResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> VerificationAttemptResource object represented by the provided JSON </returns>
        public static VerificationAttemptResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<VerificationAttemptResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The SID that uniquely identifies the verification attempt.
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// The SID of the Account that created the verification.
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The SID of the verify service that generated this attempt.
        /// </summary>
        [JsonProperty("service_sid")]
        public string ServiceSid { get; private set; }
        /// <summary>
        /// The SID of the verification that generated this attempt.
        /// </summary>
        [JsonProperty("verification_sid")]
        public string VerificationSid { get; private set; }
        /// <summary>
        /// The date this Attempt was created
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The date this Attempt was updated
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }
        /// <summary>
        /// Status of the conversion for the verification.
        /// </summary>
        [JsonProperty("conversion_status")]
        [JsonConverter(typeof(StringEnumConverter))]
        public VerificationAttemptResource.ConversionStatusEnum ConversionStatus { get; private set; }
        /// <summary>
        /// Communication channel used for the attempt.
        /// </summary>
        [JsonProperty("channel")]
        [JsonConverter(typeof(StringEnumConverter))]
        public VerificationAttemptResource.ChannelsEnum Channel { get; private set; }
        /// <summary>
        /// An object containing the charge for this verification attempt.
        /// </summary>
        [JsonProperty("price")]
        public object Price { get; private set; }
        /// <summary>
        /// An object containing the channel specific information for an attempt.
        /// </summary>
        [JsonProperty("channel_data")]
        public object ChannelData { get; private set; }
        /// <summary>
        /// The url
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }

        private VerificationAttemptResource()
        {

        }
    }

}