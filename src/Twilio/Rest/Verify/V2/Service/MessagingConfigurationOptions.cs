/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Verify.V2.Service
{

  /// <summary>
  /// Create a new MessagingConfiguration for a service.
  /// </summary>
  public class CreateMessagingConfigurationOptions : IOptions<MessagingConfigurationResource>
  {
    /// <summary>
    /// The SID of the Service that the resource is associated with
    /// </summary>
    public string PathServiceSid { get; }
    /// <summary>
    /// The ISO-3166-1 country code of the country or `all`.
    /// </summary>
    public string Country { get; }
    /// <summary>
    /// The SID of the Messaging Service used for this configuration.
    /// </summary>
    public string MessagingServiceSid { get; }

    /// <summary>
    /// Construct a new CreateMessagingConfigurationOptions
    /// </summary>
    /// <param name="pathServiceSid"> The SID of the Service that the resource is associated with </param>
    /// <param name="country"> The ISO-3166-1 country code of the country or `all`. </param>
    /// <param name="messagingServiceSid"> The SID of the Messaging Service used for this configuration. </param>
    public CreateMessagingConfigurationOptions(string pathServiceSid, string country, string messagingServiceSid)
    {
      PathServiceSid = pathServiceSid;
      Country = country;
      MessagingServiceSid = messagingServiceSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (Country != null)
      {
        p.Add(new KeyValuePair<string, string>("Country", Country));
      }

      if (MessagingServiceSid != null)
      {
        p.Add(new KeyValuePair<string, string>("MessagingServiceSid", MessagingServiceSid.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// Update a specific MessagingConfiguration
  /// </summary>
  public class UpdateMessagingConfigurationOptions : IOptions<MessagingConfigurationResource>
  {
    /// <summary>
    /// The SID of the Service that the resource is associated with
    /// </summary>
    public string PathServiceSid { get; }
    /// <summary>
    /// The ISO-3166-1 country code of the country or `all`.
    /// </summary>
    public string PathCountry { get; }
    /// <summary>
    /// The SID of the Messaging Service used for this configuration.
    /// </summary>
    public string MessagingServiceSid { get; }

    /// <summary>
    /// Construct a new UpdateMessagingConfigurationOptions
    /// </summary>
    /// <param name="pathServiceSid"> The SID of the Service that the resource is associated with </param>
    /// <param name="pathCountry"> The ISO-3166-1 country code of the country or `all`. </param>
    /// <param name="messagingServiceSid"> The SID of the Messaging Service used for this configuration. </param>
    public UpdateMessagingConfigurationOptions(string pathServiceSid, string pathCountry, string messagingServiceSid)
    {
      PathServiceSid = pathServiceSid;
      PathCountry = pathCountry;
      MessagingServiceSid = messagingServiceSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (MessagingServiceSid != null)
      {
        p.Add(new KeyValuePair<string, string>("MessagingServiceSid", MessagingServiceSid.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// Fetch a specific MessagingConfiguration.
  /// </summary>
  public class FetchMessagingConfigurationOptions : IOptions<MessagingConfigurationResource>
  {
    /// <summary>
    /// The SID of the Service that the resource is associated with
    /// </summary>
    public string PathServiceSid { get; }
    /// <summary>
    /// The ISO-3166-1 country code of the country or `all`.
    /// </summary>
    public string PathCountry { get; }

    /// <summary>
    /// Construct a new FetchMessagingConfigurationOptions
    /// </summary>
    /// <param name="pathServiceSid"> The SID of the Service that the resource is associated with </param>
    /// <param name="pathCountry"> The ISO-3166-1 country code of the country or `all`. </param>
    public FetchMessagingConfigurationOptions(string pathServiceSid, string pathCountry)
    {
      PathServiceSid = pathServiceSid;
      PathCountry = pathCountry;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

  /// <summary>
  /// Retrieve a list of all Messaging Configurations for a Service.
  /// </summary>
  public class ReadMessagingConfigurationOptions : ReadOptions<MessagingConfigurationResource>
  {
    /// <summary>
    /// The SID of the Service that the resource is associated with
    /// </summary>
    public string PathServiceSid { get; }

    /// <summary>
    /// Construct a new ReadMessagingConfigurationOptions
    /// </summary>
    /// <param name="pathServiceSid"> The SID of the Service that the resource is associated with </param>
    public ReadMessagingConfigurationOptions(string pathServiceSid)
    {
      PathServiceSid = pathServiceSid;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public override List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      if (PageSize != null)
      {
        p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
      }

      return p;
    }
  }

  /// <summary>
  /// Delete a specific MessagingConfiguration.
  /// </summary>
  public class DeleteMessagingConfigurationOptions : IOptions<MessagingConfigurationResource>
  {
    /// <summary>
    /// The SID of the Service that the resource is associated with
    /// </summary>
    public string PathServiceSid { get; }
    /// <summary>
    /// The ISO-3166-1 country code of the country or `all`.
    /// </summary>
    public string PathCountry { get; }

    /// <summary>
    /// Construct a new DeleteMessagingConfigurationOptions
    /// </summary>
    /// <param name="pathServiceSid"> The SID of the Service that the resource is associated with </param>
    /// <param name="pathCountry"> The ISO-3166-1 country code of the country or `all`. </param>
    public DeleteMessagingConfigurationOptions(string pathServiceSid, string pathCountry)
    {
      PathServiceSid = pathServiceSid;
      PathCountry = pathCountry;
    }

    /// <summary>
    /// Generate the necessary parameters
    /// </summary>
    public List<KeyValuePair<string, string>> GetParams()
    {
      var p = new List<KeyValuePair<string, string>>();
      return p;
    }
  }

}