/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Verify.V2.Service.Entity
{

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// Create a new Challenge for the Factor
    /// </summary>
    public class CreateChallengeOptions : IOptions<ChallengeResource>
    {
        /// <summary>
        /// Service Sid.
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// Unique external identifier of the Entity
        /// </summary>
        public string PathIdentity { get; }
        /// <summary>
        /// Factor Sid.
        /// </summary>
        public string FactorSid { get; }
        /// <summary>
        /// The future date in which this Challenge will expire
        /// </summary>
        public DateTime? ExpirationDate { get; set; }
        /// <summary>
        /// Public details provided to contextualize the Challenge
        /// </summary>
        public string Details { get; set; }
        /// <summary>
        /// Hidden details provided to contextualize the Challenge
        /// </summary>
        public string HiddenDetails { get; set; }
        /// <summary>
        /// The Twilio-Sandbox-Mode HTTP request header
        /// </summary>
        public string TwilioSandboxMode { get; set; }

        /// <summary>
        /// Construct a new CreateChallengeOptions
        /// </summary>
        /// <param name="pathServiceSid"> Service Sid. </param>
        /// <param name="pathIdentity"> Unique external identifier of the Entity </param>
        /// <param name="factorSid"> Factor Sid. </param>
        public CreateChallengeOptions(string pathServiceSid, string pathIdentity, string factorSid)
        {
            PathServiceSid = pathServiceSid;
            PathIdentity = pathIdentity;
            FactorSid = factorSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FactorSid != null)
            {
                p.Add(new KeyValuePair<string, string>("FactorSid", FactorSid.ToString()));
            }

            if (ExpirationDate != null)
            {
                p.Add(new KeyValuePair<string, string>("ExpirationDate", Serializers.DateTimeIso8601(ExpirationDate)));
            }

            if (Details != null)
            {
                p.Add(new KeyValuePair<string, string>("Details", Details));
            }

            if (HiddenDetails != null)
            {
                p.Add(new KeyValuePair<string, string>("HiddenDetails", HiddenDetails));
            }

            return p;
        }

        /// <summary>
        /// Generate the necessary header parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetHeaderParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (TwilioSandboxMode != null)
            {
                p.Add(new KeyValuePair<string, string>("Twilio-Sandbox-Mode", TwilioSandboxMode));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// Fetch a specific Challenge.
    /// </summary>
    public class FetchChallengeOptions : IOptions<ChallengeResource>
    {
        /// <summary>
        /// Service Sid.
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// Unique external identifier of the Entity
        /// </summary>
        public string PathIdentity { get; }
        /// <summary>
        /// A string that uniquely identifies this Challenge.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// The Twilio-Sandbox-Mode HTTP request header
        /// </summary>
        public string TwilioSandboxMode { get; set; }

        /// <summary>
        /// Construct a new FetchChallengeOptions
        /// </summary>
        /// <param name="pathServiceSid"> Service Sid. </param>
        /// <param name="pathIdentity"> Unique external identifier of the Entity </param>
        /// <param name="pathSid"> A string that uniquely identifies this Challenge. </param>
        public FetchChallengeOptions(string pathServiceSid, string pathIdentity, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathIdentity = pathIdentity;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }

        /// <summary>
        /// Generate the necessary header parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetHeaderParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (TwilioSandboxMode != null)
            {
                p.Add(new KeyValuePair<string, string>("Twilio-Sandbox-Mode", TwilioSandboxMode));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// Retrieve a list of all Challenges for a Factor.
    /// </summary>
    public class ReadChallengeOptions : ReadOptions<ChallengeResource>
    {
        /// <summary>
        /// Service Sid.
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// Unique external identifier of the Entity
        /// </summary>
        public string PathIdentity { get; }
        /// <summary>
        /// Factor Sid.
        /// </summary>
        public string FactorSid { get; set; }
        /// <summary>
        /// The Status of theChallenges to fetch
        /// </summary>
        public ChallengeResource.ChallengeStatusesEnum Status { get; set; }
        /// <summary>
        /// The Twilio-Sandbox-Mode HTTP request header
        /// </summary>
        public string TwilioSandboxMode { get; set; }

        /// <summary>
        /// Construct a new ReadChallengeOptions
        /// </summary>
        /// <param name="pathServiceSid"> Service Sid. </param>
        /// <param name="pathIdentity"> Unique external identifier of the Entity </param>
        public ReadChallengeOptions(string pathServiceSid, string pathIdentity)
        {
            PathServiceSid = pathServiceSid;
            PathIdentity = pathIdentity;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FactorSid != null)
            {
                p.Add(new KeyValuePair<string, string>("FactorSid", FactorSid.ToString()));
            }

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }

        /// <summary>
        /// Generate the necessary header parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetHeaderParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (TwilioSandboxMode != null)
            {
                p.Add(new KeyValuePair<string, string>("Twilio-Sandbox-Mode", TwilioSandboxMode));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    ///
    /// Verify a specific Challenge.
    /// </summary>
    public class UpdateChallengeOptions : IOptions<ChallengeResource>
    {
        /// <summary>
        /// Service Sid.
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// Unique external identifier of the Entity
        /// </summary>
        public string PathIdentity { get; }
        /// <summary>
        /// A string that uniquely identifies this Challenge.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// Optional payload to verify the Challenge
        /// </summary>
        public string AuthPayload { get; set; }
        /// <summary>
        /// The Twilio-Sandbox-Mode HTTP request header
        /// </summary>
        public string TwilioSandboxMode { get; set; }

        /// <summary>
        /// Construct a new UpdateChallengeOptions
        /// </summary>
        /// <param name="pathServiceSid"> Service Sid. </param>
        /// <param name="pathIdentity"> Unique external identifier of the Entity </param>
        /// <param name="pathSid"> A string that uniquely identifies this Challenge. </param>
        public UpdateChallengeOptions(string pathServiceSid, string pathIdentity, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathIdentity = pathIdentity;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (AuthPayload != null)
            {
                p.Add(new KeyValuePair<string, string>("AuthPayload", AuthPayload));
            }

            return p;
        }

        /// <summary>
        /// Generate the necessary header parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetHeaderParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (TwilioSandboxMode != null)
            {
                p.Add(new KeyValuePair<string, string>("Twilio-Sandbox-Mode", TwilioSandboxMode));
            }

            return p;
        }
    }

}