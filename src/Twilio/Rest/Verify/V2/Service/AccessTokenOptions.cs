/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Verify.V2.Service
{

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    ///
    /// Create a new enrollment Access Token for the Entity
    /// </summary>
    public class CreateAccessTokenOptions : IOptions<AccessTokenResource>
    {
        /// <summary>
        /// Service Sid.
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// Unique external identifier of the Entity
        /// </summary>
        public string Identity { get; }
        /// <summary>
        /// The Type of this Factor
        /// </summary>
        public AccessTokenResource.FactorTypesEnum FactorType { get; }

        /// <summary>
        /// Construct a new CreateAccessTokenOptions
        /// </summary>
        /// <param name="pathServiceSid"> Service Sid. </param>
        /// <param name="identity"> Unique external identifier of the Entity </param>
        /// <param name="factorType"> The Type of this Factor </param>
        public CreateAccessTokenOptions(string pathServiceSid,
                                        string identity,
                                        AccessTokenResource.FactorTypesEnum factorType)
        {
            PathServiceSid = pathServiceSid;
            Identity = identity;
            FactorType = factorType;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Identity != null)
            {
                p.Add(new KeyValuePair<string, string>("Identity", Identity));
            }

            if (FactorType != null)
            {
                p.Add(new KeyValuePair<string, string>("FactorType", FactorType.ToString()));
            }

            return p;
        }
    }

}