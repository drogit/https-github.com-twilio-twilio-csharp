/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Verify.V2
{

    /// <summary>
    /// List all the verification attempts for a given Account.
    /// </summary>
    public class ReadVerificationAttemptOptions : ReadOptions<VerificationAttemptResource>
    {
        /// <summary>
        /// Filter verification attempts after this date.
        /// </summary>
        public DateTime? DateCreatedAfter { get; set; }
        /// <summary>
        /// Filter verification attempts before this date.
        /// </summary>
        public DateTime? DateCreatedBefore { get; set; }
        /// <summary>
        /// Filters by destination of the verification attempt.
        /// </summary>
        public string ChannelDataTo { get; set; }
        /// <summary>
        /// Filter verification attempts by destination country.
        /// </summary>
        public string Country { get; set; }
        /// <summary>
        /// Filter verification attempts by communication channel.
        /// </summary>
        public VerificationAttemptResource.ChannelsEnum Channel { get; set; }
        /// <summary>
        /// Filter verification attempts by verify service.
        /// </summary>
        public string VerifyServiceSid { get; set; }
        /// <summary>
        /// Filter attempts by verification.
        /// </summary>
        public string VerificationSid { get; set; }
        /// <summary>
        /// Filter verification attempts by conversion status.
        /// </summary>
        public VerificationAttemptResource.ConversionStatusEnum Status { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (DateCreatedAfter != null)
            {
                p.Add(new KeyValuePair<string, string>("DateCreatedAfter", Serializers.DateTimeIso8601(DateCreatedAfter)));
            }

            if (DateCreatedBefore != null)
            {
                p.Add(new KeyValuePair<string, string>("DateCreatedBefore", Serializers.DateTimeIso8601(DateCreatedBefore)));
            }

            if (ChannelDataTo != null)
            {
                p.Add(new KeyValuePair<string, string>("ChannelData.To", ChannelDataTo));
            }

            if (Country != null)
            {
                p.Add(new KeyValuePair<string, string>("Country", Country.ToString()));
            }

            if (Channel != null)
            {
                p.Add(new KeyValuePair<string, string>("Channel", Channel.ToString()));
            }

            if (VerifyServiceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("VerifyServiceSid", VerifyServiceSid.ToString()));
            }

            if (VerificationSid != null)
            {
                p.Add(new KeyValuePair<string, string>("VerificationSid", VerificationSid.ToString()));
            }

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// Fetch a specific verification attempt.
    /// </summary>
    public class FetchVerificationAttemptOptions : IOptions<VerificationAttemptResource>
    {
        /// <summary>
        /// Verification Attempt Sid.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchVerificationAttemptOptions
        /// </summary>
        /// <param name="pathSid"> Verification Attempt Sid. </param>
        public FetchVerificationAttemptOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}