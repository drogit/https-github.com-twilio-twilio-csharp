/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using System.Linq;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.IpMessaging.V2.Service.Channel
{

    /// <summary>
    /// ReadWebhookOptions
    /// </summary>
    public class ReadWebhookOptions : ReadOptions<WebhookResource>
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The channel_sid
        /// </summary>
        public string PathChannelSid { get; }

        /// <summary>
        /// Construct a new ReadWebhookOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathChannelSid"> The channel_sid </param>
        public ReadWebhookOptions(string pathServiceSid, string pathChannelSid)
        {
            PathServiceSid = pathServiceSid;
            PathChannelSid = pathChannelSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// FetchWebhookOptions
    /// </summary>
    public class FetchWebhookOptions : IOptions<WebhookResource>
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The channel_sid
        /// </summary>
        public string PathChannelSid { get; }
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchWebhookOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathChannelSid"> The channel_sid </param>
        /// <param name="pathSid"> The sid </param>
        public FetchWebhookOptions(string pathServiceSid, string pathChannelSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathChannelSid = pathChannelSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// CreateWebhookOptions
    /// </summary>
    public class CreateWebhookOptions : IOptions<WebhookResource>
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The channel_sid
        /// </summary>
        public string PathChannelSid { get; }
        /// <summary>
        /// The type
        /// </summary>
        public WebhookResource.TypeEnum Type { get; }
        /// <summary>
        /// The configuration.url
        /// </summary>
        public string ConfigurationUrl { get; set; }
        /// <summary>
        /// The configuration.method
        /// </summary>
        public WebhookResource.MethodEnum ConfigurationMethod { get; set; }
        /// <summary>
        /// The configuration.filters
        /// </summary>
        public List<string> ConfigurationFilters { get; set; }
        /// <summary>
        /// The configuration.triggers
        /// </summary>
        public List<string> ConfigurationTriggers { get; set; }
        /// <summary>
        /// The configuration.flow_sid
        /// </summary>
        public string ConfigurationFlowSid { get; set; }
        /// <summary>
        /// The configuration.retry_count
        /// </summary>
        public int? ConfigurationRetryCount { get; set; }

        /// <summary>
        /// Construct a new CreateWebhookOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathChannelSid"> The channel_sid </param>
        /// <param name="type"> The type </param>
        public CreateWebhookOptions(string pathServiceSid, string pathChannelSid, WebhookResource.TypeEnum type)
        {
            PathServiceSid = pathServiceSid;
            PathChannelSid = pathChannelSid;
            Type = type;
            ConfigurationFilters = new List<string>();
            ConfigurationTriggers = new List<string>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Type != null)
            {
                p.Add(new KeyValuePair<string, string>("Type", Type.ToString()));
            }

            if (ConfigurationUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("Configuration.Url", ConfigurationUrl));
            }

            if (ConfigurationMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("Configuration.Method", ConfigurationMethod.ToString()));
            }

            if (ConfigurationFilters != null)
            {
                p.AddRange(ConfigurationFilters.Select(prop => new KeyValuePair<string, string>("Configuration.Filters", prop)));
            }

            if (ConfigurationTriggers != null)
            {
                p.AddRange(ConfigurationTriggers.Select(prop => new KeyValuePair<string, string>("Configuration.Triggers", prop)));
            }

            if (ConfigurationFlowSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Configuration.FlowSid", ConfigurationFlowSid.ToString()));
            }

            if (ConfigurationRetryCount != null)
            {
                p.Add(new KeyValuePair<string, string>("Configuration.RetryCount", ConfigurationRetryCount.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// UpdateWebhookOptions
    /// </summary>
    public class UpdateWebhookOptions : IOptions<WebhookResource>
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The channel_sid
        /// </summary>
        public string PathChannelSid { get; }
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// The configuration.url
        /// </summary>
        public string ConfigurationUrl { get; set; }
        /// <summary>
        /// The configuration.method
        /// </summary>
        public WebhookResource.MethodEnum ConfigurationMethod { get; set; }
        /// <summary>
        /// The configuration.filters
        /// </summary>
        public List<string> ConfigurationFilters { get; set; }
        /// <summary>
        /// The configuration.triggers
        /// </summary>
        public List<string> ConfigurationTriggers { get; set; }
        /// <summary>
        /// The configuration.flow_sid
        /// </summary>
        public string ConfigurationFlowSid { get; set; }
        /// <summary>
        /// The configuration.retry_count
        /// </summary>
        public int? ConfigurationRetryCount { get; set; }

        /// <summary>
        /// Construct a new UpdateWebhookOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathChannelSid"> The channel_sid </param>
        /// <param name="pathSid"> The sid </param>
        public UpdateWebhookOptions(string pathServiceSid, string pathChannelSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathChannelSid = pathChannelSid;
            PathSid = pathSid;
            ConfigurationFilters = new List<string>();
            ConfigurationTriggers = new List<string>();
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (ConfigurationUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("Configuration.Url", ConfigurationUrl));
            }

            if (ConfigurationMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("Configuration.Method", ConfigurationMethod.ToString()));
            }

            if (ConfigurationFilters != null)
            {
                p.AddRange(ConfigurationFilters.Select(prop => new KeyValuePair<string, string>("Configuration.Filters", prop)));
            }

            if (ConfigurationTriggers != null)
            {
                p.AddRange(ConfigurationTriggers.Select(prop => new KeyValuePair<string, string>("Configuration.Triggers", prop)));
            }

            if (ConfigurationFlowSid != null)
            {
                p.Add(new KeyValuePair<string, string>("Configuration.FlowSid", ConfigurationFlowSid.ToString()));
            }

            if (ConfigurationRetryCount != null)
            {
                p.Add(new KeyValuePair<string, string>("Configuration.RetryCount", ConfigurationRetryCount.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// DeleteWebhookOptions
    /// </summary>
    public class DeleteWebhookOptions : IOptions<WebhookResource>
    {
        /// <summary>
        /// The service_sid
        /// </summary>
        public string PathServiceSid { get; }
        /// <summary>
        /// The channel_sid
        /// </summary>
        public string PathChannelSid { get; }
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteWebhookOptions
        /// </summary>
        /// <param name="pathServiceSid"> The service_sid </param>
        /// <param name="pathChannelSid"> The channel_sid </param>
        /// <param name="pathSid"> The sid </param>
        public DeleteWebhookOptions(string pathServiceSid, string pathChannelSid, string pathSid)
        {
            PathServiceSid = pathServiceSid;
            PathChannelSid = pathChannelSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}