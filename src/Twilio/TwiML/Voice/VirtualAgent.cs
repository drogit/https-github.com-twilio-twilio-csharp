/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Linq;

namespace Twilio.TwiML.Voice
{

  /// <summary>
  /// VirtualAgent TwiML Noun
  /// </summary>
  public class VirtualAgent : TwiML
  {
    /// <summary>
    /// Defines the conversation profile Dialogflow needs to use
    /// </summary>
    public string ConnectorName { get; set; }
    /// <summary>
    /// Language to be used by Dialogflow to transcribe speech
    /// </summary>
    public string Language { get; set; }
    /// <summary>
    /// Whether sentiment analysis needs to be enabled or not
    /// </summary>
    public bool? SentimentAnalysis { get; set; }
    /// <summary>
    /// URL to post status callbacks from Twilio
    /// </summary>
    public string StatusCallback { get; set; }

    /// <summary>
    /// Create a new VirtualAgent
    /// </summary>
    /// <param name="connectorName"> Defines the conversation profile Dialogflow needs to use </param>
    /// <param name="language"> Language to be used by Dialogflow to transcribe speech </param>
    /// <param name="sentimentAnalysis"> Whether sentiment analysis needs to be enabled or not </param>
    /// <param name="statusCallback"> URL to post status callbacks from Twilio </param>
    public VirtualAgent(string connectorName = null,
                        string language = null,
                        bool? sentimentAnalysis = null,
                        string statusCallback = null) : base("VirtualAgent")
    {
      this.ConnectorName = connectorName;
      this.Language = language;
      this.SentimentAnalysis = sentimentAnalysis;
      this.StatusCallback = statusCallback;
    }

    /// <summary>
    /// Return the attributes of the TwiML tag
    /// </summary>
    protected override List<XAttribute> GetElementAttributes()
    {
      var attributes = new List<XAttribute>();
      if (this.ConnectorName != null)
      {
        attributes.Add(new XAttribute("connectorName", this.ConnectorName));
      }
      if (this.Language != null)
      {
        attributes.Add(new XAttribute("language", this.Language));
      }
      if (this.SentimentAnalysis != null)
      {
        attributes.Add(new XAttribute("sentimentAnalysis", this.SentimentAnalysis.Value.ToString().ToLower()));
      }
      if (this.StatusCallback != null)
      {
        attributes.Add(new XAttribute("statusCallback", this.StatusCallback));
      }
      return attributes;
    }

    /// <summary>
    /// Append a child TwiML element to this element returning this element to allow chaining.
    /// </summary>
    /// <param name="childElem"> Child TwiML element to add </param>
    public new VirtualAgent Append(TwiML childElem)
    {
      return (VirtualAgent)base.Append(childElem);
    }

    /// <summary>
    /// Add freeform key-value attributes to the generated xml
    /// </summary>
    /// <param name="key"> Option key </param>
    /// <param name="value"> Option value </param>
    public new VirtualAgent SetOption(string key, object value)
    {
      return (VirtualAgent)base.SetOption(key, value);
    }
  }

}