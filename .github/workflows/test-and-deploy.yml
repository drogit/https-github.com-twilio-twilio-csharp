name: Test and Deploy
on:
  push:
    branches: [ '*' ]
    tags: [ '*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run automatically at 8AM PST Monday-Friday
    - cron: '0 15 * * 1-5'
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout twilio-csharp
        uses: actions/checkout@v2

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: '3.1.x'

      - name: Build & Test
        run: make test

  sonarcloud:
    name: SonarCloud
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"twilio_twilio-csharp" /o:"twilio" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.language="cs" /d:sonar.exclusions="src/Twilio/Rest/**/*.*,test/Twilio.Test/**/*.*" /d:sonar.cs.opencover.reportsPaths="test/lcov.net451.opencover.xml"
          dotnet build Twilio.sln > buildsonar.log
	        dotnet test test/Twilio.Test/Twilio.Test.csproj --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../lcov
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
    


  # deploy:
  #   name: Deploy
  #   if: success() && github.ref_type == 'tag'
  #   needs: [ test ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout twilio-csharp
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_AUTH_TOKEN }}

  #     # The expression strips off the shortest match from the front of the string to yield just the tag name as the output
  #     - name: Get tagged version
  #       run: echo "GITHUB_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

  #     - name: Build and Push image
  #       run: make docker-build docker-push

  #     - name: Setup .NET Core SDK
  #       uses: actions/setup-dotnet@v1.8.2
  #       with:
  #         dotnet-version: '3.1.x'

  #     - name: Publish package to NuGet
  #       run: |
  #         make release
  #         dotnet nuget push **/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json

  # notify-on-failure:
  #   name: Slack notify on failure
  #   if: failure() && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref_type == 'tag')
  #   needs: [ test, deploy ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_COLOR: failure
  #         SLACK_ICON_EMOJI: ':github:'
  #         SLACK_MESSAGE: ${{ format('Tests *{0}*, Deploy *{1}*, {2}/{3}/actions/runs/{4}', needs.test.result, needs.deploy.result, github.server_url, github.repository, github.run_id) }}
  #         SLACK_TITLE: Action Failure - ${{ github.repository }}
  #         SLACK_USERNAME: GitHub Actions
  #         SLACK_MSG_AUTHOR: twilio-dx
  #         SLACK_FOOTER: Posted automatically using GitHub Actions
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #         MSG_MINIMAL: true
